
trabajofinal/out/trabajofinal.elf:     file format elf32-littlearm
trabajofinal/out/trabajofinal.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001da9

Program Header:
0x70000001 off    0x00012500 vaddr 0x1a002500 paddr 0x1a002500 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000004a4 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002508 memsz 0x00002508 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002508 align 2**16
         filesz 0x000000c8 memsz 0x000000c8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002500  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  10000000  1a002508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200c8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200c8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200c8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200c8  2**2
                  CONTENTS
  6 .bss          000003dc  100000c8  100000c8  000000c8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200c8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200c8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200c8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200c8  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002500  1a002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200c8  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200c8  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200c8  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200c8  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200c8  2**2
                  CONTENTS
 17 .noinit       00000000  100004a4  100004a4  000200c8  2**2
                  CONTENTS
 18 .debug_info   00021988  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00005368  00000000  00000000  00041a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000009f8  00000000  00000000  00046db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000a20  00000000  00000000  000477b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0000c944  00000000  00000000  000481d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00014392  00000000  00000000  00054b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0001f867  00000000  00000000  00068ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000068  00000000  00000000  0008870d  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000032  00000000  00000000  00088775  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000186c  00000000  00000000  000887a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_loc    00008048  00000000  00000000  0008a014  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000c8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002500 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100004a4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0009d8 l     F .text	000000bc uartProcessIRQ
100000dc l     O .bss	00000004 rxIsrCallbackUART0
100000e0 l     O .bss	00000004 rxIsrCallbackUART2
100000e4 l     O .bss	00000004 rxIsrCallbackUART3
100000e8 l     O .bss	00000004 txIsrCallbackUART0
100000ec l     O .bss	00000004 txIsrCallbackUART2
100000f0 l     O .bss	00000004 txIsrCallbackUART3
1a002314 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 procesamiento.c
00000000 l    df *ABS*	00000000 trabajofinal.c
00000000 l    df *ABS*	00000000 lecturaADC.c
00000000 l    df *ABS*	00000000 inicio.c
00000000 l    df *ABS*	00000000 enviodatos.c
100000c8 l     O .bss	0000000a uartBuff.12278
00000000 l    df *ABS*	00000000 lecturateclado.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000000 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000660 l     F .text	00000010 clearInterrupt
1a000670 l     F .text	0000005c serveInterrupt
10000008 l     O .data	00000048 ultrasonicSensors
1a0021d8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0006ec l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000c2a l     F .text	00000002 errorOcurred
1a000c2c l     F .text	00000002 doNothing
10000050 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a000f10 l     F .text	00000044 Board_LED_Init
1a000f54 l     F .text	00000040 Board_TEC_Init
1a000f94 l     F .text	00000040 Board_GPIO_Init
1a000fd4 l     F .text	00000038 Board_SPI_Init
1a00100c l     F .text	00000024 Board_I2C_Init
1a001030 l     F .text	00000030 Board_ADC_Init
1a002360 l     O .text	00000008 GpioButtons
1a002368 l     O .text	0000000c GpioLeds
1a002374 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00238c l     O .text	0000000c InitClkStates
1a002398 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000090 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001208 l     F .text	0000002c Chip_UART_GetIndex
1a002430 l     O .text	00000008 UART_BClock
1a002438 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0013a4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0013b8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001584 l     F .text	000000a0 pll_calc_divs
1a001624 l     F .text	0000010c pll_get_frac
1a001730 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0019a4 l     F .text	00000022 Chip_Clock_GetDivRate
100000f4 l     O .bss	00000008 audio_usb_pll_freq
1a00244c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0024b8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001cf4 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001d08 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a002500 l       .bss_RAM5	00000000 __init_array_end
1a002500 l       .bss_RAM5	00000000 __preinit_array_end
1a002500 l       .bss_RAM5	00000000 __init_array_start
1a002500 l       .bss_RAM5	00000000 __preinit_array_start
1a0017c8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000cb0 g     F .text	00000044 TIMER2_IRQHandler
1a000ac4 g     F .text	00000014 uartRxRead
1a00018e  w    F .text	00000002 DebugMon_Handler
1a000194  w    F .text	00000002 RIT_IRQHandler
1a001450 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000194  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000194  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000194  w    F .text	00000002 I2C0_IRQHandler
1a000b68 g     F .text	0000001e uartReadByte
100000fc g     O .bss	00000001 mili
1a000bec g     F .text	0000003e delayRead
100000d4 g     O .bss	00000004 callBackFuncParams
1a000184  w    F .text	00000002 HardFault_Handler
1a00046c g     F .text	00000054 inicio
1a000000 g       *ABS*	00000000 __vectors_start__
1a001518 g     F .text	0000000c Chip_ADC_SetResolution
1a000300 g     F .text	0000004c procesamiento
1a0009a8 g     F .text	00000030 SysTick_Handler
1a001288 g     F .text	00000040 Chip_UART_SetBaud
1a000194  w    F .text	00000002 SDIO_IRQHandler
1a000194  w    F .text	00000002 ATIMER_IRQHandler
1a000190  w    F .text	00000002 PendSV_Handler
1a000182  w    F .text	00000002 NMI_Handler
1a002508 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000194  w    F .text	00000002 I2C1_IRQHandler
1a000194  w    F .text	00000002 UART1_IRQHandler
1a000194  w    F .text	00000002 GPIO5_IRQHandler
1a000194  w    F .text	00000002 CAN1_IRQHandler
53ff5ab4 g       *ABS*	00000000 __valid_user_code_checksum
1a002508 g       .ARM.exidx	00000000 _etext
1a000194  w    F .text	00000002 USB1_IRQHandler
1a000194  w    F .text	00000002 I2S0_IRQHandler
100000fd g     O .bss	00000001 tempo
1a000cf4 g     F .text	00000044 TIMER3_IRQHandler
1a001a46 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001b4 g     F .text	00000012 bss_init
1a000194  w    F .text	00000002 SGPIO_IRQHandler
1a001e30 g     F .text	00000000 .hidden __aeabi_uldivmod
100004a4 g       .noinit	00000000 _noinit
1a000ba0 g     F .text	00000016 uartWriteString
100004a0 g     O .bss	00000004 SystemCoreClock
1a001234 g     F .text	00000054 Chip_UART_Init
1a000194  w    F .text	00000002 ADC0_IRQHandler
1a0013f8 g     F .text	00000018 readAdcVal
1a00018a  w    F .text	00000002 UsageFault_Handler
1a001af8 g     F .text	0000004c Chip_Clock_GetRate
1a000194  w    F .text	00000002 GPIO6_IRQHandler
10000490 g     O .bss	00000008 tickCounter
1a001114 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0004c0 g     F .text	00000060 itoa
1a001e60 g     F .text	000002d0 .hidden __udivmoddi4
1a00235c g     O .text	00000004 ExtRateIn
10000488 g     O .bss	00000001 receivedByte
1a000194  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0006d6 g     F .text	0000000a GPIO1_IRQHandler
1a000194  w    F .text	00000002 SSP0_IRQHandler
1a000a94 g     F .text	00000018 uartRxReady
1a002500 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0013ea g     F .text	0000000e setStartMode
1a002134 g     F .text	00000048 __libc_init_array
1a000d38 g     F .text	0000008c adcInit
1a000194  w    F .text	00000002 ADC1_IRQHandler
1a001084 g     F .text	0000003c Board_Init
1a001e2c g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000194  w    F .text	00000002 RTC_IRQHandler
100004a4 g       .bss	00000000 _ebss
1a001524 g     F .text	0000002a Chip_ADC_EnableChannel
1a000c30 g     F .text	00000040 TIMER0_IRQHandler
1a00092c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000194  w    F .text	00000002 SPI_IRQHandler
1a0011d0 g     F .text	00000038 Chip_I2C_SetClockRate
1a000194  w    F .text	00000002 LCD_IRQHandler
1a00177c g     F .text	0000004c Chip_Clock_EnableCrystal
1a001466 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000196 g     F .text	0000001e data_init
1a0014c6 g     F .text	00000020 Chip_ADC_SetStartMode
1a000c70 g     F .text	00000040 TIMER1_IRQHandler
1a0011ac g     F .text	00000024 Chip_I2C_Init
1a000bb6 g     F .text	0000000a UART2_IRQHandler
1a00058c g     F .text	000000b8 lecturateclado
1a001938 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0021dc g     O .text	00000136 gpioPinsInit
100000fe g     O .bss	00000002 i
1a000b86 g     F .text	0000001a uartWriteByte
1a001d20 g     F .text	00000012 Chip_SSP_SetClockRate
1a0006e0 g     F .text	0000000a GPIO2_IRQHandler
1a000dc4 g     F .text	00000058 adcRead
1a001a20 g     F .text	00000026 Chip_Clock_GetBaseClock
100000c8 g       .bss	00000000 _bss
1a00146e g     F .text	00000036 Chip_ADC_ReadStatus
1a0014e6 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000bcc g     F .text	00000020 delayInit
1a000194  w    F .text	00000002 I2S1_IRQHandler
1a001d32 g     F .text	0000003e Chip_SSP_SetBitRate
1a001b98 g     F .text	00000002 Chip_GPIO_Init
1a002388 g     O .text	00000004 OscRateIn
1a0003a4 g     F .text	000000c8 lecturaADC
1a000aec g     F .text	0000007c uartInit
100004a4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000194  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000720 g     F .text	00000194 gpioInit
1a002130  w    F .text	00000002 .hidden __aeabi_ldiv0
1a000194  w    F .text	00000002 USB0_IRQHandler
1a001ac4 g     F .text	00000034 Chip_Clock_Disable
1a000194  w    F .text	00000002 GPIO3_IRQHandler
1a000194  w    F .text	00000002 SCT_IRQHandler
1a0017e4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00217c g     F .text	00000010 memset
1a000186  w    F .text	00000002 MemManage_Handler
1a00034c g     F .text	00000058 main
1a000194  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
10000100 g     O .bss	0000012c datos8
1a00018c  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a000aac g     F .text	00000018 uartTxReady
1a000194  w    F .text	00000002 GPIO7_IRQHandler
1a001a54 g     F .text	0000003c Chip_Clock_EnableOpts
1a001800 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001b44 g     F .text	00000054 fpuInit
1a0018b8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0010c0 g     F .text	0000001c SystemInit
1a000194  w    F .text	00000002 SPIFI_IRQHandler
1a000194  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001410 g     F .text	00000040 Chip_ADC_Init
1a0010dc g     F .text	00000038 Board_SetupMuxing
1a0012c8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000908 g     F .text	0000000c tickRead
10000498 g     O .bss	00000008 tickRateMS
1a00154e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a000194  w    F .text	00000002 ETH_IRQHandler
100000d8 g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000ad8 g     F .text	00000014 uartTxWrite
1a000194  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100004a4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001d70 g     F .text	00000038 Chip_SSP_Init
1a000194  w    F .text	00000002 GINT0_IRQHandler
1a000194  w    F .text	00000002 DAC_IRQHandler
1000022c g     O .bss	00000001 bantrigger
1a001060 g     F .text	00000024 Board_Debug_Init
1a000520 g     F .text	0000006c enviodatos
1a0014a4 g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
100000c8 g       .data	00000000 _edata
1a00118c g     F .text	00000020 Chip_I2C_EventHandler
1a000194  w    F .text	00000002 M0SUB_IRQHandler
1a001b9c g     F .text	00000158 Chip_SetupCoreClock
1a0006cc g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001da8 g     F .text	00000084 ResetISR
1a001570 g     F .text	00000014 SystemCoreClockUpdate
1a000194  w    F .text	00000002 DMA_IRQHandler
1a000194  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1000022d g     O .bss	00000001 bancont
1000022e g     O .bss	00000001 tarea
1a002130  w    F .text	00000002 .hidden __aeabi_idiv0
1a000188  w    F .text	00000002 BusFault_Handler
1a001a90 g     F .text	00000034 Chip_Clock_Enable
1a000bc0 g     F .text	0000000a UART3_IRQHandler
1a000194  w    F .text	00000002 MCPWM_IRQHandler
1a000194  w    F .text	00000002 M0APP_IRQHandler
1a0008b4 g     F .text	00000054 gpioRead
1a000e1c g     F .text	000000f4 boardInit
1a000194  w    F .text	00000002 GINT1_IRQHandler
1a000914 g     F .text	00000018 tickPowerSet
10000230 g     O .bss	00000258 muestra16
1a0019c8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a000644 g     F .text	0000001c cyclesCounterInit
1a000194  w    F .text	00000002 GPIO4_IRQHandler
1a001180 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 a9 1d 00 1a 83 01 00 1a 85 01 00 1a     ................
1a000010:	87 01 00 1a 89 01 00 1a 8b 01 00 1a b4 5a ff 53     .............Z.S
	...
1a00002c:	8d 01 00 1a 8f 01 00 1a 00 00 00 00 91 01 00 1a     ................
1a00003c:	a9 09 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00004c:	00 00 00 00 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00005c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00006c:	95 01 00 1a 31 0c 00 1a 71 0c 00 1a b1 0c 00 1a     ....1...q.......
1a00007c:	f5 0c 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00008c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00009c:	95 01 00 1a 79 01 00 1a 95 01 00 1a b7 0b 00 1a     ....y...........
1a0000ac:	c1 0b 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000bc:	95 01 00 1a cd 06 00 1a d7 06 00 1a e1 06 00 1a     ................
1a0000cc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000dc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000ec:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a0000fc:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a00010c:	95 01 00 1a 95 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002508 	.word	0x1a002508
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000c8 	.word	0x000000c8
1a000120:	1a002508 	.word	0x1a002508
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002508 	.word	0x1a002508
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002508 	.word	0x1a002508
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002508 	.word	0x1a002508
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000c8 	.word	0x100000c8
1a000154:	000003dc 	.word	0x000003dc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 fc2c 	bl	1a0009d8 <uartProcessIRQ>
}
1a000180:	bd08      	pop	{r3, pc}

1a000182 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <NMI_Handler>

1a000184 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <HardFault_Handler>

1a000186 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <MemManage_Handler>

1a000188 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>

1a00018a <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <UsageFault_Handler>

1a00018c <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>

1a00018e <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00018e:	e7fe      	b.n	1a00018e <DebugMon_Handler>

1a000190 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000192:	e7fe      	b.n	1a000192 <PendSV_Handler+0x2>

1a000194 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <ADC0_IRQHandler>

1a000196 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	2300      	movs	r3, #0
1a000198:	4293      	cmp	r3, r2
1a00019a:	d20a      	bcs.n	1a0001b2 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00019e:	f850 4b04 	ldr.w	r4, [r0], #4
1a0001a2:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a6:	3304      	adds	r3, #4
1a0001a8:	4293      	cmp	r3, r2
1a0001aa:	d3f8      	bcc.n	1a00019e <data_init+0x8>
}
1a0001ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b0:	4770      	bx	lr
1a0001b2:	4770      	bx	lr

1a0001b4 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	2300      	movs	r3, #0
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d204      	bcs.n	1a0001c4 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ba:	2200      	movs	r2, #0
1a0001bc:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	3304      	adds	r3, #4
1a0001c2:	e7f8      	b.n	1a0001b6 <bss_init+0x2>
}
1a0001c4:	4770      	bx	lr
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <procesamiento>:
#include "sapi.h"        // <= Biblioteca sAPI
#include "inicio.h"
#include "procesamiento.h"

void procesamiento() {
	if (tarea == 2) {
1a000300:	4b0e      	ldr	r3, [pc, #56]	; (1a00033c <procesamiento+0x3c>)
1a000302:	781b      	ldrb	r3, [r3, #0]
1a000304:	2b02      	cmp	r3, #2
1a000306:	d000      	beq.n	1a00030a <procesamiento+0xa>
			datos8[i] = (muestra16[i] * 256) / 1024;
		}
		i = 0;
		tarea = 3;
	}
}
1a000308:	4770      	bx	lr
		for (i = 0; i < 256; i++) {
1a00030a:	4b0d      	ldr	r3, [pc, #52]	; (1a000340 <procesamiento+0x40>)
1a00030c:	2200      	movs	r2, #0
1a00030e:	801a      	strh	r2, [r3, #0]
1a000310:	4b0b      	ldr	r3, [pc, #44]	; (1a000340 <procesamiento+0x40>)
1a000312:	881b      	ldrh	r3, [r3, #0]
1a000314:	2bff      	cmp	r3, #255	; 0xff
1a000316:	d809      	bhi.n	1a00032c <procesamiento+0x2c>
			datos8[i] = (muestra16[i] * 256) / 1024;
1a000318:	4a0a      	ldr	r2, [pc, #40]	; (1a000344 <procesamiento+0x44>)
1a00031a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a00031e:	1092      	asrs	r2, r2, #2
1a000320:	4909      	ldr	r1, [pc, #36]	; (1a000348 <procesamiento+0x48>)
1a000322:	54ca      	strb	r2, [r1, r3]
		for (i = 0; i < 256; i++) {
1a000324:	3301      	adds	r3, #1
1a000326:	4a06      	ldr	r2, [pc, #24]	; (1a000340 <procesamiento+0x40>)
1a000328:	8013      	strh	r3, [r2, #0]
1a00032a:	e7f1      	b.n	1a000310 <procesamiento+0x10>
		i = 0;
1a00032c:	4b04      	ldr	r3, [pc, #16]	; (1a000340 <procesamiento+0x40>)
1a00032e:	2200      	movs	r2, #0
1a000330:	801a      	strh	r2, [r3, #0]
		tarea = 3;
1a000332:	4b02      	ldr	r3, [pc, #8]	; (1a00033c <procesamiento+0x3c>)
1a000334:	2203      	movs	r2, #3
1a000336:	701a      	strb	r2, [r3, #0]
}
1a000338:	e7e6      	b.n	1a000308 <procesamiento+0x8>
1a00033a:	bf00      	nop
1a00033c:	1000022e 	.word	0x1000022e
1a000340:	100000fe 	.word	0x100000fe
1a000344:	10000230 	.word	0x10000230
1a000348:	10000100 	.word	0x10000100

1a00034c <main>:
#include "inicio.h"
#include "trabajofinal.h"         // <= Su propia cabecera


// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void) {
1a00034c:	b500      	push	{lr}
1a00034e:	b087      	sub	sp, #28
	/* ------------- INICIALIZACIONES ------------- */
	boardConfig();	//inicializacion de placa
1a000350:	f000 fd64 	bl	1a000e1c <boardInit>
	inicio();		//inicializacion
1a000354:	f000 f88a 	bl	1a00046c <inicio>
	delay_t Tm;
	delay_t Ttarea;

	/* Inicializar Retardo no bloqueante con tiempo en milisegundos
	 (500ms = 0,5s) */
	delayConfig(&Ttarea, 1);
1a000358:	2201      	movs	r2, #1
1a00035a:	2300      	movs	r3, #0
1a00035c:	4668      	mov	r0, sp
1a00035e:	f000 fc35 	bl	1a000bcc <delayInit>
1a000362:	e00e      	b.n	1a000382 <main+0x36>
	/* ------------- REPETIR POR SIEMPRE ------------- */
	while (1) {
		lecturateclado();
		if (delayRead(&Ttarea)) { /* delayRead retorna TRUE cuando se cumple el tiempo de retardo */
			if (tempo == 1) {
				delayConfig(&Ttarea, mili);
1a000364:	4b0d      	ldr	r3, [pc, #52]	; (1a00039c <main+0x50>)
1a000366:	781a      	ldrb	r2, [r3, #0]
1a000368:	2300      	movs	r3, #0
1a00036a:	4668      	mov	r0, sp
1a00036c:	f000 fc2e 	bl	1a000bcc <delayInit>
				tempo = 0;
1a000370:	4b0b      	ldr	r3, [pc, #44]	; (1a0003a0 <main+0x54>)
1a000372:	2200      	movs	r2, #0
1a000374:	701a      	strb	r2, [r3, #0]
			}
			lecturaADC();
1a000376:	f000 f815 	bl	1a0003a4 <lecturaADC>
		}
		procesamiento();
1a00037a:	f7ff ffc1 	bl	1a000300 <procesamiento>
		enviodatos();
1a00037e:	f000 f8cf 	bl	1a000520 <enviodatos>
		lecturateclado();
1a000382:	f000 f903 	bl	1a00058c <lecturateclado>
		if (delayRead(&Ttarea)) { /* delayRead retorna TRUE cuando se cumple el tiempo de retardo */
1a000386:	4668      	mov	r0, sp
1a000388:	f000 fc30 	bl	1a000bec <delayRead>
1a00038c:	2800      	cmp	r0, #0
1a00038e:	d0f4      	beq.n	1a00037a <main+0x2e>
			if (tempo == 1) {
1a000390:	4b03      	ldr	r3, [pc, #12]	; (1a0003a0 <main+0x54>)
1a000392:	781b      	ldrb	r3, [r3, #0]
1a000394:	2b01      	cmp	r3, #1
1a000396:	d1ee      	bne.n	1a000376 <main+0x2a>
1a000398:	e7e4      	b.n	1a000364 <main+0x18>
1a00039a:	bf00      	nop
1a00039c:	100000fc 	.word	0x100000fc
1a0003a0:	100000fd 	.word	0x100000fd

1a0003a4 <lecturaADC>:
// Bibliotecas
#include "sapi.h"        // <= Biblioteca sAPI
#include "inicio.h"
#include "lecturaADC.h"

void lecturaADC() {
1a0003a4:	b538      	push	{r3, r4, r5, lr}
	if (tarea == 1) {
1a0003a6:	4b2d      	ldr	r3, [pc, #180]	; (1a00045c <lecturaADC+0xb8>)
1a0003a8:	781b      	ldrb	r3, [r3, #0]
1a0003aa:	2b01      	cmp	r3, #1
1a0003ac:	d000      	beq.n	1a0003b0 <lecturaADC+0xc>
				bantrigger = 0;
				tarea = 2;
			}
		}
	}
}
1a0003ae:	bd38      	pop	{r3, r4, r5, pc}
		if (bantrigger == 0) {
1a0003b0:	4b2b      	ldr	r3, [pc, #172]	; (1a000460 <lecturaADC+0xbc>)
1a0003b2:	781b      	ldrb	r3, [r3, #0]
1a0003b4:	b1d3      	cbz	r3, 1a0003ec <lecturaADC+0x48>
		if (bantrigger == 1) {
1a0003b6:	4b2a      	ldr	r3, [pc, #168]	; (1a000460 <lecturaADC+0xbc>)
1a0003b8:	781b      	ldrb	r3, [r3, #0]
1a0003ba:	2b01      	cmp	r3, #1
1a0003bc:	d1f7      	bne.n	1a0003ae <lecturaADC+0xa>
			muestra16[i] = adcRead(CH1);
1a0003be:	4c29      	ldr	r4, [pc, #164]	; (1a000464 <lecturaADC+0xc0>)
1a0003c0:	8825      	ldrh	r5, [r4, #0]
1a0003c2:	2041      	movs	r0, #65	; 0x41
1a0003c4:	f000 fcfe 	bl	1a000dc4 <adcRead>
1a0003c8:	4b27      	ldr	r3, [pc, #156]	; (1a000468 <lecturaADC+0xc4>)
1a0003ca:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
			i = i + 1;
1a0003ce:	8823      	ldrh	r3, [r4, #0]
1a0003d0:	3301      	adds	r3, #1
1a0003d2:	b29b      	uxth	r3, r3
1a0003d4:	8023      	strh	r3, [r4, #0]
			if (i == 256) {
1a0003d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1a0003da:	d1e8      	bne.n	1a0003ae <lecturaADC+0xa>
				i = 0;
1a0003dc:	2300      	movs	r3, #0
1a0003de:	8023      	strh	r3, [r4, #0]
				bantrigger = 0;
1a0003e0:	4a1f      	ldr	r2, [pc, #124]	; (1a000460 <lecturaADC+0xbc>)
1a0003e2:	7013      	strb	r3, [r2, #0]
				tarea = 2;
1a0003e4:	4b1d      	ldr	r3, [pc, #116]	; (1a00045c <lecturaADC+0xb8>)
1a0003e6:	2202      	movs	r2, #2
1a0003e8:	701a      	strb	r2, [r3, #0]
}
1a0003ea:	e7e0      	b.n	1a0003ae <lecturaADC+0xa>
			muestra16[0] = adcRead(CH1);
1a0003ec:	2041      	movs	r0, #65	; 0x41
1a0003ee:	f000 fce9 	bl	1a000dc4 <adcRead>
1a0003f2:	4b1d      	ldr	r3, [pc, #116]	; (1a000468 <lecturaADC+0xc4>)
1a0003f4:	8018      	strh	r0, [r3, #0]
			for (i = 1; i < 256; i++) {
1a0003f6:	4b1b      	ldr	r3, [pc, #108]	; (1a000464 <lecturaADC+0xc0>)
1a0003f8:	2201      	movs	r2, #1
1a0003fa:	801a      	strh	r2, [r3, #0]
1a0003fc:	e003      	b.n	1a000406 <lecturaADC+0x62>
1a0003fe:	4a19      	ldr	r2, [pc, #100]	; (1a000464 <lecturaADC+0xc0>)
1a000400:	8813      	ldrh	r3, [r2, #0]
1a000402:	3301      	adds	r3, #1
1a000404:	8013      	strh	r3, [r2, #0]
1a000406:	4b17      	ldr	r3, [pc, #92]	; (1a000464 <lecturaADC+0xc0>)
1a000408:	881c      	ldrh	r4, [r3, #0]
1a00040a:	2cff      	cmp	r4, #255	; 0xff
1a00040c:	d823      	bhi.n	1a000456 <lecturaADC+0xb2>
				if ((i > 0) && (bantrigger == 0)) {
1a00040e:	2c00      	cmp	r4, #0
1a000410:	d0f5      	beq.n	1a0003fe <lecturaADC+0x5a>
1a000412:	4b13      	ldr	r3, [pc, #76]	; (1a000460 <lecturaADC+0xbc>)
1a000414:	781b      	ldrb	r3, [r3, #0]
1a000416:	2b00      	cmp	r3, #0
1a000418:	d1f1      	bne.n	1a0003fe <lecturaADC+0x5a>
					muestra16[i] = adcRead(CH1);
1a00041a:	2041      	movs	r0, #65	; 0x41
1a00041c:	f000 fcd2 	bl	1a000dc4 <adcRead>
1a000420:	4b11      	ldr	r3, [pc, #68]	; (1a000468 <lecturaADC+0xc4>)
1a000422:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
					if (((muestra16[i] < 540) && (muestra16[i] > 482))
1a000426:	4a0f      	ldr	r2, [pc, #60]	; (1a000464 <lecturaADC+0xc0>)
1a000428:	8812      	ldrh	r2, [r2, #0]
1a00042a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
1a00042e:	f2a1 13e3 	subw	r3, r1, #483	; 0x1e3
1a000432:	b29b      	uxth	r3, r3
1a000434:	2b38      	cmp	r3, #56	; 0x38
1a000436:	d8e2      	bhi.n	1a0003fe <lecturaADC+0x5a>
							&& (muestra16[i] > muestra16[i - 1])) {
1a000438:	3a01      	subs	r2, #1
1a00043a:	4b0b      	ldr	r3, [pc, #44]	; (1a000468 <lecturaADC+0xc4>)
1a00043c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
1a000440:	4299      	cmp	r1, r3
1a000442:	d9dc      	bls.n	1a0003fe <lecturaADC+0x5a>
						bantrigger = 1;
1a000444:	4b06      	ldr	r3, [pc, #24]	; (1a000460 <lecturaADC+0xbc>)
1a000446:	2201      	movs	r2, #1
1a000448:	701a      	strb	r2, [r3, #0]
						muestra16[0] = muestra16[i];
1a00044a:	4b07      	ldr	r3, [pc, #28]	; (1a000468 <lecturaADC+0xc4>)
1a00044c:	8019      	strh	r1, [r3, #0]
						i = 255;
1a00044e:	4b05      	ldr	r3, [pc, #20]	; (1a000464 <lecturaADC+0xc0>)
1a000450:	22ff      	movs	r2, #255	; 0xff
1a000452:	801a      	strh	r2, [r3, #0]
1a000454:	e7d3      	b.n	1a0003fe <lecturaADC+0x5a>
			i = 1;
1a000456:	2201      	movs	r2, #1
1a000458:	801a      	strh	r2, [r3, #0]
1a00045a:	e7ac      	b.n	1a0003b6 <lecturaADC+0x12>
1a00045c:	1000022e 	.word	0x1000022e
1a000460:	1000022c 	.word	0x1000022c
1a000464:	100000fe 	.word	0x100000fe
1a000468:	10000230 	.word	0x10000230

1a00046c <inicio>:
// Bibliotecas
#include "sapi.h"        // <= Biblioteca sAPI
#include "inicio.h"

void inicio() {
1a00046c:	b508      	push	{r3, lr}
	/* Inicializar UART_USB a 115200 baudios */
	uartConfig(UART_USB, 230400);
1a00046e:	f44f 3161 	mov.w	r1, #230400	; 0x38400
1a000472:	2003      	movs	r0, #3
1a000474:	f000 fb3a 	bl	1a000aec <uartInit>
	uartConfig(UART_232, 230400);
1a000478:	f44f 3161 	mov.w	r1, #230400	; 0x38400
1a00047c:	2005      	movs	r0, #5
1a00047e:	f000 fb35 	bl	1a000aec <uartInit>
	/* Inicializar AnalogIO */
	adcConfig(ADC_ENABLE); /* ADC */
1a000482:	2000      	movs	r0, #0
1a000484:	f000 fc58 	bl	1a000d38 <adcInit>

	/*Inicializacion de variables  */
	tempo = 0;
1a000488:	2300      	movs	r3, #0
1a00048a:	4a07      	ldr	r2, [pc, #28]	; (1a0004a8 <inicio+0x3c>)
1a00048c:	7013      	strb	r3, [r2, #0]
	bancont = 0;
1a00048e:	4a07      	ldr	r2, [pc, #28]	; (1a0004ac <inicio+0x40>)
1a000490:	7013      	strb	r3, [r2, #0]
	i = 0;
1a000492:	4a07      	ldr	r2, [pc, #28]	; (1a0004b0 <inicio+0x44>)
1a000494:	8013      	strh	r3, [r2, #0]
	tarea = 0;
1a000496:	4a07      	ldr	r2, [pc, #28]	; (1a0004b4 <inicio+0x48>)
1a000498:	7013      	strb	r3, [r2, #0]
	mili = 5;
1a00049a:	4a07      	ldr	r2, [pc, #28]	; (1a0004b8 <inicio+0x4c>)
1a00049c:	2105      	movs	r1, #5
1a00049e:	7011      	strb	r1, [r2, #0]
	bantrigger = 0;
1a0004a0:	4a06      	ldr	r2, [pc, #24]	; (1a0004bc <inicio+0x50>)
1a0004a2:	7013      	strb	r3, [r2, #0]
}
1a0004a4:	bd08      	pop	{r3, pc}
1a0004a6:	bf00      	nop
1a0004a8:	100000fd 	.word	0x100000fd
1a0004ac:	1000022d 	.word	0x1000022d
1a0004b0:	100000fe 	.word	0x100000fe
1a0004b4:	1000022e 	.word	0x1000022e
1a0004b8:	100000fc 	.word	0x100000fc
1a0004bc:	1000022c 	.word	0x1000022c

1a0004c0 <itoa>:
 * Written by Lukás Chmela
 * Released under GPLv3.
 */
char* itoa(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a0004c0:	1e93      	subs	r3, r2, #2
1a0004c2:	2b22      	cmp	r3, #34	; 0x22
1a0004c4:	d802      	bhi.n	1a0004cc <itoa+0xc>
char* itoa(int value, char* result, int base) {
1a0004c6:	b4f0      	push	{r4, r5, r6, r7}

   char* ptr = result, *ptr1 = result, tmp_char;
1a0004c8:	460e      	mov	r6, r1
1a0004ca:	e005      	b.n	1a0004d8 <itoa+0x18>
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a0004cc:	2300      	movs	r3, #0
1a0004ce:	700b      	strb	r3, [r1, #0]
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a0004d0:	4608      	mov	r0, r1
1a0004d2:	4770      	bx	lr
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a0004d4:	461e      	mov	r6, r3
      value /= base;
1a0004d6:	4628      	mov	r0, r5
1a0004d8:	fb90 f5f2 	sdiv	r5, r0, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a0004dc:	fb02 0415 	mls	r4, r2, r5, r0
1a0004e0:	3423      	adds	r4, #35	; 0x23
1a0004e2:	4633      	mov	r3, r6
1a0004e4:	4f0d      	ldr	r7, [pc, #52]	; (1a00051c <itoa+0x5c>)
1a0004e6:	5d3c      	ldrb	r4, [r7, r4]
1a0004e8:	f803 4b01 	strb.w	r4, [r3], #1
   } while ( value );
1a0004ec:	2d00      	cmp	r5, #0
1a0004ee:	d1f1      	bne.n	1a0004d4 <itoa+0x14>
   if (tmp_value < 0) *ptr++ = '-';
1a0004f0:	2800      	cmp	r0, #0
1a0004f2:	db04      	blt.n	1a0004fe <itoa+0x3e>
   *ptr-- = '\0';
1a0004f4:	2200      	movs	r2, #0
1a0004f6:	f803 2901 	strb.w	r2, [r3], #-1
   char* ptr = result, *ptr1 = result, tmp_char;
1a0004fa:	460a      	mov	r2, r1
   while(ptr1 < ptr) {
1a0004fc:	e009      	b.n	1a000512 <itoa+0x52>
   if (tmp_value < 0) *ptr++ = '-';
1a0004fe:	222d      	movs	r2, #45	; 0x2d
1a000500:	701a      	strb	r2, [r3, #0]
1a000502:	1cb3      	adds	r3, r6, #2
1a000504:	e7f6      	b.n	1a0004f4 <itoa+0x34>
      tmp_char = *ptr;
1a000506:	7818      	ldrb	r0, [r3, #0]
      *ptr--= *ptr1;
1a000508:	7814      	ldrb	r4, [r2, #0]
1a00050a:	f803 4901 	strb.w	r4, [r3], #-1
      *ptr1++ = tmp_char;
1a00050e:	f802 0b01 	strb.w	r0, [r2], #1
   while(ptr1 < ptr) {
1a000512:	4293      	cmp	r3, r2
1a000514:	d8f7      	bhi.n	1a000506 <itoa+0x46>
}
1a000516:	4608      	mov	r0, r1
1a000518:	bcf0      	pop	{r4, r5, r6, r7}
1a00051a:	4770      	bx	lr
1a00051c:	1a002190 	.word	0x1a002190

1a000520 <enviodatos>:

void enviodatos() {
1a000520:	b538      	push	{r3, r4, r5, lr}
	/* Buffer */
	    static char uartBuff[10];
	if (tarea == 3) {
1a000522:	4b14      	ldr	r3, [pc, #80]	; (1a000574 <enviodatos+0x54>)
1a000524:	781b      	ldrb	r3, [r3, #0]
1a000526:	2b03      	cmp	r3, #3
1a000528:	d000      	beq.n	1a00052c <enviodatos+0xc>
			tarea = 0;
			//uartWriteString(UART_USB, "clear");
			//uartWriteString(UART_USB, "\r\n");
		}
	}
}
1a00052a:	bd38      	pop	{r3, r4, r5, pc}
		itoa(muestra16[i], uartBuff, 10); /* 10 significa decimal */
1a00052c:	4c12      	ldr	r4, [pc, #72]	; (1a000578 <enviodatos+0x58>)
1a00052e:	8820      	ldrh	r0, [r4, #0]
1a000530:	4d12      	ldr	r5, [pc, #72]	; (1a00057c <enviodatos+0x5c>)
1a000532:	220a      	movs	r2, #10
1a000534:	4629      	mov	r1, r5
1a000536:	4b12      	ldr	r3, [pc, #72]	; (1a000580 <enviodatos+0x60>)
1a000538:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00053c:	f7ff ffc0 	bl	1a0004c0 <itoa>
		uartWriteString(UART_USB, uartBuff);
1a000540:	4629      	mov	r1, r5
1a000542:	2003      	movs	r0, #3
1a000544:	f000 fb2c 	bl	1a000ba0 <uartWriteString>
		uartWriteByte(UART_232, datos8[i]);
1a000548:	8823      	ldrh	r3, [r4, #0]
1a00054a:	4a0e      	ldr	r2, [pc, #56]	; (1a000584 <enviodatos+0x64>)
1a00054c:	5cd1      	ldrb	r1, [r2, r3]
1a00054e:	2005      	movs	r0, #5
1a000550:	f000 fb19 	bl	1a000b86 <uartWriteByte>
		uartWriteString(UART_USB, "\r\n");
1a000554:	490c      	ldr	r1, [pc, #48]	; (1a000588 <enviodatos+0x68>)
1a000556:	2003      	movs	r0, #3
1a000558:	f000 fb22 	bl	1a000ba0 <uartWriteString>
		i = i + 1;
1a00055c:	8823      	ldrh	r3, [r4, #0]
1a00055e:	3301      	adds	r3, #1
1a000560:	b29b      	uxth	r3, r3
1a000562:	8023      	strh	r3, [r4, #0]
		if (i == 256) {
1a000564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1a000568:	d1df      	bne.n	1a00052a <enviodatos+0xa>
			i = 0;
1a00056a:	2300      	movs	r3, #0
1a00056c:	8023      	strh	r3, [r4, #0]
			tarea = 0;
1a00056e:	4a01      	ldr	r2, [pc, #4]	; (1a000574 <enviodatos+0x54>)
1a000570:	7013      	strb	r3, [r2, #0]
}
1a000572:	e7da      	b.n	1a00052a <enviodatos+0xa>
1a000574:	1000022e 	.word	0x1000022e
1a000578:	100000fe 	.word	0x100000fe
1a00057c:	100000c8 	.word	0x100000c8
1a000580:	10000230 	.word	0x10000230
1a000584:	10000100 	.word	0x10000100
1a000588:	1a00218c 	.word	0x1a00218c

1a00058c <lecturateclado>:
// Bibliotecas
#include "sapi.h"        // <= Biblioteca sAPI
#include "inicio.h"
#include "lecturateclado.h"

void lecturateclado() {
1a00058c:	b508      	push	{r3, lr}
	if (tarea == 0) {
1a00058e:	4b29      	ldr	r3, [pc, #164]	; (1a000634 <lecturateclado+0xa8>)
1a000590:	781b      	ldrb	r3, [r3, #0]
1a000592:	b103      	cbz	r3, 1a000596 <lecturateclado+0xa>
			}
		}

		tarea = 1;
	}
}
1a000594:	bd08      	pop	{r3, pc}
		if ((!gpioRead(TEC2)) == 1) {
1a000596:	2025      	movs	r0, #37	; 0x25
1a000598:	f000 f98c 	bl	1a0008b4 <gpioRead>
1a00059c:	b9d8      	cbnz	r0, 1a0005d6 <lecturateclado+0x4a>
			tempo = 1;
1a00059e:	4b26      	ldr	r3, [pc, #152]	; (1a000638 <lecturateclado+0xac>)
1a0005a0:	2201      	movs	r2, #1
1a0005a2:	701a      	strb	r2, [r3, #0]
			mili = mili + 1;
1a0005a4:	4a25      	ldr	r2, [pc, #148]	; (1a00063c <lecturateclado+0xb0>)
1a0005a6:	7813      	ldrb	r3, [r2, #0]
1a0005a8:	3301      	adds	r3, #1
1a0005aa:	b2db      	uxtb	r3, r3
1a0005ac:	7013      	strb	r3, [r2, #0]
			if (mili > 20) {
1a0005ae:	2b14      	cmp	r3, #20
1a0005b0:	d902      	bls.n	1a0005b8 <lecturateclado+0x2c>
				mili = 20;
1a0005b2:	4613      	mov	r3, r2
1a0005b4:	2214      	movs	r2, #20
1a0005b6:	701a      	strb	r2, [r3, #0]
		if (uartReadByte(UART_USB, &receivedByte)) {
1a0005b8:	4921      	ldr	r1, [pc, #132]	; (1a000640 <lecturateclado+0xb4>)
1a0005ba:	2003      	movs	r0, #3
1a0005bc:	f000 fad4 	bl	1a000b68 <uartReadByte>
1a0005c0:	b128      	cbz	r0, 1a0005ce <lecturateclado+0x42>
			switch (receivedByte) {
1a0005c2:	4b1f      	ldr	r3, [pc, #124]	; (1a000640 <lecturateclado+0xb4>)
1a0005c4:	781b      	ldrb	r3, [r3, #0]
1a0005c6:	2b61      	cmp	r3, #97	; 0x61
1a0005c8:	d018      	beq.n	1a0005fc <lecturateclado+0x70>
1a0005ca:	2b62      	cmp	r3, #98	; 0x62
1a0005cc:	d024      	beq.n	1a000618 <lecturateclado+0x8c>
		tarea = 1;
1a0005ce:	4b19      	ldr	r3, [pc, #100]	; (1a000634 <lecturateclado+0xa8>)
1a0005d0:	2201      	movs	r2, #1
1a0005d2:	701a      	strb	r2, [r3, #0]
}
1a0005d4:	e7de      	b.n	1a000594 <lecturateclado+0x8>
		} else if ((!gpioRead(TEC3)) == 1) {
1a0005d6:	2026      	movs	r0, #38	; 0x26
1a0005d8:	f000 f96c 	bl	1a0008b4 <gpioRead>
1a0005dc:	2800      	cmp	r0, #0
1a0005de:	d1eb      	bne.n	1a0005b8 <lecturateclado+0x2c>
			tempo = 1;
1a0005e0:	4b15      	ldr	r3, [pc, #84]	; (1a000638 <lecturateclado+0xac>)
1a0005e2:	2201      	movs	r2, #1
1a0005e4:	701a      	strb	r2, [r3, #0]
			mili = mili - 1;
1a0005e6:	4a15      	ldr	r2, [pc, #84]	; (1a00063c <lecturateclado+0xb0>)
1a0005e8:	7813      	ldrb	r3, [r2, #0]
1a0005ea:	3b01      	subs	r3, #1
1a0005ec:	b2db      	uxtb	r3, r3
1a0005ee:	7013      	strb	r3, [r2, #0]
			if (mili < 2) {
1a0005f0:	2b01      	cmp	r3, #1
1a0005f2:	d8e1      	bhi.n	1a0005b8 <lecturateclado+0x2c>
				mili = 1;
1a0005f4:	4613      	mov	r3, r2
1a0005f6:	2201      	movs	r2, #1
1a0005f8:	701a      	strb	r2, [r3, #0]
1a0005fa:	e7dd      	b.n	1a0005b8 <lecturateclado+0x2c>
				tempo = 1;
1a0005fc:	4b0e      	ldr	r3, [pc, #56]	; (1a000638 <lecturateclado+0xac>)
1a0005fe:	2201      	movs	r2, #1
1a000600:	701a      	strb	r2, [r3, #0]
				mili = mili + 1;
1a000602:	4a0e      	ldr	r2, [pc, #56]	; (1a00063c <lecturateclado+0xb0>)
1a000604:	7813      	ldrb	r3, [r2, #0]
1a000606:	3301      	adds	r3, #1
1a000608:	b2db      	uxtb	r3, r3
1a00060a:	7013      	strb	r3, [r2, #0]
				if (mili > 20) {
1a00060c:	2b14      	cmp	r3, #20
1a00060e:	d9de      	bls.n	1a0005ce <lecturateclado+0x42>
					mili = 20;
1a000610:	4613      	mov	r3, r2
1a000612:	2214      	movs	r2, #20
1a000614:	701a      	strb	r2, [r3, #0]
1a000616:	e7da      	b.n	1a0005ce <lecturateclado+0x42>
				tempo = 1;
1a000618:	4b07      	ldr	r3, [pc, #28]	; (1a000638 <lecturateclado+0xac>)
1a00061a:	2201      	movs	r2, #1
1a00061c:	701a      	strb	r2, [r3, #0]
				mili = mili - 1;
1a00061e:	4a07      	ldr	r2, [pc, #28]	; (1a00063c <lecturateclado+0xb0>)
1a000620:	7813      	ldrb	r3, [r2, #0]
1a000622:	3b01      	subs	r3, #1
1a000624:	b2db      	uxtb	r3, r3
1a000626:	7013      	strb	r3, [r2, #0]
				if (mili < 2) {
1a000628:	2b01      	cmp	r3, #1
1a00062a:	d8d0      	bhi.n	1a0005ce <lecturateclado+0x42>
					mili = 1;
1a00062c:	4613      	mov	r3, r2
1a00062e:	2201      	movs	r2, #1
1a000630:	701a      	strb	r2, [r3, #0]
1a000632:	e7cc      	b.n	1a0005ce <lecturateclado+0x42>
1a000634:	1000022e 	.word	0x1000022e
1a000638:	100000fd 	.word	0x100000fd
1a00063c:	100000fc 	.word	0x100000fc
1a000640:	10000488 	.word	0x10000488

1a000644 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a000644:	4b04      	ldr	r3, [pc, #16]	; (1a000658 <cyclesCounterInit+0x14>)
1a000646:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000648:	4b04      	ldr	r3, [pc, #16]	; (1a00065c <cyclesCounterInit+0x18>)
1a00064a:	681a      	ldr	r2, [r3, #0]
1a00064c:	6813      	ldr	r3, [r2, #0]
1a00064e:	f043 0301 	orr.w	r3, r3, #1
1a000652:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a000654:	2001      	movs	r0, #1
1a000656:	4770      	bx	lr
1a000658:	10000000 	.word	0x10000000
1a00065c:	10000004 	.word	0x10000004

1a000660 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000660:	2301      	movs	r3, #1
1a000662:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000666:	4b01      	ldr	r3, [pc, #4]	; (1a00066c <clearInterrupt+0xc>)
1a000668:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00066a:	4770      	bx	lr
1a00066c:	40087000 	.word	0x40087000

1a000670 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a000672:	4b12      	ldr	r3, [pc, #72]	; (1a0006bc <serveInterrupt+0x4c>)
1a000674:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a000676:	4b12      	ldr	r3, [pc, #72]	; (1a0006c0 <serveInterrupt+0x50>)
1a000678:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00067a:	2301      	movs	r3, #1
1a00067c:	4083      	lsls	r3, r0
1a00067e:	420b      	tst	r3, r1
1a000680:	d00c      	beq.n	1a00069c <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a000682:	4910      	ldr	r1, [pc, #64]	; (1a0006c4 <serveInterrupt+0x54>)
1a000684:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000686:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00068a:	00d1      	lsls	r1, r2, #3
1a00068c:	4a0e      	ldr	r2, [pc, #56]	; (1a0006c8 <serveInterrupt+0x58>)
1a00068e:	440a      	add	r2, r1
1a000690:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a000692:	4a0b      	ldr	r2, [pc, #44]	; (1a0006c0 <serveInterrupt+0x50>)
1a000694:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a000696:	f7ff ffe3 	bl	1a000660 <clearInterrupt>
}
1a00069a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00069c:	4909      	ldr	r1, [pc, #36]	; (1a0006c4 <serveInterrupt+0x54>)
1a00069e:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0006a0:	4d09      	ldr	r5, [pc, #36]	; (1a0006c8 <serveInterrupt+0x58>)
1a0006a2:	0051      	lsls	r1, r2, #1
1a0006a4:	188f      	adds	r7, r1, r2
1a0006a6:	00fc      	lsls	r4, r7, #3
1a0006a8:	4627      	mov	r7, r4
1a0006aa:	442c      	add	r4, r5
1a0006ac:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0006ae:	6864      	ldr	r4, [r4, #4]
1a0006b0:	1b36      	subs	r6, r6, r4
1a0006b2:	443d      	add	r5, r7
1a0006b4:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0006b6:	4a02      	ldr	r2, [pc, #8]	; (1a0006c0 <serveInterrupt+0x50>)
1a0006b8:	6213      	str	r3, [r2, #32]
1a0006ba:	e7ec      	b.n	1a000696 <serveInterrupt+0x26>
1a0006bc:	1a0021d8 	.word	0x1a0021d8
1a0006c0:	40087000 	.word	0x40087000
1a0006c4:	40084000 	.word	0x40084000
1a0006c8:	10000008 	.word	0x10000008

1a0006cc <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a0006cc:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0006ce:	2000      	movs	r0, #0
1a0006d0:	f7ff ffce 	bl	1a000670 <serveInterrupt>
}
1a0006d4:	bd08      	pop	{r3, pc}

1a0006d6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0006d6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0006d8:	2001      	movs	r0, #1
1a0006da:	f7ff ffc9 	bl	1a000670 <serveInterrupt>
}
1a0006de:	bd08      	pop	{r3, pc}

1a0006e0 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0006e0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0006e2:	2002      	movs	r0, #2
1a0006e4:	f7ff ffc4 	bl	1a000670 <serveInterrupt>
}
1a0006e8:	bd08      	pop	{r3, pc}
1a0006ea:	Address 0x000000001a0006ea is out of bounds.


1a0006ec <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0006ec:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0006ee:	4d0b      	ldr	r5, [pc, #44]	; (1a00071c <gpioObtainPinInit+0x30>)
1a0006f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0006f4:	182c      	adds	r4, r5, r0
1a0006f6:	5628      	ldrsb	r0, [r5, r0]
1a0006f8:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0006fa:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0006fe:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a000700:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a000704:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a000706:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00070a:	9b02      	ldr	r3, [sp, #8]
1a00070c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00070e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a000712:	9b03      	ldr	r3, [sp, #12]
1a000714:	701a      	strb	r2, [r3, #0]
}
1a000716:	bc30      	pop	{r4, r5}
1a000718:	4770      	bx	lr
1a00071a:	bf00      	nop
1a00071c:	1a0021dc 	.word	0x1a0021dc

1a000720 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000720:	b570      	push	{r4, r5, r6, lr}
1a000722:	b084      	sub	sp, #16
1a000724:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000726:	2300      	movs	r3, #0
1a000728:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00072c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000730:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000734:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000738:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00073c:	f10d 030b 	add.w	r3, sp, #11
1a000740:	9301      	str	r3, [sp, #4]
1a000742:	ab03      	add	r3, sp, #12
1a000744:	9300      	str	r3, [sp, #0]
1a000746:	f10d 030d 	add.w	r3, sp, #13
1a00074a:	f10d 020e 	add.w	r2, sp, #14
1a00074e:	f10d 010f 	add.w	r1, sp, #15
1a000752:	f7ff ffcb 	bl	1a0006ec <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000756:	2c05      	cmp	r4, #5
1a000758:	f200 80a5 	bhi.w	1a0008a6 <gpioInit+0x186>
1a00075c:	e8df f004 	tbb	[pc, r4]
1a000760:	45278109 	.word	0x45278109
1a000764:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000766:	4851      	ldr	r0, [pc, #324]	; (1a0008ac <gpioInit+0x18c>)
1a000768:	f001 fa16 	bl	1a001b98 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00076c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00076e:	b004      	add	sp, #16
1a000770:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a000772:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000776:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00077a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00077e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000782:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000786:	494a      	ldr	r1, [pc, #296]	; (1a0008b0 <gpioInit+0x190>)
1a000788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00078c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000790:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000794:	2001      	movs	r0, #1
1a000796:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00079a:	4c44      	ldr	r4, [pc, #272]	; (1a0008ac <gpioInit+0x18c>)
1a00079c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0007a0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0007a4:	ea22 0201 	bic.w	r2, r2, r1
1a0007a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0007ac:	e7df      	b.n	1a00076e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0007ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0007b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0007b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0007ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0007be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0007c2:	493b      	ldr	r1, [pc, #236]	; (1a0008b0 <gpioInit+0x190>)
1a0007c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0007c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0007cc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0007d0:	2001      	movs	r0, #1
1a0007d2:	fa00 f102 	lsl.w	r1, r0, r2
1a0007d6:	4c35      	ldr	r4, [pc, #212]	; (1a0008ac <gpioInit+0x18c>)
1a0007d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0007dc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0007e0:	ea22 0201 	bic.w	r2, r2, r1
1a0007e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0007e8:	e7c1      	b.n	1a00076e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0007ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0007ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0007f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0007f6:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0007fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0007fe:	492c      	ldr	r1, [pc, #176]	; (1a0008b0 <gpioInit+0x190>)
1a000800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000804:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000808:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00080c:	2001      	movs	r0, #1
1a00080e:	fa00 f102 	lsl.w	r1, r0, r2
1a000812:	4c26      	ldr	r4, [pc, #152]	; (1a0008ac <gpioInit+0x18c>)
1a000814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000818:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00081c:	ea22 0201 	bic.w	r2, r2, r1
1a000820:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000824:	e7a3      	b.n	1a00076e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000826:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00082a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00082e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000832:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a000836:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00083a:	491d      	ldr	r1, [pc, #116]	; (1a0008b0 <gpioInit+0x190>)
1a00083c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000840:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000844:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000848:	2001      	movs	r0, #1
1a00084a:	fa00 f102 	lsl.w	r1, r0, r2
1a00084e:	4c17      	ldr	r4, [pc, #92]	; (1a0008ac <gpioInit+0x18c>)
1a000850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000854:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000858:	ea22 0201 	bic.w	r2, r2, r1
1a00085c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000860:	e785      	b.n	1a00076e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000862:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000866:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00086a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00086e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000872:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000876:	490e      	ldr	r1, [pc, #56]	; (1a0008b0 <gpioInit+0x190>)
1a000878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00087c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a000880:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000884:	2001      	movs	r0, #1
1a000886:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00088a:	4b08      	ldr	r3, [pc, #32]	; (1a0008ac <gpioInit+0x18c>)
1a00088c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000890:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a000894:	4331      	orrs	r1, r6
1a000896:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00089a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00089c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0008a0:	2100      	movs	r1, #0
1a0008a2:	5499      	strb	r1, [r3, r2]
1a0008a4:	e763      	b.n	1a00076e <gpioInit+0x4e>
      ret_val = 0;
1a0008a6:	2000      	movs	r0, #0
1a0008a8:	e761      	b.n	1a00076e <gpioInit+0x4e>
1a0008aa:	bf00      	nop
1a0008ac:	400f4000 	.word	0x400f4000
1a0008b0:	40086000 	.word	0x40086000

1a0008b4 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0008b4:	b500      	push	{lr}
1a0008b6:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0008b8:	2300      	movs	r3, #0
1a0008ba:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0008be:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0008c2:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0008c6:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0008ca:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0008ce:	f10d 030b 	add.w	r3, sp, #11
1a0008d2:	9301      	str	r3, [sp, #4]
1a0008d4:	ab03      	add	r3, sp, #12
1a0008d6:	9300      	str	r3, [sp, #0]
1a0008d8:	f10d 030d 	add.w	r3, sp, #13
1a0008dc:	f10d 020e 	add.w	r2, sp, #14
1a0008e0:	f10d 010f 	add.w	r1, sp, #15
1a0008e4:	f7ff ff02 	bl	1a0006ec <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0008e8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0008ec:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0008f0:	015b      	lsls	r3, r3, #5
1a0008f2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0008f6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0008fa:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0008fc:	3000      	adds	r0, #0
1a0008fe:	bf18      	it	ne
1a000900:	2001      	movne	r0, #1
1a000902:	b005      	add	sp, #20
1a000904:	f85d fb04 	ldr.w	pc, [sp], #4

1a000908 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a000908:	4b01      	ldr	r3, [pc, #4]	; (1a000910 <tickRead+0x8>)
1a00090a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00090e:	4770      	bx	lr
1a000910:	10000490 	.word	0x10000490

1a000914 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a000914:	b118      	cbz	r0, 1a00091e <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a000916:	4b04      	ldr	r3, [pc, #16]	; (1a000928 <tickPowerSet+0x14>)
1a000918:	2207      	movs	r2, #7
1a00091a:	601a      	str	r2, [r3, #0]
1a00091c:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a00091e:	4b02      	ldr	r3, [pc, #8]	; (1a000928 <tickPowerSet+0x14>)
1a000920:	2200      	movs	r2, #0
1a000922:	601a      	str	r2, [r3, #0]
   }
}
1a000924:	4770      	bx	lr
1a000926:	bf00      	nop
1a000928:	e000e010 	.word	0xe000e010

1a00092c <tickInit>:
{
1a00092c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00092e:	ea50 0401 	orrs.w	r4, r0, r1
1a000932:	d02a      	beq.n	1a00098a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000934:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a000938:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00093c:	2b00      	cmp	r3, #0
1a00093e:	bf08      	it	eq
1a000940:	2a32      	cmpeq	r2, #50	; 0x32
1a000942:	d227      	bcs.n	1a000994 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a000944:	4b14      	ldr	r3, [pc, #80]	; (1a000998 <tickInit+0x6c>)
1a000946:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00094a:	4b14      	ldr	r3, [pc, #80]	; (1a00099c <tickInit+0x70>)
1a00094c:	681b      	ldr	r3, [r3, #0]
1a00094e:	fba3 4500 	umull	r4, r5, r3, r0
1a000952:	fb03 5501 	mla	r5, r3, r1, r5
1a000956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00095a:	2300      	movs	r3, #0
1a00095c:	4620      	mov	r0, r4
1a00095e:	4629      	mov	r1, r5
1a000960:	f001 fa66 	bl	1a001e30 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000964:	3801      	subs	r0, #1
1a000966:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00096a:	d209      	bcs.n	1a000980 <tickInit+0x54>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00096c:	4b0c      	ldr	r3, [pc, #48]	; (1a0009a0 <tickInit+0x74>)
1a00096e:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000970:	4a0c      	ldr	r2, [pc, #48]	; (1a0009a4 <tickInit+0x78>)
1a000972:	21e0      	movs	r1, #224	; 0xe0
1a000974:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000978:	2200      	movs	r2, #0
1a00097a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00097c:	2207      	movs	r2, #7
1a00097e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a000980:	2001      	movs	r0, #1
1a000982:	f7ff ffc7 	bl	1a000914 <tickPowerSet>
      bool_t ret_val = 1;
1a000986:	2001      	movs	r0, #1
}
1a000988:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00098a:	2000      	movs	r0, #0
1a00098c:	f7ff ffc2 	bl	1a000914 <tickPowerSet>
         ret_val = 0;
1a000990:	2000      	movs	r0, #0
1a000992:	e7f9      	b.n	1a000988 <tickInit+0x5c>
            ret_val = 0;
1a000994:	2000      	movs	r0, #0
1a000996:	e7f7      	b.n	1a000988 <tickInit+0x5c>
1a000998:	10000498 	.word	0x10000498
1a00099c:	100004a0 	.word	0x100004a0
1a0009a0:	e000e010 	.word	0xe000e010
1a0009a4:	e000ed00 	.word	0xe000ed00

1a0009a8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0009a8:	b538      	push	{r3, r4, r5, lr}
   // Increment Tick counters
   tickCounter++;
1a0009aa:	4908      	ldr	r1, [pc, #32]	; (1a0009cc <SysTick_Handler+0x24>)
1a0009ac:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0009b0:	1c54      	adds	r4, r2, #1
1a0009b2:	f143 0500 	adc.w	r5, r3, #0
1a0009b6:	e9c1 4500 	strd	r4, r5, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0009ba:	4b05      	ldr	r3, [pc, #20]	; (1a0009d0 <SysTick_Handler+0x28>)
1a0009bc:	681b      	ldr	r3, [r3, #0]
1a0009be:	b123      	cbz	r3, 1a0009ca <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a0009c0:	4b03      	ldr	r3, [pc, #12]	; (1a0009d0 <SysTick_Handler+0x28>)
1a0009c2:	681b      	ldr	r3, [r3, #0]
1a0009c4:	4a03      	ldr	r2, [pc, #12]	; (1a0009d4 <SysTick_Handler+0x2c>)
1a0009c6:	6810      	ldr	r0, [r2, #0]
1a0009c8:	4798      	blx	r3
   }
}
1a0009ca:	bd38      	pop	{r3, r4, r5, pc}
1a0009cc:	10000490 	.word	0x10000490
1a0009d0:	100000d8 	.word	0x100000d8
1a0009d4:	100000d4 	.word	0x100000d4

1a0009d8 <uartProcessIRQ>:
{
1a0009d8:	b570      	push	{r4, r5, r6, lr}
1a0009da:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0009dc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0009e0:	0093      	lsls	r3, r2, #2
1a0009e2:	4a25      	ldr	r2, [pc, #148]	; (1a000a78 <uartProcessIRQ+0xa0>)
1a0009e4:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0009e6:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0009e8:	b2ed      	uxtb	r5, r5
1a0009ea:	f015 0f01 	tst.w	r5, #1
1a0009ee:	d00b      	beq.n	1a000a08 <uartProcessIRQ+0x30>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0009f0:	b930      	cbnz	r0, 1a000a00 <uartProcessIRQ+0x28>
1a0009f2:	4b22      	ldr	r3, [pc, #136]	; (1a000a7c <uartProcessIRQ+0xa4>)
1a0009f4:	681b      	ldr	r3, [r3, #0]
1a0009f6:	b11b      	cbz	r3, 1a000a00 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0009f8:	4b20      	ldr	r3, [pc, #128]	; (1a000a7c <uartProcessIRQ+0xa4>)
1a0009fa:	681b      	ldr	r3, [r3, #0]
1a0009fc:	2000      	movs	r0, #0
1a0009fe:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a000a00:	2c03      	cmp	r4, #3
1a000a02:	d015      	beq.n	1a000a30 <uartProcessIRQ+0x58>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a000a04:	2c05      	cmp	r4, #5
1a000a06:	d01c      	beq.n	1a000a42 <uartProcessIRQ+0x6a>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a000a08:	f015 0f20 	tst.w	r5, #32
1a000a0c:	d00f      	beq.n	1a000a2e <uartProcessIRQ+0x56>
	return pUART->IER;
1a000a0e:	6873      	ldr	r3, [r6, #4]
1a000a10:	f013 0f02 	tst.w	r3, #2
1a000a14:	d00b      	beq.n	1a000a2e <uartProcessIRQ+0x56>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a000a16:	b934      	cbnz	r4, 1a000a26 <uartProcessIRQ+0x4e>
1a000a18:	4b19      	ldr	r3, [pc, #100]	; (1a000a80 <uartProcessIRQ+0xa8>)
1a000a1a:	681b      	ldr	r3, [r3, #0]
1a000a1c:	b11b      	cbz	r3, 1a000a26 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART0)(0);
1a000a1e:	4b18      	ldr	r3, [pc, #96]	; (1a000a80 <uartProcessIRQ+0xa8>)
1a000a20:	681b      	ldr	r3, [r3, #0]
1a000a22:	2000      	movs	r0, #0
1a000a24:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a000a26:	2c03      	cmp	r4, #3
1a000a28:	d014      	beq.n	1a000a54 <uartProcessIRQ+0x7c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a000a2a:	2c05      	cmp	r4, #5
1a000a2c:	d01b      	beq.n	1a000a66 <uartProcessIRQ+0x8e>
}
1a000a2e:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a000a30:	4b14      	ldr	r3, [pc, #80]	; (1a000a84 <uartProcessIRQ+0xac>)
1a000a32:	681b      	ldr	r3, [r3, #0]
1a000a34:	2b00      	cmp	r3, #0
1a000a36:	d0e5      	beq.n	1a000a04 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART2)(0);
1a000a38:	4b12      	ldr	r3, [pc, #72]	; (1a000a84 <uartProcessIRQ+0xac>)
1a000a3a:	681b      	ldr	r3, [r3, #0]
1a000a3c:	2000      	movs	r0, #0
1a000a3e:	4798      	blx	r3
1a000a40:	e7e0      	b.n	1a000a04 <uartProcessIRQ+0x2c>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a000a42:	4b11      	ldr	r3, [pc, #68]	; (1a000a88 <uartProcessIRQ+0xb0>)
1a000a44:	681b      	ldr	r3, [r3, #0]
1a000a46:	2b00      	cmp	r3, #0
1a000a48:	d0de      	beq.n	1a000a08 <uartProcessIRQ+0x30>
         (*rxIsrCallbackUART3)(0);
1a000a4a:	4b0f      	ldr	r3, [pc, #60]	; (1a000a88 <uartProcessIRQ+0xb0>)
1a000a4c:	681b      	ldr	r3, [r3, #0]
1a000a4e:	2000      	movs	r0, #0
1a000a50:	4798      	blx	r3
1a000a52:	e7d9      	b.n	1a000a08 <uartProcessIRQ+0x30>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a000a54:	4b0d      	ldr	r3, [pc, #52]	; (1a000a8c <uartProcessIRQ+0xb4>)
1a000a56:	681b      	ldr	r3, [r3, #0]
1a000a58:	2b00      	cmp	r3, #0
1a000a5a:	d0e6      	beq.n	1a000a2a <uartProcessIRQ+0x52>
         (*txIsrCallbackUART2)(0);
1a000a5c:	4b0b      	ldr	r3, [pc, #44]	; (1a000a8c <uartProcessIRQ+0xb4>)
1a000a5e:	681b      	ldr	r3, [r3, #0]
1a000a60:	2000      	movs	r0, #0
1a000a62:	4798      	blx	r3
1a000a64:	e7e1      	b.n	1a000a2a <uartProcessIRQ+0x52>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a000a66:	4b0a      	ldr	r3, [pc, #40]	; (1a000a90 <uartProcessIRQ+0xb8>)
1a000a68:	681b      	ldr	r3, [r3, #0]
1a000a6a:	2b00      	cmp	r3, #0
1a000a6c:	d0df      	beq.n	1a000a2e <uartProcessIRQ+0x56>
         (*txIsrCallbackUART3)(0);
1a000a6e:	4b08      	ldr	r3, [pc, #32]	; (1a000a90 <uartProcessIRQ+0xb8>)
1a000a70:	681b      	ldr	r3, [r3, #0]
1a000a72:	2000      	movs	r0, #0
1a000a74:	4798      	blx	r3
}
1a000a76:	e7da      	b.n	1a000a2e <uartProcessIRQ+0x56>
1a000a78:	1a002314 	.word	0x1a002314
1a000a7c:	100000dc 	.word	0x100000dc
1a000a80:	100000e8 	.word	0x100000e8
1a000a84:	100000e0 	.word	0x100000e0
1a000a88:	100000e4 	.word	0x100000e4
1a000a8c:	100000ec 	.word	0x100000ec
1a000a90:	100000f0 	.word	0x100000f0

1a000a94 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a000a94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000a98:	0083      	lsls	r3, r0, #2
1a000a9a:	4a03      	ldr	r2, [pc, #12]	; (1a000aa8 <uartRxReady+0x14>)
1a000a9c:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a000a9e:	6958      	ldr	r0, [r3, #20]
}
1a000aa0:	f000 0001 	and.w	r0, r0, #1
1a000aa4:	4770      	bx	lr
1a000aa6:	bf00      	nop
1a000aa8:	1a002314 	.word	0x1a002314

1a000aac <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a000aac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000ab0:	0083      	lsls	r3, r0, #2
1a000ab2:	4a03      	ldr	r2, [pc, #12]	; (1a000ac0 <uartTxReady+0x14>)
1a000ab4:	58d3      	ldr	r3, [r2, r3]
1a000ab6:	6958      	ldr	r0, [r3, #20]
}
1a000ab8:	f000 0020 	and.w	r0, r0, #32
1a000abc:	4770      	bx	lr
1a000abe:	bf00      	nop
1a000ac0:	1a002314 	.word	0x1a002314

1a000ac4 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a000ac4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000ac8:	0083      	lsls	r3, r0, #2
1a000aca:	4a02      	ldr	r2, [pc, #8]	; (1a000ad4 <uartRxRead+0x10>)
1a000acc:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000ace:	6818      	ldr	r0, [r3, #0]
}
1a000ad0:	b2c0      	uxtb	r0, r0
1a000ad2:	4770      	bx	lr
1a000ad4:	1a002314 	.word	0x1a002314

1a000ad8 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a000ad8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000adc:	0083      	lsls	r3, r0, #2
1a000ade:	4a02      	ldr	r2, [pc, #8]	; (1a000ae8 <uartTxWrite+0x10>)
1a000ae0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a000ae2:	6019      	str	r1, [r3, #0]
}
1a000ae4:	4770      	bx	lr
1a000ae6:	bf00      	nop
1a000ae8:	1a002314 	.word	0x1a002314

1a000aec <uartInit>:
{
1a000aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000af0:	4680      	mov	r8, r0
1a000af2:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a000af4:	4c19      	ldr	r4, [pc, #100]	; (1a000b5c <uartInit+0x70>)
1a000af6:	0045      	lsls	r5, r0, #1
1a000af8:	182a      	adds	r2, r5, r0
1a000afa:	0093      	lsls	r3, r2, #2
1a000afc:	18e6      	adds	r6, r4, r3
1a000afe:	58e7      	ldr	r7, [r4, r3]
1a000b00:	4638      	mov	r0, r7
1a000b02:	f000 fb97 	bl	1a001234 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a000b06:	4649      	mov	r1, r9
1a000b08:	4638      	mov	r0, r7
1a000b0a:	f000 fbbd 	bl	1a001288 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a000b0e:	2307      	movs	r3, #7
1a000b10:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000b12:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a000b14:	2301      	movs	r3, #1
1a000b16:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a000b18:	7930      	ldrb	r0, [r6, #4]
1a000b1a:	7973      	ldrb	r3, [r6, #5]
1a000b1c:	79b2      	ldrb	r2, [r6, #6]
1a000b1e:	f042 0218 	orr.w	r2, r2, #24
1a000b22:	490f      	ldr	r1, [pc, #60]	; (1a000b60 <uartInit+0x74>)
1a000b24:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a000b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a000b2c:	79f0      	ldrb	r0, [r6, #7]
1a000b2e:	7a33      	ldrb	r3, [r6, #8]
1a000b30:	7a72      	ldrb	r2, [r6, #9]
1a000b32:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000b36:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a000b3e:	f1b8 0f01 	cmp.w	r8, #1
1a000b42:	d001      	beq.n	1a000b48 <uartInit+0x5c>
}
1a000b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a000b48:	4a06      	ldr	r2, [pc, #24]	; (1a000b64 <uartInit+0x78>)
1a000b4a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a000b4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
1a000b52:	221a      	movs	r2, #26
1a000b54:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a000b58:	e7f4      	b.n	1a000b44 <uartInit+0x58>
1a000b5a:	bf00      	nop
1a000b5c:	1a002314 	.word	0x1a002314
1a000b60:	40086000 	.word	0x40086000
1a000b64:	40081000 	.word	0x40081000

1a000b68 <uartReadByte>:
{
1a000b68:	b538      	push	{r3, r4, r5, lr}
1a000b6a:	4605      	mov	r5, r0
1a000b6c:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a000b6e:	f7ff ff91 	bl	1a000a94 <uartRxReady>
1a000b72:	4603      	mov	r3, r0
1a000b74:	b908      	cbnz	r0, 1a000b7a <uartReadByte+0x12>
}
1a000b76:	4618      	mov	r0, r3
1a000b78:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a000b7a:	4628      	mov	r0, r5
1a000b7c:	f7ff ffa2 	bl	1a000ac4 <uartRxRead>
1a000b80:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a000b82:	2301      	movs	r3, #1
1a000b84:	e7f7      	b.n	1a000b76 <uartReadByte+0xe>

1a000b86 <uartWriteByte>:
{
1a000b86:	b538      	push	{r3, r4, r5, lr}
1a000b88:	4604      	mov	r4, r0
1a000b8a:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a000b8c:	4620      	mov	r0, r4
1a000b8e:	f7ff ff8d 	bl	1a000aac <uartTxReady>
1a000b92:	2800      	cmp	r0, #0
1a000b94:	d0fa      	beq.n	1a000b8c <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a000b96:	4629      	mov	r1, r5
1a000b98:	4620      	mov	r0, r4
1a000b9a:	f7ff ff9d 	bl	1a000ad8 <uartTxWrite>
}
1a000b9e:	bd38      	pop	{r3, r4, r5, pc}

1a000ba0 <uartWriteString>:
{
1a000ba0:	b538      	push	{r3, r4, r5, lr}
1a000ba2:	4605      	mov	r5, r0
1a000ba4:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a000ba6:	7821      	ldrb	r1, [r4, #0]
1a000ba8:	b121      	cbz	r1, 1a000bb4 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a000baa:	4628      	mov	r0, r5
1a000bac:	f7ff ffeb 	bl	1a000b86 <uartWriteByte>
      str++;
1a000bb0:	3401      	adds	r4, #1
1a000bb2:	e7f8      	b.n	1a000ba6 <uartWriteString+0x6>
}
1a000bb4:	bd38      	pop	{r3, r4, r5, pc}

1a000bb6 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a000bb6:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a000bb8:	2003      	movs	r0, #3
1a000bba:	f7ff ff0d 	bl	1a0009d8 <uartProcessIRQ>
}
1a000bbe:	bd08      	pop	{r3, pc}

1a000bc0 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a000bc0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a000bc2:	2005      	movs	r0, #5
1a000bc4:	f7ff ff08 	bl	1a0009d8 <uartProcessIRQ>
}
1a000bc8:	bd08      	pop	{r3, pc}
1a000bca:	Address 0x000000001a000bca is out of bounds.


1a000bcc <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a000bcc:	b510      	push	{r4, lr}
1a000bce:	4604      	mov	r4, r0
1a000bd0:	4610      	mov	r0, r2
1a000bd2:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a000bd4:	4b04      	ldr	r3, [pc, #16]	; (1a000be8 <delayInit+0x1c>)
1a000bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000bda:	f001 f929 	bl	1a001e30 <__aeabi_uldivmod>
1a000bde:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a000be2:	2300      	movs	r3, #0
1a000be4:	7423      	strb	r3, [r4, #16]
}
1a000be6:	bd10      	pop	{r4, pc}
1a000be8:	10000498 	.word	0x10000498

1a000bec <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000bee:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a000bf0:	7c05      	ldrb	r5, [r0, #16]
1a000bf2:	b93d      	cbnz	r5, 1a000c04 <delayRead+0x18>
      delay->startTime = tickRead();
1a000bf4:	f7ff fe88 	bl	1a000908 <tickRead>
1a000bf8:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a000bfc:	2301      	movs	r3, #1
1a000bfe:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a000c00:	4628      	mov	r0, r5
1a000c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a000c04:	f7ff fe80 	bl	1a000908 <tickRead>
1a000c08:	6823      	ldr	r3, [r4, #0]
1a000c0a:	6862      	ldr	r2, [r4, #4]
1a000c0c:	1ac6      	subs	r6, r0, r3
1a000c0e:	eb61 0702 	sbc.w	r7, r1, r2
1a000c12:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a000c16:	429f      	cmp	r7, r3
1a000c18:	bf08      	it	eq
1a000c1a:	4296      	cmpeq	r6, r2
1a000c1c:	d303      	bcc.n	1a000c26 <delayRead+0x3a>
         delay->running = 0;
1a000c1e:	2300      	movs	r3, #0
1a000c20:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a000c22:	2501      	movs	r5, #1
1a000c24:	e7ec      	b.n	1a000c00 <delayRead+0x14>
   bool_t timeArrived = 0;
1a000c26:	2500      	movs	r5, #0
1a000c28:	e7ea      	b.n	1a000c00 <delayRead+0x14>

1a000c2a <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a000c2a:	e7fe      	b.n	1a000c2a <errorOcurred>

1a000c2c <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a000c2c:	4770      	bx	lr
1a000c2e:	Address 0x000000001a000c2e is out of bounds.


1a000c30 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a000c30:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c32:	2400      	movs	r4, #0
1a000c34:	e001      	b.n	1a000c3a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000c36:	3401      	adds	r4, #1
1a000c38:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c3a:	2c03      	cmp	r4, #3
1a000c3c:	d812      	bhi.n	1a000c64 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a000c3e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000c40:	4b09      	ldr	r3, [pc, #36]	; (1a000c68 <TIMER0_IRQHandler+0x38>)
1a000c42:	681a      	ldr	r2, [r3, #0]
1a000c44:	f004 010f 	and.w	r1, r4, #15
1a000c48:	2301      	movs	r3, #1
1a000c4a:	408b      	lsls	r3, r1
1a000c4c:	421a      	tst	r2, r3
1a000c4e:	d0f2      	beq.n	1a000c36 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000c50:	4b06      	ldr	r3, [pc, #24]	; (1a000c6c <TIMER0_IRQHandler+0x3c>)
1a000c52:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000c56:	2000      	movs	r0, #0
1a000c58:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000c5a:	2301      	movs	r3, #1
1a000c5c:	40ab      	lsls	r3, r5
1a000c5e:	4a02      	ldr	r2, [pc, #8]	; (1a000c68 <TIMER0_IRQHandler+0x38>)
1a000c60:	6013      	str	r3, [r2, #0]
1a000c62:	e7e8      	b.n	1a000c36 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000c64:	bd38      	pop	{r3, r4, r5, pc}
1a000c66:	bf00      	nop
1a000c68:	40084000 	.word	0x40084000
1a000c6c:	10000050 	.word	0x10000050

1a000c70 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a000c70:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c72:	2400      	movs	r4, #0
1a000c74:	e001      	b.n	1a000c7a <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000c76:	3401      	adds	r4, #1
1a000c78:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c7a:	2c03      	cmp	r4, #3
1a000c7c:	d813      	bhi.n	1a000ca6 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a000c7e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000c80:	4b09      	ldr	r3, [pc, #36]	; (1a000ca8 <TIMER1_IRQHandler+0x38>)
1a000c82:	681a      	ldr	r2, [r3, #0]
1a000c84:	f004 010f 	and.w	r1, r4, #15
1a000c88:	2301      	movs	r3, #1
1a000c8a:	408b      	lsls	r3, r1
1a000c8c:	421a      	tst	r2, r3
1a000c8e:	d0f2      	beq.n	1a000c76 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000c90:	1d23      	adds	r3, r4, #4
1a000c92:	4a06      	ldr	r2, [pc, #24]	; (1a000cac <TIMER1_IRQHandler+0x3c>)
1a000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000c98:	2000      	movs	r0, #0
1a000c9a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000c9c:	2301      	movs	r3, #1
1a000c9e:	40ab      	lsls	r3, r5
1a000ca0:	4a01      	ldr	r2, [pc, #4]	; (1a000ca8 <TIMER1_IRQHandler+0x38>)
1a000ca2:	6013      	str	r3, [r2, #0]
1a000ca4:	e7e7      	b.n	1a000c76 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000ca6:	bd38      	pop	{r3, r4, r5, pc}
1a000ca8:	40085000 	.word	0x40085000
1a000cac:	10000050 	.word	0x10000050

1a000cb0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a000cb0:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000cb2:	2400      	movs	r4, #0
1a000cb4:	e001      	b.n	1a000cba <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000cb6:	3401      	adds	r4, #1
1a000cb8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000cba:	2c03      	cmp	r4, #3
1a000cbc:	d814      	bhi.n	1a000ce8 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a000cbe:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000cc0:	4b0a      	ldr	r3, [pc, #40]	; (1a000cec <TIMER2_IRQHandler+0x3c>)
1a000cc2:	681a      	ldr	r2, [r3, #0]
1a000cc4:	f004 010f 	and.w	r1, r4, #15
1a000cc8:	2301      	movs	r3, #1
1a000cca:	408b      	lsls	r3, r1
1a000ccc:	421a      	tst	r2, r3
1a000cce:	d0f2      	beq.n	1a000cb6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000cd0:	f104 0308 	add.w	r3, r4, #8
1a000cd4:	4a06      	ldr	r2, [pc, #24]	; (1a000cf0 <TIMER2_IRQHandler+0x40>)
1a000cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000cda:	2000      	movs	r0, #0
1a000cdc:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000cde:	2301      	movs	r3, #1
1a000ce0:	40ab      	lsls	r3, r5
1a000ce2:	4a02      	ldr	r2, [pc, #8]	; (1a000cec <TIMER2_IRQHandler+0x3c>)
1a000ce4:	6013      	str	r3, [r2, #0]
1a000ce6:	e7e6      	b.n	1a000cb6 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000ce8:	bd38      	pop	{r3, r4, r5, pc}
1a000cea:	bf00      	nop
1a000cec:	400c3000 	.word	0x400c3000
1a000cf0:	10000050 	.word	0x10000050

1a000cf4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a000cf4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000cf6:	2400      	movs	r4, #0
1a000cf8:	e001      	b.n	1a000cfe <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000cfa:	3401      	adds	r4, #1
1a000cfc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000cfe:	2c03      	cmp	r4, #3
1a000d00:	d814      	bhi.n	1a000d2c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a000d02:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000d04:	4b0a      	ldr	r3, [pc, #40]	; (1a000d30 <TIMER3_IRQHandler+0x3c>)
1a000d06:	681a      	ldr	r2, [r3, #0]
1a000d08:	f004 010f 	and.w	r1, r4, #15
1a000d0c:	2301      	movs	r3, #1
1a000d0e:	408b      	lsls	r3, r1
1a000d10:	421a      	tst	r2, r3
1a000d12:	d0f2      	beq.n	1a000cfa <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000d14:	f104 030c 	add.w	r3, r4, #12
1a000d18:	4a06      	ldr	r2, [pc, #24]	; (1a000d34 <TIMER3_IRQHandler+0x40>)
1a000d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000d1e:	2000      	movs	r0, #0
1a000d20:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000d22:	2301      	movs	r3, #1
1a000d24:	40ab      	lsls	r3, r5
1a000d26:	4a02      	ldr	r2, [pc, #8]	; (1a000d30 <TIMER3_IRQHandler+0x3c>)
1a000d28:	6013      	str	r3, [r2, #0]
1a000d2a:	e7e6      	b.n	1a000cfa <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000d2c:	bd38      	pop	{r3, r4, r5, pc}
1a000d2e:	bf00      	nop
1a000d30:	400c4000 	.word	0x400c4000
1a000d34:	10000050 	.word	0x10000050

1a000d38 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a000d38:	b510      	push	{r4, lr}
1a000d3a:	b082      	sub	sp, #8

   switch(config) {
1a000d3c:	b118      	cbz	r0, 1a000d46 <adcInit+0xe>
1a000d3e:	2801      	cmp	r0, #1
1a000d40:	d038      	beq.n	1a000db4 <adcInit+0x7c>
      /* Disable ADC peripheral */
      Chip_ADC_DeInit( LPC_ADC0 );
      break;
   }

}
1a000d42:	b002      	add	sp, #8
1a000d44:	bd10      	pop	{r4, pc}
      Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a000d46:	4c1d      	ldr	r4, [pc, #116]	; (1a000dbc <adcInit+0x84>)
1a000d48:	4669      	mov	r1, sp
1a000d4a:	4620      	mov	r0, r4
1a000d4c:	f000 fb60 	bl	1a001410 <Chip_ADC_Init>
      Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a000d50:	2100      	movs	r1, #0
1a000d52:	4620      	mov	r0, r4
1a000d54:	f000 fbfb 	bl	1a00154e <Chip_ADC_SetBurstCmd>
      Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a000d58:	4a19      	ldr	r2, [pc, #100]	; (1a000dc0 <adcInit+0x88>)
1a000d5a:	4669      	mov	r1, sp
1a000d5c:	4620      	mov	r0, r4
1a000d5e:	f000 fbc2 	bl	1a0014e6 <Chip_ADC_SetSampleRate>
      Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a000d62:	2200      	movs	r2, #0
1a000d64:	2101      	movs	r1, #1
1a000d66:	4620      	mov	r0, r4
1a000d68:	f000 fbdc 	bl	1a001524 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a000d6c:	2200      	movs	r2, #0
1a000d6e:	2101      	movs	r1, #1
1a000d70:	4620      	mov	r0, r4
1a000d72:	f000 fb97 	bl	1a0014a4 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a000d76:	2200      	movs	r2, #0
1a000d78:	2102      	movs	r1, #2
1a000d7a:	4620      	mov	r0, r4
1a000d7c:	f000 fbd2 	bl	1a001524 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a000d80:	2200      	movs	r2, #0
1a000d82:	2102      	movs	r1, #2
1a000d84:	4620      	mov	r0, r4
1a000d86:	f000 fb8d 	bl	1a0014a4 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a000d8a:	2200      	movs	r2, #0
1a000d8c:	2103      	movs	r1, #3
1a000d8e:	4620      	mov	r0, r4
1a000d90:	f000 fbc8 	bl	1a001524 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a000d94:	2200      	movs	r2, #0
1a000d96:	2103      	movs	r1, #3
1a000d98:	4620      	mov	r0, r4
1a000d9a:	f000 fb83 	bl	1a0014a4 <Chip_ADC_Int_SetChannelCmd>
      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a000d9e:	2200      	movs	r2, #0
1a000da0:	2104      	movs	r1, #4
1a000da2:	4620      	mov	r0, r4
1a000da4:	f000 fbbe 	bl	1a001524 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a000da8:	2200      	movs	r2, #0
1a000daa:	2104      	movs	r1, #4
1a000dac:	4620      	mov	r0, r4
1a000dae:	f000 fb79 	bl	1a0014a4 <Chip_ADC_Int_SetChannelCmd>
   break;
1a000db2:	e7c6      	b.n	1a000d42 <adcInit+0xa>
      Chip_ADC_DeInit( LPC_ADC0 );
1a000db4:	4801      	ldr	r0, [pc, #4]	; (1a000dbc <adcInit+0x84>)
1a000db6:	f000 fb4b 	bl	1a001450 <Chip_ADC_DeInit>
}
1a000dba:	e7c2      	b.n	1a000d42 <adcInit+0xa>
1a000dbc:	400e3000 	.word	0x400e3000
1a000dc0:	00030d40 	.word	0x00030d40

1a000dc4 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a000dc4:	b570      	push	{r4, r5, r6, lr}
1a000dc6:	b082      	sub	sp, #8

   uint8_t lpcAdcChannel = 66 - analogInput;
1a000dc8:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a000dcc:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a000dce:	2600      	movs	r6, #0
1a000dd0:	f8ad 6006 	strh.w	r6, [sp, #6]

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a000dd4:	4d10      	ldr	r5, [pc, #64]	; (1a000e18 <adcRead+0x54>)
1a000dd6:	2201      	movs	r2, #1
1a000dd8:	4621      	mov	r1, r4
1a000dda:	4628      	mov	r0, r5
1a000ddc:	f000 fba2 	bl	1a001524 <Chip_ADC_EnableChannel>
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a000de0:	4632      	mov	r2, r6
1a000de2:	2101      	movs	r1, #1
1a000de4:	4628      	mov	r0, r5
1a000de6:	f000 fb6e 	bl	1a0014c6 <Chip_ADC_SetStartMode>

   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a000dea:	2200      	movs	r2, #0
1a000dec:	4621      	mov	r1, r4
1a000dee:	480a      	ldr	r0, [pc, #40]	; (1a000e18 <adcRead+0x54>)
1a000df0:	f000 fb3d 	bl	1a00146e <Chip_ADC_ReadStatus>
   while(
1a000df4:	2801      	cmp	r0, #1
1a000df6:	d1f8      	bne.n	1a000dea <adcRead+0x26>
   );
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a000df8:	4d07      	ldr	r5, [pc, #28]	; (1a000e18 <adcRead+0x54>)
1a000dfa:	f10d 0206 	add.w	r2, sp, #6
1a000dfe:	4621      	mov	r1, r4
1a000e00:	4628      	mov	r0, r5
1a000e02:	f000 fb30 	bl	1a001466 <Chip_ADC_ReadValue>

   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a000e06:	2200      	movs	r2, #0
1a000e08:	4621      	mov	r1, r4
1a000e0a:	4628      	mov	r0, r5
1a000e0c:	f000 fb8a 	bl	1a001524 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a000e10:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a000e14:	b002      	add	sp, #8
1a000e16:	bd70      	pop	{r4, r5, r6, pc}
1a000e18:	400e3000 	.word	0x400e3000

1a000e1c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a000e1c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a000e1e:	f000 fba7 	bl	1a001570 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a000e22:	4b3a      	ldr	r3, [pc, #232]	; (1a000f0c <boardInit+0xf0>)
1a000e24:	6818      	ldr	r0, [r3, #0]
1a000e26:	f7ff fc0d 	bl	1a000644 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a000e2a:	2001      	movs	r0, #1
1a000e2c:	2100      	movs	r1, #0
1a000e2e:	f7ff fd7d 	bl	1a00092c <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a000e32:	2105      	movs	r1, #5
1a000e34:	2000      	movs	r0, #0
1a000e36:	f7ff fc73 	bl	1a000720 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a000e3a:	2100      	movs	r1, #0
1a000e3c:	2024      	movs	r0, #36	; 0x24
1a000e3e:	f7ff fc6f 	bl	1a000720 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a000e42:	2100      	movs	r1, #0
1a000e44:	2025      	movs	r0, #37	; 0x25
1a000e46:	f7ff fc6b 	bl	1a000720 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a000e4a:	2100      	movs	r1, #0
1a000e4c:	2026      	movs	r0, #38	; 0x26
1a000e4e:	f7ff fc67 	bl	1a000720 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a000e52:	2100      	movs	r1, #0
1a000e54:	2027      	movs	r0, #39	; 0x27
1a000e56:	f7ff fc63 	bl	1a000720 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a000e5a:	2101      	movs	r1, #1
1a000e5c:	2028      	movs	r0, #40	; 0x28
1a000e5e:	f7ff fc5f 	bl	1a000720 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a000e62:	2101      	movs	r1, #1
1a000e64:	2029      	movs	r0, #41	; 0x29
1a000e66:	f7ff fc5b 	bl	1a000720 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a000e6a:	2101      	movs	r1, #1
1a000e6c:	202a      	movs	r0, #42	; 0x2a
1a000e6e:	f7ff fc57 	bl	1a000720 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a000e72:	2101      	movs	r1, #1
1a000e74:	202b      	movs	r0, #43	; 0x2b
1a000e76:	f7ff fc53 	bl	1a000720 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a000e7a:	2101      	movs	r1, #1
1a000e7c:	202c      	movs	r0, #44	; 0x2c
1a000e7e:	f7ff fc4f 	bl	1a000720 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a000e82:	2101      	movs	r1, #1
1a000e84:	202d      	movs	r0, #45	; 0x2d
1a000e86:	f7ff fc4b 	bl	1a000720 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a000e8a:	2100      	movs	r1, #0
1a000e8c:	202e      	movs	r0, #46	; 0x2e
1a000e8e:	f7ff fc47 	bl	1a000720 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a000e92:	2100      	movs	r1, #0
1a000e94:	202f      	movs	r0, #47	; 0x2f
1a000e96:	f7ff fc43 	bl	1a000720 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a000e9a:	2100      	movs	r1, #0
1a000e9c:	2030      	movs	r0, #48	; 0x30
1a000e9e:	f7ff fc3f 	bl	1a000720 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a000ea2:	2100      	movs	r1, #0
1a000ea4:	2031      	movs	r0, #49	; 0x31
1a000ea6:	f7ff fc3b 	bl	1a000720 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a000eaa:	2100      	movs	r1, #0
1a000eac:	2032      	movs	r0, #50	; 0x32
1a000eae:	f7ff fc37 	bl	1a000720 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a000eb2:	2100      	movs	r1, #0
1a000eb4:	2033      	movs	r0, #51	; 0x33
1a000eb6:	f7ff fc33 	bl	1a000720 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a000eba:	2100      	movs	r1, #0
1a000ebc:	2034      	movs	r0, #52	; 0x34
1a000ebe:	f7ff fc2f 	bl	1a000720 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a000ec2:	2100      	movs	r1, #0
1a000ec4:	2035      	movs	r0, #53	; 0x35
1a000ec6:	f7ff fc2b 	bl	1a000720 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a000eca:	2101      	movs	r1, #1
1a000ecc:	2036      	movs	r0, #54	; 0x36
1a000ece:	f7ff fc27 	bl	1a000720 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a000ed2:	2101      	movs	r1, #1
1a000ed4:	2037      	movs	r0, #55	; 0x37
1a000ed6:	f7ff fc23 	bl	1a000720 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a000eda:	2101      	movs	r1, #1
1a000edc:	2038      	movs	r0, #56	; 0x38
1a000ede:	f7ff fc1f 	bl	1a000720 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a000ee2:	2101      	movs	r1, #1
1a000ee4:	2039      	movs	r0, #57	; 0x39
1a000ee6:	f7ff fc1b 	bl	1a000720 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a000eea:	2101      	movs	r1, #1
1a000eec:	203a      	movs	r0, #58	; 0x3a
1a000eee:	f7ff fc17 	bl	1a000720 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a000ef2:	2101      	movs	r1, #1
1a000ef4:	203b      	movs	r0, #59	; 0x3b
1a000ef6:	f7ff fc13 	bl	1a000720 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a000efa:	2101      	movs	r1, #1
1a000efc:	203c      	movs	r0, #60	; 0x3c
1a000efe:	f7ff fc0f 	bl	1a000720 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a000f02:	2101      	movs	r1, #1
1a000f04:	203d      	movs	r0, #61	; 0x3d
1a000f06:	f7ff fc0b 	bl	1a000720 <gpioInit>

}
1a000f0a:	bd08      	pop	{r3, pc}
1a000f0c:	100004a0 	.word	0x100004a0

1a000f10 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000f10:	2200      	movs	r2, #0
1a000f12:	2a05      	cmp	r2, #5
1a000f14:	d819      	bhi.n	1a000f4a <Board_LED_Init+0x3a>
{
1a000f16:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000f18:	490c      	ldr	r1, [pc, #48]	; (1a000f4c <Board_LED_Init+0x3c>)
1a000f1a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000f1e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000f22:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000f24:	4b0a      	ldr	r3, [pc, #40]	; (1a000f50 <Board_LED_Init+0x40>)
1a000f26:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000f2a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000f2e:	2001      	movs	r0, #1
1a000f30:	40a0      	lsls	r0, r4
1a000f32:	4301      	orrs	r1, r0
1a000f34:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000f38:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000f3c:	2100      	movs	r1, #0
1a000f3e:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000f40:	3201      	adds	r2, #1
1a000f42:	2a05      	cmp	r2, #5
1a000f44:	d9e8      	bls.n	1a000f18 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000f46:	bc70      	pop	{r4, r5, r6}
1a000f48:	4770      	bx	lr
1a000f4a:	4770      	bx	lr
1a000f4c:	1a002368 	.word	0x1a002368
1a000f50:	400f4000 	.word	0x400f4000

1a000f54 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000f54:	2300      	movs	r3, #0
1a000f56:	2b03      	cmp	r3, #3
1a000f58:	d816      	bhi.n	1a000f88 <Board_TEC_Init+0x34>
{
1a000f5a:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000f5c:	490b      	ldr	r1, [pc, #44]	; (1a000f8c <Board_TEC_Init+0x38>)
1a000f5e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000f62:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000f66:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000f68:	4c09      	ldr	r4, [pc, #36]	; (1a000f90 <Board_TEC_Init+0x3c>)
1a000f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000f6e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000f72:	2001      	movs	r0, #1
1a000f74:	40a8      	lsls	r0, r5
1a000f76:	ea21 0100 	bic.w	r1, r1, r0
1a000f7a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000f7e:	3301      	adds	r3, #1
1a000f80:	2b03      	cmp	r3, #3
1a000f82:	d9eb      	bls.n	1a000f5c <Board_TEC_Init+0x8>
    }
}
1a000f84:	bc30      	pop	{r4, r5}
1a000f86:	4770      	bx	lr
1a000f88:	4770      	bx	lr
1a000f8a:	bf00      	nop
1a000f8c:	1a002360 	.word	0x1a002360
1a000f90:	400f4000 	.word	0x400f4000

1a000f94 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000f94:	2300      	movs	r3, #0
1a000f96:	2b08      	cmp	r3, #8
1a000f98:	d816      	bhi.n	1a000fc8 <Board_GPIO_Init+0x34>
{
1a000f9a:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000f9c:	490b      	ldr	r1, [pc, #44]	; (1a000fcc <Board_GPIO_Init+0x38>)
1a000f9e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000fa2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000fa6:	784d      	ldrb	r5, [r1, #1]
1a000fa8:	4c09      	ldr	r4, [pc, #36]	; (1a000fd0 <Board_GPIO_Init+0x3c>)
1a000faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000fae:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000fb2:	2001      	movs	r0, #1
1a000fb4:	40a8      	lsls	r0, r5
1a000fb6:	ea21 0100 	bic.w	r1, r1, r0
1a000fba:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000fbe:	3301      	adds	r3, #1
1a000fc0:	2b08      	cmp	r3, #8
1a000fc2:	d9eb      	bls.n	1a000f9c <Board_GPIO_Init+0x8>
    }
}
1a000fc4:	bc30      	pop	{r4, r5}
1a000fc6:	4770      	bx	lr
1a000fc8:	4770      	bx	lr
1a000fca:	bf00      	nop
1a000fcc:	1a002374 	.word	0x1a002374
1a000fd0:	400f4000 	.word	0x400f4000

1a000fd4 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a000fd4:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000fd6:	4c0b      	ldr	r4, [pc, #44]	; (1a001004 <Board_SPI_Init+0x30>)
1a000fd8:	4620      	mov	r0, r4
1a000fda:	f000 fec9 	bl	1a001d70 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000fde:	6863      	ldr	r3, [r4, #4]
1a000fe0:	f023 0304 	bic.w	r3, r3, #4
1a000fe4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000fe6:	6823      	ldr	r3, [r4, #0]
1a000fe8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000fec:	f043 0307 	orr.w	r3, r3, #7
1a000ff0:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000ff2:	4905      	ldr	r1, [pc, #20]	; (1a001008 <Board_SPI_Init+0x34>)
1a000ff4:	4620      	mov	r0, r4
1a000ff6:	f000 fe9c 	bl	1a001d32 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000ffa:	6863      	ldr	r3, [r4, #4]
1a000ffc:	f043 0302 	orr.w	r3, r3, #2
1a001000:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a001002:	bd10      	pop	{r4, pc}
1a001004:	400c5000 	.word	0x400c5000
1a001008:	000186a0 	.word	0x000186a0

1a00100c <Board_I2C_Init>:
{
1a00100c:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a00100e:	2000      	movs	r0, #0
1a001010:	f000 f8cc 	bl	1a0011ac <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001014:	4b04      	ldr	r3, [pc, #16]	; (1a001028 <Board_I2C_Init+0x1c>)
1a001016:	f640 0208 	movw	r2, #2056	; 0x808
1a00101a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00101e:	4903      	ldr	r1, [pc, #12]	; (1a00102c <Board_I2C_Init+0x20>)
1a001020:	2000      	movs	r0, #0
1a001022:	f000 f8d5 	bl	1a0011d0 <Chip_I2C_SetClockRate>
}
1a001026:	bd08      	pop	{r3, pc}
1a001028:	40086000 	.word	0x40086000
1a00102c:	000f4240 	.word	0x000f4240

1a001030 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a001030:	b510      	push	{r4, lr}
1a001032:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001034:	4c08      	ldr	r4, [pc, #32]	; (1a001058 <Board_ADC_Init+0x28>)
1a001036:	4669      	mov	r1, sp
1a001038:	4620      	mov	r0, r4
1a00103a:	f000 f9e9 	bl	1a001410 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00103e:	4a07      	ldr	r2, [pc, #28]	; (1a00105c <Board_ADC_Init+0x2c>)
1a001040:	4669      	mov	r1, sp
1a001042:	4620      	mov	r0, r4
1a001044:	f000 fa4f 	bl	1a0014e6 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001048:	2200      	movs	r2, #0
1a00104a:	4669      	mov	r1, sp
1a00104c:	4620      	mov	r0, r4
1a00104e:	f000 fa63 	bl	1a001518 <Chip_ADC_SetResolution>
}
1a001052:	b002      	add	sp, #8
1a001054:	bd10      	pop	{r4, pc}
1a001056:	bf00      	nop
1a001058:	400e3000 	.word	0x400e3000
1a00105c:	00061a80 	.word	0x00061a80

1a001060 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001060:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a001062:	4c07      	ldr	r4, [pc, #28]	; (1a001080 <Board_Debug_Init+0x20>)
1a001064:	4620      	mov	r0, r4
1a001066:	f000 f8e5 	bl	1a001234 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00106a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00106e:	4620      	mov	r0, r4
1a001070:	f000 f92a 	bl	1a0012c8 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a001074:	2303      	movs	r3, #3
1a001076:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001078:	2301      	movs	r3, #1
1a00107a:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a00107c:	bd10      	pop	{r4, pc}
1a00107e:	bf00      	nop
1a001080:	400c1000 	.word	0x400c1000

1a001084 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001084:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001086:	f7ff ffeb 	bl	1a001060 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00108a:	480b      	ldr	r0, [pc, #44]	; (1a0010b8 <Board_Init+0x34>)
1a00108c:	f000 fd84 	bl	1a001b98 <Chip_GPIO_Init>

   Board_LED_Init();
1a001090:	f7ff ff3e 	bl	1a000f10 <Board_LED_Init>
   Board_TEC_Init();
1a001094:	f7ff ff5e 	bl	1a000f54 <Board_TEC_Init>
   Board_SPI_Init();
1a001098:	f7ff ff9c 	bl	1a000fd4 <Board_SPI_Init>
   Board_GPIO_Init();
1a00109c:	f7ff ff7a 	bl	1a000f94 <Board_GPIO_Init>
   Board_I2C_Init();
1a0010a0:	f7ff ffb4 	bl	1a00100c <Board_I2C_Init>
   Board_ADC_Init();
1a0010a4:	f7ff ffc4 	bl	1a001030 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a0010a8:	4a04      	ldr	r2, [pc, #16]	; (1a0010bc <Board_Init+0x38>)
1a0010aa:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a0010ae:	f043 0304 	orr.w	r3, r3, #4
1a0010b2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a0010b6:	bd08      	pop	{r3, pc}
1a0010b8:	400f4000 	.word	0x400f4000
1a0010bc:	40043000 	.word	0x40043000

1a0010c0 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0010c0:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a0010c2:	4a04      	ldr	r2, [pc, #16]	; (1a0010d4 <SystemInit+0x14>)
1a0010c4:	4b04      	ldr	r3, [pc, #16]	; (1a0010d8 <SystemInit+0x18>)
1a0010c6:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0010c8:	f000 fd3c 	bl	1a001b44 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a0010cc:	f000 f858 	bl	1a001180 <Board_SystemInit>
}
1a0010d0:	bd08      	pop	{r3, pc}
1a0010d2:	bf00      	nop
1a0010d4:	1a000000 	.word	0x1a000000
1a0010d8:	e000ed08 	.word	0xe000ed08

1a0010dc <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0010dc:	2300      	movs	r3, #0
1a0010de:	2b25      	cmp	r3, #37	; 0x25
1a0010e0:	d812      	bhi.n	1a001108 <Board_SetupMuxing+0x2c>
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a0010e2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0010e4:	4a09      	ldr	r2, [pc, #36]	; (1a00110c <Board_SetupMuxing+0x30>)
1a0010e6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0010ea:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0010ee:	784a      	ldrb	r2, [r1, #1]
1a0010f0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0010f2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0010f6:	4906      	ldr	r1, [pc, #24]	; (1a001110 <Board_SetupMuxing+0x34>)
1a0010f8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0010fc:	3301      	adds	r3, #1
1a0010fe:	2b25      	cmp	r3, #37	; 0x25
1a001100:	d9f0      	bls.n	1a0010e4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001102:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001106:	4770      	bx	lr
1a001108:	4770      	bx	lr
1a00110a:	bf00      	nop
1a00110c:	1a002398 	.word	0x1a002398
1a001110:	40086000 	.word	0x40086000

1a001114 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001114:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001116:	4a17      	ldr	r2, [pc, #92]	; (1a001174 <Board_SetupClocking+0x60>)
1a001118:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00111c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001120:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001124:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001128:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00112c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001130:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001134:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001138:	2201      	movs	r2, #1
1a00113a:	490f      	ldr	r1, [pc, #60]	; (1a001178 <Board_SetupClocking+0x64>)
1a00113c:	2006      	movs	r0, #6
1a00113e:	f000 fd2d 	bl	1a001b9c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001142:	2400      	movs	r4, #0
1a001144:	2c02      	cmp	r4, #2
1a001146:	d80b      	bhi.n	1a001160 <Board_SetupClocking+0x4c>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001148:	480c      	ldr	r0, [pc, #48]	; (1a00117c <Board_SetupClocking+0x68>)
1a00114a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00114e:	78cb      	ldrb	r3, [r1, #3]
1a001150:	788a      	ldrb	r2, [r1, #2]
1a001152:	7849      	ldrb	r1, [r1, #1]
1a001154:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001158:	f000 fc36 	bl	1a0019c8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00115c:	3401      	adds	r4, #1
1a00115e:	e7f1      	b.n	1a001144 <Board_SetupClocking+0x30>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001160:	4b04      	ldr	r3, [pc, #16]	; (1a001174 <Board_SetupClocking+0x60>)
1a001162:	685a      	ldr	r2, [r3, #4]
1a001164:	f022 020c 	bic.w	r2, r2, #12
1a001168:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00116a:	685a      	ldr	r2, [r3, #4]
1a00116c:	f042 0203 	orr.w	r2, r2, #3
1a001170:	605a      	str	r2, [r3, #4]
}
1a001172:	bd10      	pop	{r4, pc}
1a001174:	40043000 	.word	0x40043000
1a001178:	0c28cb00 	.word	0x0c28cb00
1a00117c:	1a00238c 	.word	0x1a00238c

1a001180 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001180:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001182:	f7ff ffab 	bl	1a0010dc <Board_SetupMuxing>
    Board_SetupClocking();
1a001186:	f7ff ffc5 	bl	1a001114 <Board_SetupClocking>
}
1a00118a:	bd08      	pop	{r3, pc}

1a00118c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00118c:	2901      	cmp	r1, #1
1a00118e:	d109      	bne.n	1a0011a4 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001190:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001194:	0082      	lsls	r2, r0, #2
1a001196:	4b04      	ldr	r3, [pc, #16]	; (1a0011a8 <Chip_I2C_EventHandler+0x1c>)
1a001198:	4413      	add	r3, r2
1a00119a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00119c:	7d13      	ldrb	r3, [r2, #20]
1a00119e:	b2db      	uxtb	r3, r3
1a0011a0:	2b04      	cmp	r3, #4
1a0011a2:	d0fb      	beq.n	1a00119c <Chip_I2C_EventHandler+0x10>
}
1a0011a4:	4770      	bx	lr
1a0011a6:	bf00      	nop
1a0011a8:	10000090 	.word	0x10000090

1a0011ac <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0011ac:	b570      	push	{r4, r5, r6, lr}
1a0011ae:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0011b0:	4e06      	ldr	r6, [pc, #24]	; (1a0011cc <Chip_I2C_Init+0x20>)
1a0011b2:	00c4      	lsls	r4, r0, #3
1a0011b4:	1a22      	subs	r2, r4, r0
1a0011b6:	0093      	lsls	r3, r2, #2
1a0011b8:	4433      	add	r3, r6
1a0011ba:	8898      	ldrh	r0, [r3, #4]
1a0011bc:	f000 fc68 	bl	1a001a90 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0011c0:	1b64      	subs	r4, r4, r5
1a0011c2:	00a3      	lsls	r3, r4, #2
1a0011c4:	58f3      	ldr	r3, [r6, r3]
1a0011c6:	226c      	movs	r2, #108	; 0x6c
1a0011c8:	619a      	str	r2, [r3, #24]
}
1a0011ca:	bd70      	pop	{r4, r5, r6, pc}
1a0011cc:	10000090 	.word	0x10000090

1a0011d0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0011d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0011d4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0011d6:	4e0b      	ldr	r6, [pc, #44]	; (1a001204 <Chip_I2C_SetClockRate+0x34>)
1a0011d8:	00c5      	lsls	r5, r0, #3
1a0011da:	1a2b      	subs	r3, r5, r0
1a0011dc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0011e0:	eb06 0308 	add.w	r3, r6, r8
1a0011e4:	8898      	ldrh	r0, [r3, #4]
1a0011e6:	f000 fc87 	bl	1a001af8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0011ea:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0011ee:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011f2:	0842      	lsrs	r2, r0, #1
1a0011f4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0011f6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011fa:	691a      	ldr	r2, [r3, #16]
1a0011fc:	1a80      	subs	r0, r0, r2
1a0011fe:	6158      	str	r0, [r3, #20]
}
1a001200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001204:	10000090 	.word	0x10000090

1a001208 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001208:	4b09      	ldr	r3, [pc, #36]	; (1a001230 <Chip_UART_GetIndex+0x28>)
1a00120a:	4298      	cmp	r0, r3
1a00120c:	d009      	beq.n	1a001222 <Chip_UART_GetIndex+0x1a>
1a00120e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001212:	4298      	cmp	r0, r3
1a001214:	d007      	beq.n	1a001226 <Chip_UART_GetIndex+0x1e>
1a001216:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00121a:	4298      	cmp	r0, r3
1a00121c:	d005      	beq.n	1a00122a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00121e:	2000      	movs	r0, #0
1a001220:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001222:	2002      	movs	r0, #2
1a001224:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001226:	2003      	movs	r0, #3
1a001228:	4770      	bx	lr
			return 1;
1a00122a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00122c:	4770      	bx	lr
1a00122e:	bf00      	nop
1a001230:	400c1000 	.word	0x400c1000

1a001234 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001234:	b530      	push	{r4, r5, lr}
1a001236:	b083      	sub	sp, #12
1a001238:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00123a:	f7ff ffe5 	bl	1a001208 <Chip_UART_GetIndex>
1a00123e:	2301      	movs	r3, #1
1a001240:	461a      	mov	r2, r3
1a001242:	4619      	mov	r1, r3
1a001244:	4d0e      	ldr	r5, [pc, #56]	; (1a001280 <Chip_UART_Init+0x4c>)
1a001246:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00124a:	f000 fc03 	bl	1a001a54 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00124e:	2307      	movs	r3, #7
1a001250:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001252:	2300      	movs	r3, #0
1a001254:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001256:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001258:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00125a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00125c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00125e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001260:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001262:	4b08      	ldr	r3, [pc, #32]	; (1a001284 <Chip_UART_Init+0x50>)
1a001264:	429c      	cmp	r4, r3
1a001266:	d006      	beq.n	1a001276 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001268:	2303      	movs	r3, #3
1a00126a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00126c:	2310      	movs	r3, #16
1a00126e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001270:	9b01      	ldr	r3, [sp, #4]
}
1a001272:	b003      	add	sp, #12
1a001274:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001276:	2300      	movs	r3, #0
1a001278:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00127a:	69a3      	ldr	r3, [r4, #24]
1a00127c:	9301      	str	r3, [sp, #4]
1a00127e:	e7f3      	b.n	1a001268 <Chip_UART_Init+0x34>
1a001280:	1a002438 	.word	0x1a002438
1a001284:	40082000 	.word	0x40082000

1a001288 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001288:	b538      	push	{r3, r4, r5, lr}
1a00128a:	4605      	mov	r5, r0
1a00128c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00128e:	f7ff ffbb 	bl	1a001208 <Chip_UART_GetIndex>
1a001292:	4b0c      	ldr	r3, [pc, #48]	; (1a0012c4 <Chip_UART_SetBaud+0x3c>)
1a001294:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001298:	f000 fc2e 	bl	1a001af8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00129c:	0123      	lsls	r3, r4, #4
1a00129e:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0012a2:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0012a4:	68ea      	ldr	r2, [r5, #12]
1a0012a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0012aa:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0012ac:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0012ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0012b2:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0012b4:	68ea      	ldr	r2, [r5, #12]
1a0012b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0012ba:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0012bc:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0012c0:	0900      	lsrs	r0, r0, #4
1a0012c2:	bd38      	pop	{r3, r4, r5, pc}
1a0012c4:	1a002430 	.word	0x1a002430

1a0012c8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0012cc:	b083      	sub	sp, #12
1a0012ce:	9001      	str	r0, [sp, #4]
1a0012d0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0012d2:	f7ff ff99 	bl	1a001208 <Chip_UART_GetIndex>
1a0012d6:	4b32      	ldr	r3, [pc, #200]	; (1a0013a0 <Chip_UART_SetBaudFDR+0xd8>)
1a0012d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0012dc:	f000 fc0c 	bl	1a001af8 <Chip_Clock_GetRate>
1a0012e0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0012e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0012e6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0012e8:	f04f 0b00 	mov.w	fp, #0
1a0012ec:	46a2      	mov	sl, r4
1a0012ee:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0012f0:	e02a      	b.n	1a001348 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0012f2:	4242      	negs	r2, r0
				div ++;
1a0012f4:	1c4b      	adds	r3, r1, #1
1a0012f6:	e017      	b.n	1a001328 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0012f8:	b30a      	cbz	r2, 1a00133e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0012fa:	4617      	mov	r7, r2
			sd = d;
1a0012fc:	46ab      	mov	fp, r5
			sm = m;
1a0012fe:	46a2      	mov	sl, r4
			sdiv = div;
1a001300:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001302:	3501      	adds	r5, #1
1a001304:	42ac      	cmp	r4, r5
1a001306:	d91e      	bls.n	1a001346 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001308:	0933      	lsrs	r3, r6, #4
1a00130a:	0730      	lsls	r0, r6, #28
1a00130c:	fba4 0100 	umull	r0, r1, r4, r0
1a001310:	fb04 1103 	mla	r1, r4, r3, r1
1a001314:	1962      	adds	r2, r4, r5
1a001316:	fb08 f202 	mul.w	r2, r8, r2
1a00131a:	2300      	movs	r3, #0
1a00131c:	f000 fd88 	bl	1a001e30 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001320:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001322:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001324:	2800      	cmp	r0, #0
1a001326:	dbe4      	blt.n	1a0012f2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001328:	4297      	cmp	r7, r2
1a00132a:	d3ea      	bcc.n	1a001302 <Chip_UART_SetBaudFDR+0x3a>
1a00132c:	2b00      	cmp	r3, #0
1a00132e:	d0e8      	beq.n	1a001302 <Chip_UART_SetBaudFDR+0x3a>
1a001330:	0c19      	lsrs	r1, r3, #16
1a001332:	d1e6      	bne.n	1a001302 <Chip_UART_SetBaudFDR+0x3a>
1a001334:	2b02      	cmp	r3, #2
1a001336:	d8df      	bhi.n	1a0012f8 <Chip_UART_SetBaudFDR+0x30>
1a001338:	2d00      	cmp	r5, #0
1a00133a:	d0dd      	beq.n	1a0012f8 <Chip_UART_SetBaudFDR+0x30>
1a00133c:	e7e1      	b.n	1a001302 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00133e:	4617      	mov	r7, r2
			sd = d;
1a001340:	46ab      	mov	fp, r5
			sm = m;
1a001342:	46a2      	mov	sl, r4
			sdiv = div;
1a001344:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001346:	3401      	adds	r4, #1
1a001348:	b11f      	cbz	r7, 1a001352 <Chip_UART_SetBaudFDR+0x8a>
1a00134a:	2c0f      	cmp	r4, #15
1a00134c:	d801      	bhi.n	1a001352 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00134e:	2500      	movs	r5, #0
1a001350:	e7d8      	b.n	1a001304 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001352:	f1b9 0f00 	cmp.w	r9, #0
1a001356:	d01e      	beq.n	1a001396 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001358:	9a01      	ldr	r2, [sp, #4]
1a00135a:	4611      	mov	r1, r2
1a00135c:	68d3      	ldr	r3, [r2, #12]
1a00135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001362:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a001364:	fa5f f389 	uxtb.w	r3, r9
1a001368:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00136a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00136e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001370:	68d3      	ldr	r3, [r2, #12]
1a001372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001376:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001378:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00137c:	b2db      	uxtb	r3, r3
1a00137e:	f00b 020f 	and.w	r2, fp, #15
1a001382:	4313      	orrs	r3, r2
1a001384:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001386:	0933      	lsrs	r3, r6, #4
1a001388:	fb0a f303 	mul.w	r3, sl, r3
1a00138c:	44da      	add	sl, fp
1a00138e:	fb09 f90a 	mul.w	r9, r9, sl
1a001392:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001396:	4648      	mov	r0, r9
1a001398:	b003      	add	sp, #12
1a00139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00139e:	bf00      	nop
1a0013a0:	1a002430 	.word	0x1a002430

1a0013a4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0013a4:	4b03      	ldr	r3, [pc, #12]	; (1a0013b4 <Chip_ADC_GetClockIndex+0x10>)
1a0013a6:	4298      	cmp	r0, r3
1a0013a8:	d001      	beq.n	1a0013ae <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0013aa:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0013ac:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0013ae:	2004      	movs	r0, #4
1a0013b0:	4770      	bx	lr
1a0013b2:	bf00      	nop
1a0013b4:	400e4000 	.word	0x400e4000

1a0013b8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0013b8:	b570      	push	{r4, r5, r6, lr}
1a0013ba:	460d      	mov	r5, r1
1a0013bc:	4614      	mov	r4, r2
1a0013be:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0013c0:	f7ff fff0 	bl	1a0013a4 <Chip_ADC_GetClockIndex>
1a0013c4:	f000 fb98 	bl	1a001af8 <Chip_Clock_GetRate>
	if (burstMode) {
1a0013c8:	b155      	cbz	r5, 1a0013e0 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0013ca:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0013ce:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0013d2:	0064      	lsls	r4, r4, #1
1a0013d4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0013d8:	b2c0      	uxtb	r0, r0
1a0013da:	3801      	subs	r0, #1
	return div;
}
1a0013dc:	b2c0      	uxtb	r0, r0
1a0013de:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0013e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0013e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0013e8:	e7f1      	b.n	1a0013ce <getClkDiv+0x16>

1a0013ea <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a0013ea:	6803      	ldr	r3, [r0, #0]
1a0013ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a0013f0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a0013f4:	6001      	str	r1, [r0, #0]
}
1a0013f6:	4770      	bx	lr

1a0013f8 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a0013f8:	3104      	adds	r1, #4
1a0013fa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a0013fe:	2b00      	cmp	r3, #0
1a001400:	da04      	bge.n	1a00140c <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a001402:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a001406:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a001408:	2001      	movs	r0, #1
1a00140a:	4770      	bx	lr
		return ERROR;
1a00140c:	2000      	movs	r0, #0
}
1a00140e:	4770      	bx	lr

1a001410 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001410:	b538      	push	{r3, r4, r5, lr}
1a001412:	4605      	mov	r5, r0
1a001414:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001416:	f7ff ffc5 	bl	1a0013a4 <Chip_ADC_GetClockIndex>
1a00141a:	2301      	movs	r3, #1
1a00141c:	461a      	mov	r2, r3
1a00141e:	4619      	mov	r1, r3
1a001420:	f000 fb18 	bl	1a001a54 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001424:	2100      	movs	r1, #0
1a001426:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001428:	4a08      	ldr	r2, [pc, #32]	; (1a00144c <Chip_ADC_Init+0x3c>)
1a00142a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00142c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00142e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001430:	230b      	movs	r3, #11
1a001432:	4628      	mov	r0, r5
1a001434:	f7ff ffc0 	bl	1a0013b8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001438:	0200      	lsls	r0, r0, #8
1a00143a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00143e:	7920      	ldrb	r0, [r4, #4]
1a001440:	0440      	lsls	r0, r0, #17
1a001442:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001446:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001448:	6028      	str	r0, [r5, #0]
}
1a00144a:	bd38      	pop	{r3, r4, r5, pc}
1a00144c:	00061a80 	.word	0x00061a80

1a001450 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a001450:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a001452:	f44f 7280 	mov.w	r2, #256	; 0x100
1a001456:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a001458:	2200      	movs	r2, #0
1a00145a:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a00145c:	f7ff ffa2 	bl	1a0013a4 <Chip_ADC_GetClockIndex>
1a001460:	f000 fb30 	bl	1a001ac4 <Chip_Clock_Disable>
}
1a001464:	bd08      	pop	{r3, pc}

1a001466 <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a001466:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a001468:	f7ff ffc6 	bl	1a0013f8 <readAdcVal>
}
1a00146c:	bd08      	pop	{r3, pc}

1a00146e <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a00146e:	2a01      	cmp	r2, #1
1a001470:	d00a      	beq.n	1a001488 <Chip_ADC_ReadStatus+0x1a>
1a001472:	b11a      	cbz	r2, 1a00147c <Chip_ADC_ReadStatus+0xe>
1a001474:	2a02      	cmp	r2, #2
1a001476:	d00f      	beq.n	1a001498 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a001478:	2000      	movs	r0, #0
1a00147a:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a00147c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00147e:	40c8      	lsrs	r0, r1
1a001480:	f000 0001 	and.w	r0, r0, #1
1a001484:	b2c0      	uxtb	r0, r0
1a001486:	4770      	bx	lr
		channel += 8;
1a001488:	3108      	adds	r1, #8
1a00148a:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a00148c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00148e:	40c8      	lsrs	r0, r1
1a001490:	f000 0001 	and.w	r0, r0, #1
1a001494:	b2c0      	uxtb	r0, r0
1a001496:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a001498:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00149a:	0c1b      	lsrs	r3, r3, #16
1a00149c:	bf14      	ite	ne
1a00149e:	2001      	movne	r0, #1
1a0014a0:	2000      	moveq	r0, #0
}
1a0014a2:	4770      	bx	lr

1a0014a4 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0014a4:	2a01      	cmp	r2, #1
1a0014a6:	d006      	beq.n	1a0014b6 <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a0014a8:	68c3      	ldr	r3, [r0, #12]
1a0014aa:	2201      	movs	r2, #1
1a0014ac:	408a      	lsls	r2, r1
1a0014ae:	ea23 0302 	bic.w	r3, r3, r2
1a0014b2:	60c3      	str	r3, [r0, #12]
1a0014b4:	4770      	bx	lr
{
1a0014b6:	b410      	push	{r4}
		pADC->INTEN |= (1UL << channel);
1a0014b8:	68c4      	ldr	r4, [r0, #12]
1a0014ba:	408a      	lsls	r2, r1
1a0014bc:	4314      	orrs	r4, r2
1a0014be:	60c4      	str	r4, [r0, #12]
	}
}
1a0014c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0014c4:	4770      	bx	lr

1a0014c6 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a0014c6:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a0014c8:	2901      	cmp	r1, #1
1a0014ca:	d904      	bls.n	1a0014d6 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a0014cc:	b132      	cbz	r2, 1a0014dc <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
1a0014ce:	6803      	ldr	r3, [r0, #0]
1a0014d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a0014d4:	6003      	str	r3, [r0, #0]
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a0014d6:	f7ff ff88 	bl	1a0013ea <setStartMode>
}
1a0014da:	bd08      	pop	{r3, pc}
			pADC->CR &= ~ADC_CR_EDGE;
1a0014dc:	6803      	ldr	r3, [r0, #0]
1a0014de:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a0014e2:	6003      	str	r3, [r0, #0]
1a0014e4:	e7f7      	b.n	1a0014d6 <Chip_ADC_SetStartMode+0x10>

1a0014e6 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0014e6:	b570      	push	{r4, r5, r6, lr}
1a0014e8:	4605      	mov	r5, r0
1a0014ea:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0014ec:	6804      	ldr	r4, [r0, #0]
1a0014ee:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0014f2:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0014f6:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0014f8:	790b      	ldrb	r3, [r1, #4]
1a0014fa:	f1c3 030b 	rsb	r3, r3, #11
1a0014fe:	b2db      	uxtb	r3, r3
1a001500:	7949      	ldrb	r1, [r1, #5]
1a001502:	f7ff ff59 	bl	1a0013b8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001506:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00150a:	7933      	ldrb	r3, [r6, #4]
1a00150c:	045b      	lsls	r3, r3, #17
1a00150e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001512:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a001514:	602b      	str	r3, [r5, #0]
}
1a001516:	bd70      	pop	{r4, r5, r6, pc}

1a001518 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001518:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00151a:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00151c:	680a      	ldr	r2, [r1, #0]
1a00151e:	f7ff ffe2 	bl	1a0014e6 <Chip_ADC_SetSampleRate>
}
1a001522:	bd08      	pop	{r3, pc}

1a001524 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a001524:	2a01      	cmp	r2, #1
1a001526:	d00a      	beq.n	1a00153e <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a001528:	6802      	ldr	r2, [r0, #0]
1a00152a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a00152e:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a001530:	6803      	ldr	r3, [r0, #0]
1a001532:	2201      	movs	r2, #1
1a001534:	408a      	lsls	r2, r1
1a001536:	ea23 0302 	bic.w	r3, r3, r2
1a00153a:	6003      	str	r3, [r0, #0]
1a00153c:	4770      	bx	lr
{
1a00153e:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a001540:	6804      	ldr	r4, [r0, #0]
1a001542:	408a      	lsls	r2, r1
1a001544:	4314      	orrs	r4, r2
1a001546:	6004      	str	r4, [r0, #0]
	}
}
1a001548:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00154c:	4770      	bx	lr

1a00154e <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00154e:	b538      	push	{r3, r4, r5, lr}
1a001550:	4604      	mov	r4, r0
1a001552:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a001554:	2100      	movs	r1, #0
1a001556:	f7ff ff48 	bl	1a0013ea <setStartMode>
	
    if (NewState == DISABLE) {
1a00155a:	b925      	cbnz	r5, 1a001566 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a00155c:	6823      	ldr	r3, [r4, #0]
1a00155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a001562:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a001564:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a001566:	6823      	ldr	r3, [r4, #0]
1a001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a00156c:	6023      	str	r3, [r4, #0]
}
1a00156e:	e7f9      	b.n	1a001564 <Chip_ADC_SetBurstCmd+0x16>

1a001570 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001570:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001572:	2069      	movs	r0, #105	; 0x69
1a001574:	f000 fac0 	bl	1a001af8 <Chip_Clock_GetRate>
1a001578:	4b01      	ldr	r3, [pc, #4]	; (1a001580 <SystemCoreClockUpdate+0x10>)
1a00157a:	6018      	str	r0, [r3, #0]
}
1a00157c:	bd08      	pop	{r3, pc}
1a00157e:	bf00      	nop
1a001580:	100004a0 	.word	0x100004a0

1a001584 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001584:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001586:	680b      	ldr	r3, [r1, #0]
1a001588:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00158c:	d002      	beq.n	1a001594 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00158e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001592:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001594:	4607      	mov	r7, r0
1a001596:	2501      	movs	r5, #1
1a001598:	e03a      	b.n	1a001610 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00159a:	694b      	ldr	r3, [r1, #20]
1a00159c:	fb03 f302 	mul.w	r3, r3, r2
1a0015a0:	fbb3 f3f5 	udiv	r3, r3, r5
1a0015a4:	e01c      	b.n	1a0015e0 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0015a6:	461c      	mov	r4, r3
	if (val < 0)
1a0015a8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0015ac:	d427      	bmi.n	1a0015fe <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0015ae:	4567      	cmp	r7, ip
1a0015b0:	d906      	bls.n	1a0015c0 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0015b2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0015b4:	1c77      	adds	r7, r6, #1
1a0015b6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0015b8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0015ba:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0015bc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0015be:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0015c0:	3201      	adds	r2, #1
1a0015c2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0015c6:	dc1d      	bgt.n	1a001604 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0015c8:	680c      	ldr	r4, [r1, #0]
1a0015ca:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0015ce:	d0e4      	beq.n	1a00159a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0015d0:	1c73      	adds	r3, r6, #1
1a0015d2:	fa02 fc03 	lsl.w	ip, r2, r3
1a0015d6:	694b      	ldr	r3, [r1, #20]
1a0015d8:	fb03 f30c 	mul.w	r3, r3, ip
1a0015dc:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0015e0:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a00161c <pll_calc_divs+0x98>
1a0015e4:	4563      	cmp	r3, ip
1a0015e6:	d9eb      	bls.n	1a0015c0 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0015e8:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001620 <pll_calc_divs+0x9c>
1a0015ec:	4563      	cmp	r3, ip
1a0015ee:	d809      	bhi.n	1a001604 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0015f0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0015f4:	d1d7      	bne.n	1a0015a6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0015f6:	1c74      	adds	r4, r6, #1
1a0015f8:	fa23 f404 	lsr.w	r4, r3, r4
1a0015fc:	e7d4      	b.n	1a0015a8 <pll_calc_divs+0x24>
		return -val;
1a0015fe:	f1cc 0c00 	rsb	ip, ip, #0
1a001602:	e7d4      	b.n	1a0015ae <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001604:	3601      	adds	r6, #1
1a001606:	2e03      	cmp	r6, #3
1a001608:	dc01      	bgt.n	1a00160e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00160a:	2201      	movs	r2, #1
1a00160c:	e7d9      	b.n	1a0015c2 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a00160e:	3501      	adds	r5, #1
1a001610:	2d04      	cmp	r5, #4
1a001612:	dc01      	bgt.n	1a001618 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001614:	2600      	movs	r6, #0
1a001616:	e7f6      	b.n	1a001606 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001618:	bcf0      	pop	{r4, r5, r6, r7}
1a00161a:	4770      	bx	lr
1a00161c:	094c5eff 	.word	0x094c5eff
1a001620:	1312d000 	.word	0x1312d000

1a001624 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001624:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001626:	b099      	sub	sp, #100	; 0x64
1a001628:	4605      	mov	r5, r0
1a00162a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00162c:	225c      	movs	r2, #92	; 0x5c
1a00162e:	2100      	movs	r1, #0
1a001630:	a801      	add	r0, sp, #4
1a001632:	f000 fda3 	bl	1a00217c <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001636:	2380      	movs	r3, #128	; 0x80
1a001638:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00163a:	6963      	ldr	r3, [r4, #20]
1a00163c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00163e:	7923      	ldrb	r3, [r4, #4]
1a001640:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001644:	4669      	mov	r1, sp
1a001646:	4628      	mov	r0, r5
1a001648:	f7ff ff9c 	bl	1a001584 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00164c:	9b06      	ldr	r3, [sp, #24]
1a00164e:	42ab      	cmp	r3, r5
1a001650:	d027      	beq.n	1a0016a2 <pll_get_frac+0x7e>
	if (val < 0)
1a001652:	1aeb      	subs	r3, r5, r3
1a001654:	d42e      	bmi.n	1a0016b4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001656:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001658:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00165a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00165e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001660:	6963      	ldr	r3, [r4, #20]
1a001662:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001664:	7923      	ldrb	r3, [r4, #4]
1a001666:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00166a:	a910      	add	r1, sp, #64	; 0x40
1a00166c:	4628      	mov	r0, r5
1a00166e:	f7ff ff89 	bl	1a001584 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001672:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001674:	42ab      	cmp	r3, r5
1a001676:	d01f      	beq.n	1a0016b8 <pll_get_frac+0x94>
	if (val < 0)
1a001678:	1aeb      	subs	r3, r5, r3
1a00167a:	d425      	bmi.n	1a0016c8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00167c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00167e:	4b2b      	ldr	r3, [pc, #172]	; (1a00172c <pll_get_frac+0x108>)
1a001680:	429d      	cmp	r5, r3
1a001682:	d923      	bls.n	1a0016cc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001686:	1aed      	subs	r5, r5, r3
1a001688:	d433      	bmi.n	1a0016f2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00168a:	42ae      	cmp	r6, r5
1a00168c:	dc3b      	bgt.n	1a001706 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00168e:	42be      	cmp	r6, r7
1a001690:	dc31      	bgt.n	1a0016f6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001692:	466d      	mov	r5, sp
1a001694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001698:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00169c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0016a0:	e006      	b.n	1a0016b0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0016a2:	466d      	mov	r5, sp
1a0016a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0016a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0016a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0016ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0016b0:	b019      	add	sp, #100	; 0x64
1a0016b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0016b4:	425b      	negs	r3, r3
1a0016b6:	e7ce      	b.n	1a001656 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0016b8:	ad10      	add	r5, sp, #64	; 0x40
1a0016ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0016bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0016be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0016c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0016c6:	e7f3      	b.n	1a0016b0 <pll_get_frac+0x8c>
		return -val;
1a0016c8:	425b      	negs	r3, r3
1a0016ca:	e7d7      	b.n	1a00167c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0016cc:	2340      	movs	r3, #64	; 0x40
1a0016ce:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0016d0:	6963      	ldr	r3, [r4, #20]
1a0016d2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0016d4:	a908      	add	r1, sp, #32
1a0016d6:	4628      	mov	r0, r5
1a0016d8:	f7ff ff54 	bl	1a001584 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0016dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0016de:	42ab      	cmp	r3, r5
1a0016e0:	d1d0      	bne.n	1a001684 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0016e2:	ad08      	add	r5, sp, #32
1a0016e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0016e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0016e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0016ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0016f0:	e7de      	b.n	1a0016b0 <pll_get_frac+0x8c>
		return -val;
1a0016f2:	426d      	negs	r5, r5
1a0016f4:	e7c9      	b.n	1a00168a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0016f6:	ad10      	add	r5, sp, #64	; 0x40
1a0016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0016fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001704:	e7d4      	b.n	1a0016b0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001706:	42af      	cmp	r7, r5
1a001708:	db07      	blt.n	1a00171a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00170a:	ad08      	add	r5, sp, #32
1a00170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001710:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001718:	e7ca      	b.n	1a0016b0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00171a:	ad10      	add	r5, sp, #64	; 0x40
1a00171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00171e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001720:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001728:	e7c2      	b.n	1a0016b0 <pll_get_frac+0x8c>
1a00172a:	bf00      	nop
1a00172c:	068e7780 	.word	0x068e7780

1a001730 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001730:	b430      	push	{r4, r5}
1a001732:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001734:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001736:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001738:	e000      	b.n	1a00173c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00173a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00173c:	281c      	cmp	r0, #28
1a00173e:	d118      	bne.n	1a001772 <Chip_Clock_FindBaseClock+0x42>
1a001740:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001744:	0051      	lsls	r1, r2, #1
1a001746:	4a0c      	ldr	r2, [pc, #48]	; (1a001778 <Chip_Clock_FindBaseClock+0x48>)
1a001748:	440a      	add	r2, r1
1a00174a:	7914      	ldrb	r4, [r2, #4]
1a00174c:	4284      	cmp	r4, r0
1a00174e:	d010      	beq.n	1a001772 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001750:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001754:	004a      	lsls	r2, r1, #1
1a001756:	4908      	ldr	r1, [pc, #32]	; (1a001778 <Chip_Clock_FindBaseClock+0x48>)
1a001758:	5a8a      	ldrh	r2, [r1, r2]
1a00175a:	42aa      	cmp	r2, r5
1a00175c:	d8ed      	bhi.n	1a00173a <Chip_Clock_FindBaseClock+0xa>
1a00175e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001762:	0051      	lsls	r1, r2, #1
1a001764:	4a04      	ldr	r2, [pc, #16]	; (1a001778 <Chip_Clock_FindBaseClock+0x48>)
1a001766:	440a      	add	r2, r1
1a001768:	8852      	ldrh	r2, [r2, #2]
1a00176a:	42aa      	cmp	r2, r5
1a00176c:	d3e5      	bcc.n	1a00173a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00176e:	4620      	mov	r0, r4
1a001770:	e7e4      	b.n	1a00173c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001772:	bc30      	pop	{r4, r5}
1a001774:	4770      	bx	lr
1a001776:	bf00      	nop
1a001778:	1a00244c 	.word	0x1a00244c

1a00177c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00177c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001782:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001784:	4a0d      	ldr	r2, [pc, #52]	; (1a0017bc <Chip_Clock_EnableCrystal+0x40>)
1a001786:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001788:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00178c:	6992      	ldr	r2, [r2, #24]
1a00178e:	428a      	cmp	r2, r1
1a001790:	d001      	beq.n	1a001796 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001792:	4a0a      	ldr	r2, [pc, #40]	; (1a0017bc <Chip_Clock_EnableCrystal+0x40>)
1a001794:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001796:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00179a:	4a09      	ldr	r2, [pc, #36]	; (1a0017c0 <Chip_Clock_EnableCrystal+0x44>)
1a00179c:	6811      	ldr	r1, [r2, #0]
1a00179e:	4a09      	ldr	r2, [pc, #36]	; (1a0017c4 <Chip_Clock_EnableCrystal+0x48>)
1a0017a0:	4291      	cmp	r1, r2
1a0017a2:	d901      	bls.n	1a0017a8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0017a4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0017a8:	4a04      	ldr	r2, [pc, #16]	; (1a0017bc <Chip_Clock_EnableCrystal+0x40>)
1a0017aa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0017ac:	9b01      	ldr	r3, [sp, #4]
1a0017ae:	1e5a      	subs	r2, r3, #1
1a0017b0:	9201      	str	r2, [sp, #4]
1a0017b2:	2b00      	cmp	r3, #0
1a0017b4:	d1fa      	bne.n	1a0017ac <Chip_Clock_EnableCrystal+0x30>
}
1a0017b6:	b002      	add	sp, #8
1a0017b8:	4770      	bx	lr
1a0017ba:	bf00      	nop
1a0017bc:	40050000 	.word	0x40050000
1a0017c0:	1a002388 	.word	0x1a002388
1a0017c4:	01312cff 	.word	0x01312cff

1a0017c8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0017c8:	3012      	adds	r0, #18
1a0017ca:	4b05      	ldr	r3, [pc, #20]	; (1a0017e0 <Chip_Clock_GetDividerSource+0x18>)
1a0017cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0017d0:	f010 0f01 	tst.w	r0, #1
1a0017d4:	d102      	bne.n	1a0017dc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0017d6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0017da:	4770      	bx	lr
		return CLKINPUT_PD;
1a0017dc:	2011      	movs	r0, #17
}
1a0017de:	4770      	bx	lr
1a0017e0:	40050000 	.word	0x40050000

1a0017e4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0017e4:	f100 0212 	add.w	r2, r0, #18
1a0017e8:	4b03      	ldr	r3, [pc, #12]	; (1a0017f8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0017ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0017ee:	4b03      	ldr	r3, [pc, #12]	; (1a0017fc <Chip_Clock_GetDividerDivisor+0x18>)
1a0017f0:	5c18      	ldrb	r0, [r3, r0]
}
1a0017f2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0017f6:	4770      	bx	lr
1a0017f8:	40050000 	.word	0x40050000
1a0017fc:	1a002444 	.word	0x1a002444

1a001800 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001800:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001802:	2810      	cmp	r0, #16
1a001804:	d80a      	bhi.n	1a00181c <Chip_Clock_GetClockInputHz+0x1c>
1a001806:	e8df f000 	tbb	[pc, r0]
1a00180a:	0b44      	.short	0x0b44
1a00180c:	0921180d 	.word	0x0921180d
1a001810:	2d2a2724 	.word	0x2d2a2724
1a001814:	34300909 	.word	0x34300909
1a001818:	3c38      	.short	0x3c38
1a00181a:	40          	.byte	0x40
1a00181b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00181c:	2000      	movs	r0, #0
1a00181e:	e03a      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001820:	481e      	ldr	r0, [pc, #120]	; (1a00189c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001822:	e038      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001824:	4b1e      	ldr	r3, [pc, #120]	; (1a0018a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001826:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00182a:	f003 0307 	and.w	r3, r3, #7
1a00182e:	2b04      	cmp	r3, #4
1a001830:	d001      	beq.n	1a001836 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001832:	481c      	ldr	r0, [pc, #112]	; (1a0018a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001834:	e02f      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001836:	2000      	movs	r0, #0
1a001838:	e02d      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00183a:	4b19      	ldr	r3, [pc, #100]	; (1a0018a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a00183c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001840:	f003 0307 	and.w	r3, r3, #7
1a001844:	2b04      	cmp	r3, #4
1a001846:	d027      	beq.n	1a001898 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001848:	4816      	ldr	r0, [pc, #88]	; (1a0018a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a00184a:	e024      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00184c:	4b16      	ldr	r3, [pc, #88]	; (1a0018a8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00184e:	6818      	ldr	r0, [r3, #0]
		break;
1a001850:	e021      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001852:	4b16      	ldr	r3, [pc, #88]	; (1a0018ac <Chip_Clock_GetClockInputHz+0xac>)
1a001854:	6818      	ldr	r0, [r3, #0]
		break;
1a001856:	e01e      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001858:	4b15      	ldr	r3, [pc, #84]	; (1a0018b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00185a:	6818      	ldr	r0, [r3, #0]
		break;
1a00185c:	e01b      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00185e:	4b14      	ldr	r3, [pc, #80]	; (1a0018b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a001860:	6858      	ldr	r0, [r3, #4]
		break;
1a001862:	e018      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001864:	f000 f868 	bl	1a001938 <Chip_Clock_GetMainPLLHz>
		break;
1a001868:	e015      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00186a:	2100      	movs	r1, #0
1a00186c:	f000 f89a 	bl	1a0019a4 <Chip_Clock_GetDivRate>
		break;
1a001870:	e011      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001872:	2101      	movs	r1, #1
1a001874:	f000 f896 	bl	1a0019a4 <Chip_Clock_GetDivRate>
		break;
1a001878:	e00d      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00187a:	2102      	movs	r1, #2
1a00187c:	f000 f892 	bl	1a0019a4 <Chip_Clock_GetDivRate>
		break;
1a001880:	e009      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001882:	2103      	movs	r1, #3
1a001884:	f000 f88e 	bl	1a0019a4 <Chip_Clock_GetDivRate>
		break;
1a001888:	e005      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00188a:	2104      	movs	r1, #4
1a00188c:	f000 f88a 	bl	1a0019a4 <Chip_Clock_GetDivRate>
		break;
1a001890:	e001      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001892:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001896:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001898:	4806      	ldr	r0, [pc, #24]	; (1a0018b4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00189a:	e7fc      	b.n	1a001896 <Chip_Clock_GetClockInputHz+0x96>
1a00189c:	00b71b00 	.word	0x00b71b00
1a0018a0:	40043000 	.word	0x40043000
1a0018a4:	017d7840 	.word	0x017d7840
1a0018a8:	1a00235c 	.word	0x1a00235c
1a0018ac:	1a002388 	.word	0x1a002388
1a0018b0:	100000f4 	.word	0x100000f4
1a0018b4:	02faf080 	.word	0x02faf080

1a0018b8 <Chip_Clock_CalcMainPLLValue>:
{
1a0018b8:	b538      	push	{r3, r4, r5, lr}
1a0018ba:	4605      	mov	r5, r0
1a0018bc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0018be:	7908      	ldrb	r0, [r1, #4]
1a0018c0:	f7ff ff9e 	bl	1a001800 <Chip_Clock_GetClockInputHz>
1a0018c4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0018c6:	4b19      	ldr	r3, [pc, #100]	; (1a00192c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0018c8:	442b      	add	r3, r5
1a0018ca:	4a19      	ldr	r2, [pc, #100]	; (1a001930 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0018cc:	4293      	cmp	r3, r2
1a0018ce:	d821      	bhi.n	1a001914 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0018d0:	b318      	cbz	r0, 1a00191a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0018d2:	2380      	movs	r3, #128	; 0x80
1a0018d4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0018d6:	2300      	movs	r3, #0
1a0018d8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0018da:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0018dc:	fbb5 f3f0 	udiv	r3, r5, r0
1a0018e0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0018e2:	4a14      	ldr	r2, [pc, #80]	; (1a001934 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0018e4:	4295      	cmp	r5, r2
1a0018e6:	d903      	bls.n	1a0018f0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0018e8:	fb03 f000 	mul.w	r0, r3, r0
1a0018ec:	42a8      	cmp	r0, r5
1a0018ee:	d007      	beq.n	1a001900 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0018f0:	4621      	mov	r1, r4
1a0018f2:	4628      	mov	r0, r5
1a0018f4:	f7ff fe96 	bl	1a001624 <pll_get_frac>
		if (!ppll->nsel) {
1a0018f8:	68a3      	ldr	r3, [r4, #8]
1a0018fa:	b18b      	cbz	r3, 1a001920 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0018fc:	3b01      	subs	r3, #1
1a0018fe:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001900:	6923      	ldr	r3, [r4, #16]
1a001902:	b183      	cbz	r3, 1a001926 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001904:	68e2      	ldr	r2, [r4, #12]
1a001906:	b10a      	cbz	r2, 1a00190c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001908:	3a01      	subs	r2, #1
1a00190a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00190c:	3b01      	subs	r3, #1
1a00190e:	6123      	str	r3, [r4, #16]
	return 0;
1a001910:	2000      	movs	r0, #0
}
1a001912:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001918:	e7fb      	b.n	1a001912 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00191a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00191e:	e7f8      	b.n	1a001912 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001924:	e7f5      	b.n	1a001912 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00192a:	e7f2      	b.n	1a001912 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00192c:	ff6b3a10 	.word	0xff6b3a10
1a001930:	0b940510 	.word	0x0b940510
1a001934:	094c5eff 	.word	0x094c5eff

1a001938 <Chip_Clock_GetMainPLLHz>:
{
1a001938:	b530      	push	{r4, r5, lr}
1a00193a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00193c:	4d17      	ldr	r5, [pc, #92]	; (1a00199c <Chip_Clock_GetMainPLLHz+0x64>)
1a00193e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001940:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001944:	f7ff ff5c 	bl	1a001800 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001948:	4b15      	ldr	r3, [pc, #84]	; (1a0019a0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00194a:	681b      	ldr	r3, [r3, #0]
1a00194c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00194e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001950:	f013 0f01 	tst.w	r3, #1
1a001954:	d020      	beq.n	1a001998 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001956:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00195a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00195e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001962:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001966:	3301      	adds	r3, #1
	n = nsel + 1;
1a001968:	3201      	adds	r2, #1
	p = ptab[psel];
1a00196a:	f10d 0c08 	add.w	ip, sp, #8
1a00196e:	4461      	add	r1, ip
1a001970:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001974:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001978:	d108      	bne.n	1a00198c <Chip_Clock_GetMainPLLHz+0x54>
1a00197a:	b93d      	cbnz	r5, 1a00198c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00197c:	0049      	lsls	r1, r1, #1
1a00197e:	fbb3 f3f1 	udiv	r3, r3, r1
1a001982:	fbb0 f0f2 	udiv	r0, r0, r2
1a001986:	fb00 f003 	mul.w	r0, r0, r3
1a00198a:	e003      	b.n	1a001994 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a00198c:	fbb0 f0f2 	udiv	r0, r0, r2
1a001990:	fb03 f000 	mul.w	r0, r3, r0
}
1a001994:	b003      	add	sp, #12
1a001996:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001998:	2000      	movs	r0, #0
1a00199a:	e7fb      	b.n	1a001994 <Chip_Clock_GetMainPLLHz+0x5c>
1a00199c:	40050000 	.word	0x40050000
1a0019a0:	1a002440 	.word	0x1a002440

1a0019a4 <Chip_Clock_GetDivRate>:
{
1a0019a4:	b538      	push	{r3, r4, r5, lr}
1a0019a6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0019a8:	4608      	mov	r0, r1
1a0019aa:	f7ff ff0d 	bl	1a0017c8 <Chip_Clock_GetDividerSource>
1a0019ae:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0019b0:	4620      	mov	r0, r4
1a0019b2:	f7ff ff17 	bl	1a0017e4 <Chip_Clock_GetDividerDivisor>
1a0019b6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0019b8:	4628      	mov	r0, r5
1a0019ba:	f7ff ff21 	bl	1a001800 <Chip_Clock_GetClockInputHz>
1a0019be:	3401      	adds	r4, #1
}
1a0019c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0019c4:	bd38      	pop	{r3, r4, r5, pc}
1a0019c6:	Address 0x000000001a0019c6 is out of bounds.


1a0019c8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0019c8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0019ca:	f100 0416 	add.w	r4, r0, #22
1a0019ce:	00a4      	lsls	r4, r4, #2
1a0019d0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0019d4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0019d8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0019da:	281b      	cmp	r0, #27
1a0019dc:	d813      	bhi.n	1a001a06 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0019de:	2911      	cmp	r1, #17
1a0019e0:	d01a      	beq.n	1a001a18 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0019e2:	4d0e      	ldr	r5, [pc, #56]	; (1a001a1c <Chip_Clock_SetBaseClock+0x54>)
1a0019e4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0019e6:	b10a      	cbz	r2, 1a0019ec <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0019e8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0019ec:	b10b      	cbz	r3, 1a0019f2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0019ee:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0019f2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0019f6:	3016      	adds	r0, #22
1a0019f8:	0080      	lsls	r0, r0, #2
1a0019fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0019fe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001a02:	6045      	str	r5, [r0, #4]
1a001a04:	e008      	b.n	1a001a18 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001a06:	f044 0401 	orr.w	r4, r4, #1
1a001a0a:	3016      	adds	r0, #22
1a001a0c:	0080      	lsls	r0, r0, #2
1a001a0e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001a12:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001a16:	6044      	str	r4, [r0, #4]
	}
}
1a001a18:	bc30      	pop	{r4, r5}
1a001a1a:	4770      	bx	lr
1a001a1c:	e0fff7fe 	.word	0xe0fff7fe

1a001a20 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001a20:	281b      	cmp	r0, #27
1a001a22:	d80c      	bhi.n	1a001a3e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001a24:	3016      	adds	r0, #22
1a001a26:	0080      	lsls	r0, r0, #2
1a001a28:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001a2c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001a30:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001a32:	f010 0f01 	tst.w	r0, #1
1a001a36:	d104      	bne.n	1a001a42 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001a38:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001a3c:	4770      	bx	lr
		return CLKINPUT_PD;
1a001a3e:	2011      	movs	r0, #17
1a001a40:	4770      	bx	lr
		return CLKINPUT_PD;
1a001a42:	2011      	movs	r0, #17
}
1a001a44:	4770      	bx	lr

1a001a46 <Chip_Clock_GetBaseClocktHz>:
{
1a001a46:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001a48:	f7ff ffea 	bl	1a001a20 <Chip_Clock_GetBaseClock>
1a001a4c:	f7ff fed8 	bl	1a001800 <Chip_Clock_GetClockInputHz>
}
1a001a50:	bd08      	pop	{r3, pc}
1a001a52:	Address 0x000000001a001a52 is out of bounds.


1a001a54 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001a54:	b971      	cbnz	r1, 1a001a74 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001a56:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001a58:	b10a      	cbz	r2, 1a001a5e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001a5a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001a5e:	2b02      	cmp	r3, #2
1a001a60:	d00a      	beq.n	1a001a78 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001a62:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001a66:	d30a      	bcc.n	1a001a7e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001a68:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001a6c:	4b06      	ldr	r3, [pc, #24]	; (1a001a88 <Chip_Clock_EnableOpts+0x34>)
1a001a6e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001a72:	4770      	bx	lr
		reg |= (1 << 1);
1a001a74:	2103      	movs	r1, #3
1a001a76:	e7ef      	b.n	1a001a58 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001a78:	f041 0120 	orr.w	r1, r1, #32
1a001a7c:	e7f1      	b.n	1a001a62 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001a7e:	3020      	adds	r0, #32
1a001a80:	4b02      	ldr	r3, [pc, #8]	; (1a001a8c <Chip_Clock_EnableOpts+0x38>)
1a001a82:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001a86:	4770      	bx	lr
1a001a88:	40052000 	.word	0x40052000
1a001a8c:	40051000 	.word	0x40051000

1a001a90 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001a90:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001a94:	d309      	bcc.n	1a001aaa <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001a96:	4a09      	ldr	r2, [pc, #36]	; (1a001abc <Chip_Clock_Enable+0x2c>)
1a001a98:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001a9c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001aa0:	f043 0301 	orr.w	r3, r3, #1
1a001aa4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001aa8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001aaa:	4a05      	ldr	r2, [pc, #20]	; (1a001ac0 <Chip_Clock_Enable+0x30>)
1a001aac:	3020      	adds	r0, #32
1a001aae:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001ab2:	f043 0301 	orr.w	r3, r3, #1
1a001ab6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001aba:	4770      	bx	lr
1a001abc:	40052000 	.word	0x40052000
1a001ac0:	40051000 	.word	0x40051000

1a001ac4 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a001ac4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ac8:	d309      	bcc.n	1a001ade <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a001aca:	4a09      	ldr	r2, [pc, #36]	; (1a001af0 <Chip_Clock_Disable+0x2c>)
1a001acc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001ad0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001ad4:	f023 0301 	bic.w	r3, r3, #1
1a001ad8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001adc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a001ade:	4a05      	ldr	r2, [pc, #20]	; (1a001af4 <Chip_Clock_Disable+0x30>)
1a001ae0:	3020      	adds	r0, #32
1a001ae2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001ae6:	f023 0301 	bic.w	r3, r3, #1
1a001aea:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001aee:	4770      	bx	lr
1a001af0:	40052000 	.word	0x40052000
1a001af4:	40051000 	.word	0x40051000

1a001af8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001af8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001afa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001afe:	d309      	bcc.n	1a001b14 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001b00:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001b04:	4a0d      	ldr	r2, [pc, #52]	; (1a001b3c <Chip_Clock_GetRate+0x44>)
1a001b06:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001b0a:	f014 0f01 	tst.w	r4, #1
1a001b0e:	d107      	bne.n	1a001b20 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001b10:	2000      	movs	r0, #0
	}

	return rate;
}
1a001b12:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001b14:	f100 0320 	add.w	r3, r0, #32
1a001b18:	4a09      	ldr	r2, [pc, #36]	; (1a001b40 <Chip_Clock_GetRate+0x48>)
1a001b1a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001b1e:	e7f4      	b.n	1a001b0a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001b20:	f7ff fe06 	bl	1a001730 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001b24:	f7ff ff8f 	bl	1a001a46 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001b28:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001b2c:	d103      	bne.n	1a001b36 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001b2e:	2301      	movs	r3, #1
		rate = rate / div;
1a001b30:	fbb0 f0f3 	udiv	r0, r0, r3
1a001b34:	e7ed      	b.n	1a001b12 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001b36:	2302      	movs	r3, #2
1a001b38:	e7fa      	b.n	1a001b30 <Chip_Clock_GetRate+0x38>
1a001b3a:	bf00      	nop
1a001b3c:	40052000 	.word	0x40052000
1a001b40:	40051000 	.word	0x40051000

1a001b44 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001b44:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a001b46:	4b0f      	ldr	r3, [pc, #60]	; (1a001b84 <fpuInit+0x40>)
1a001b48:	681b      	ldr	r3, [r3, #0]
1a001b4a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a001b4c:	4b0e      	ldr	r3, [pc, #56]	; (1a001b88 <fpuInit+0x44>)
1a001b4e:	681b      	ldr	r3, [r3, #0]
1a001b50:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001b52:	9a02      	ldr	r2, [sp, #8]
1a001b54:	4b0d      	ldr	r3, [pc, #52]	; (1a001b8c <fpuInit+0x48>)
1a001b56:	429a      	cmp	r2, r3
1a001b58:	d00c      	beq.n	1a001b74 <fpuInit+0x30>
1a001b5a:	2300      	movs	r3, #0

	if (vfpPresent) {
1a001b5c:	b143      	cbz	r3, 1a001b70 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a001b5e:	4a0c      	ldr	r2, [pc, #48]	; (1a001b90 <fpuInit+0x4c>)
1a001b60:	6813      	ldr	r3, [r2, #0]
1a001b62:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a001b64:	9b03      	ldr	r3, [sp, #12]
1a001b66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001b6a:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a001b6c:	9b03      	ldr	r3, [sp, #12]
1a001b6e:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a001b70:	b004      	add	sp, #16
1a001b72:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001b74:	9a01      	ldr	r2, [sp, #4]
1a001b76:	4b07      	ldr	r3, [pc, #28]	; (1a001b94 <fpuInit+0x50>)
1a001b78:	429a      	cmp	r2, r3
1a001b7a:	d001      	beq.n	1a001b80 <fpuInit+0x3c>
1a001b7c:	2300      	movs	r3, #0
1a001b7e:	e7ed      	b.n	1a001b5c <fpuInit+0x18>
1a001b80:	2301      	movs	r3, #1
1a001b82:	e7eb      	b.n	1a001b5c <fpuInit+0x18>
1a001b84:	e000ef40 	.word	0xe000ef40
1a001b88:	e000ef44 	.word	0xe000ef44
1a001b8c:	10110021 	.word	0x10110021
1a001b90:	e000ed88 	.word	0xe000ed88
1a001b94:	11000011 	.word	0x11000011

1a001b98 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001b98:	4770      	bx	lr
1a001b9a:	Address 0x000000001a001b9a is out of bounds.


1a001b9c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001b9c:	b570      	push	{r4, r5, r6, lr}
1a001b9e:	b08a      	sub	sp, #40	; 0x28
1a001ba0:	4605      	mov	r5, r0
1a001ba2:	460e      	mov	r6, r1
1a001ba4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001ba6:	f242 7310 	movw	r3, #10000	; 0x2710
1a001baa:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001bac:	2806      	cmp	r0, #6
1a001bae:	d018      	beq.n	1a001be2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001bb0:	2300      	movs	r3, #0
1a001bb2:	2201      	movs	r2, #1
1a001bb4:	4629      	mov	r1, r5
1a001bb6:	2004      	movs	r0, #4
1a001bb8:	f7ff ff06 	bl	1a0019c8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001bbc:	4a4a      	ldr	r2, [pc, #296]	; (1a001ce8 <Chip_SetupCoreClock+0x14c>)
1a001bbe:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001bc0:	f043 0301 	orr.w	r3, r3, #1
1a001bc4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001bc6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001bca:	a901      	add	r1, sp, #4
1a001bcc:	4630      	mov	r0, r6
1a001bce:	f7ff fe73 	bl	1a0018b8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001bd2:	4b46      	ldr	r3, [pc, #280]	; (1a001cec <Chip_SetupCoreClock+0x150>)
1a001bd4:	429e      	cmp	r6, r3
1a001bd6:	d916      	bls.n	1a001c06 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001bd8:	9b01      	ldr	r3, [sp, #4]
1a001bda:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001bde:	d003      	beq.n	1a001be8 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001be0:	e7fe      	b.n	1a001be0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001be2:	f7ff fdcb 	bl	1a00177c <Chip_Clock_EnableCrystal>
1a001be6:	e7e3      	b.n	1a001bb0 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001be8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001bec:	d005      	beq.n	1a001bfa <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001bf2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001bf4:	2500      	movs	r5, #0
			direct = 1;
1a001bf6:	2601      	movs	r6, #1
1a001bf8:	e007      	b.n	1a001c0a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001bfa:	9b04      	ldr	r3, [sp, #16]
1a001bfc:	3301      	adds	r3, #1
1a001bfe:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001c00:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001c02:	2600      	movs	r6, #0
1a001c04:	e001      	b.n	1a001c0a <Chip_SetupCoreClock+0x6e>
1a001c06:	2500      	movs	r5, #0
1a001c08:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001c0a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001c0e:	9b01      	ldr	r3, [sp, #4]
1a001c10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001c14:	9a05      	ldr	r2, [sp, #20]
1a001c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001c1a:	9a03      	ldr	r2, [sp, #12]
1a001c1c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001c20:	9a04      	ldr	r2, [sp, #16]
1a001c22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001c26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001c2a:	4a2f      	ldr	r2, [pc, #188]	; (1a001ce8 <Chip_SetupCoreClock+0x14c>)
1a001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001c2e:	4b2e      	ldr	r3, [pc, #184]	; (1a001ce8 <Chip_SetupCoreClock+0x14c>)
1a001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001c32:	f013 0f01 	tst.w	r3, #1
1a001c36:	d0fa      	beq.n	1a001c2e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001c38:	2300      	movs	r3, #0
1a001c3a:	2201      	movs	r2, #1
1a001c3c:	2109      	movs	r1, #9
1a001c3e:	2004      	movs	r0, #4
1a001c40:	f7ff fec2 	bl	1a0019c8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001c44:	b306      	cbz	r6, 1a001c88 <Chip_SetupCoreClock+0xec>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001c46:	f242 7310 	movw	r3, #10000	; 0x2710
1a001c4a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001c4e:	1e5a      	subs	r2, r3, #1
1a001c50:	9209      	str	r2, [sp, #36]	; 0x24
1a001c52:	2b00      	cmp	r3, #0
1a001c54:	d1fa      	bne.n	1a001c4c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001c56:	9b01      	ldr	r3, [sp, #4]
1a001c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001c5c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001c5e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001c62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001c66:	9a05      	ldr	r2, [sp, #20]
1a001c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001c6c:	9a03      	ldr	r2, [sp, #12]
1a001c6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001c72:	9a04      	ldr	r2, [sp, #16]
1a001c74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001c7c:	4a1a      	ldr	r2, [pc, #104]	; (1a001ce8 <Chip_SetupCoreClock+0x14c>)
1a001c7e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001c80:	2c00      	cmp	r4, #0
1a001c82:	d12e      	bne.n	1a001ce2 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001c84:	b00a      	add	sp, #40	; 0x28
1a001c86:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001c88:	2d00      	cmp	r5, #0
1a001c8a:	d0f9      	beq.n	1a001c80 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001c8c:	f242 7310 	movw	r3, #10000	; 0x2710
1a001c90:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001c94:	1e5a      	subs	r2, r3, #1
1a001c96:	9209      	str	r2, [sp, #36]	; 0x24
1a001c98:	2b00      	cmp	r3, #0
1a001c9a:	d1fa      	bne.n	1a001c92 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001c9c:	9b04      	ldr	r3, [sp, #16]
1a001c9e:	1e5a      	subs	r2, r3, #1
1a001ca0:	9204      	str	r2, [sp, #16]
1a001ca2:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001ca6:	9b01      	ldr	r3, [sp, #4]
1a001ca8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001cac:	9905      	ldr	r1, [sp, #20]
1a001cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001cb2:	9903      	ldr	r1, [sp, #12]
1a001cb4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001cb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001cc0:	4a09      	ldr	r2, [pc, #36]	; (1a001ce8 <Chip_SetupCoreClock+0x14c>)
1a001cc2:	6453      	str	r3, [r2, #68]	; 0x44
1a001cc4:	e7dc      	b.n	1a001c80 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001cc6:	480a      	ldr	r0, [pc, #40]	; (1a001cf0 <Chip_SetupCoreClock+0x154>)
1a001cc8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001ccc:	78cb      	ldrb	r3, [r1, #3]
1a001cce:	788a      	ldrb	r2, [r1, #2]
1a001cd0:	7849      	ldrb	r1, [r1, #1]
1a001cd2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001cd6:	f7ff fe77 	bl	1a0019c8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001cda:	3401      	adds	r4, #1
1a001cdc:	2c11      	cmp	r4, #17
1a001cde:	d9f2      	bls.n	1a001cc6 <Chip_SetupCoreClock+0x12a>
1a001ce0:	e7d0      	b.n	1a001c84 <Chip_SetupCoreClock+0xe8>
1a001ce2:	2400      	movs	r4, #0
1a001ce4:	e7fa      	b.n	1a001cdc <Chip_SetupCoreClock+0x140>
1a001ce6:	bf00      	nop
1a001ce8:	40050000 	.word	0x40050000
1a001cec:	068e7780 	.word	0x068e7780
1a001cf0:	1a0024b8 	.word	0x1a0024b8

1a001cf4 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001cf4:	4b03      	ldr	r3, [pc, #12]	; (1a001d04 <Chip_SSP_GetClockIndex+0x10>)
1a001cf6:	4298      	cmp	r0, r3
1a001cf8:	d001      	beq.n	1a001cfe <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001cfa:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001cfc:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001cfe:	20a5      	movs	r0, #165	; 0xa5
1a001d00:	4770      	bx	lr
1a001d02:	bf00      	nop
1a001d04:	400c5000 	.word	0x400c5000

1a001d08 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001d08:	4b04      	ldr	r3, [pc, #16]	; (1a001d1c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001d0a:	4298      	cmp	r0, r3
1a001d0c:	d002      	beq.n	1a001d14 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001d0e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001d12:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001d14:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001d18:	4770      	bx	lr
1a001d1a:	bf00      	nop
1a001d1c:	400c5000 	.word	0x400c5000

1a001d20 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001d20:	6803      	ldr	r3, [r0, #0]
1a001d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001d26:	0209      	lsls	r1, r1, #8
1a001d28:	b289      	uxth	r1, r1
1a001d2a:	4319      	orrs	r1, r3
1a001d2c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001d2e:	6102      	str	r2, [r0, #16]
}
1a001d30:	4770      	bx	lr

1a001d32 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001d32:	b570      	push	{r4, r5, r6, lr}
1a001d34:	4606      	mov	r6, r0
1a001d36:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001d38:	f7ff ffe6 	bl	1a001d08 <Chip_SSP_GetPeriphClockIndex>
1a001d3c:	f7ff fedc 	bl	1a001af8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001d40:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001d46:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001d48:	e000      	b.n	1a001d4c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001d4a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001d4c:	42ab      	cmp	r3, r5
1a001d4e:	d90b      	bls.n	1a001d68 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001d50:	1c4c      	adds	r4, r1, #1
1a001d52:	fb02 f304 	mul.w	r3, r2, r4
1a001d56:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001d5a:	429d      	cmp	r5, r3
1a001d5c:	d2f6      	bcs.n	1a001d4c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001d5e:	2cff      	cmp	r4, #255	; 0xff
1a001d60:	d9f3      	bls.n	1a001d4a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001d62:	3202      	adds	r2, #2
				cr0_div = 0;
1a001d64:	2100      	movs	r1, #0
1a001d66:	e7f1      	b.n	1a001d4c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001d68:	4630      	mov	r0, r6
1a001d6a:	f7ff ffd9 	bl	1a001d20 <Chip_SSP_SetClockRate>
}
1a001d6e:	bd70      	pop	{r4, r5, r6, pc}

1a001d70 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001d70:	b510      	push	{r4, lr}
1a001d72:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001d74:	f7ff ffbe 	bl	1a001cf4 <Chip_SSP_GetClockIndex>
1a001d78:	f7ff fe8a 	bl	1a001a90 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001d7c:	4620      	mov	r0, r4
1a001d7e:	f7ff ffc3 	bl	1a001d08 <Chip_SSP_GetPeriphClockIndex>
1a001d82:	f7ff fe85 	bl	1a001a90 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001d86:	6863      	ldr	r3, [r4, #4]
1a001d88:	f023 0304 	bic.w	r3, r3, #4
1a001d8c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001d8e:	6823      	ldr	r3, [r4, #0]
1a001d90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001d94:	f043 0307 	orr.w	r3, r3, #7
1a001d98:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001d9a:	4902      	ldr	r1, [pc, #8]	; (1a001da4 <Chip_SSP_Init+0x34>)
1a001d9c:	4620      	mov	r0, r4
1a001d9e:	f7ff ffc8 	bl	1a001d32 <Chip_SSP_SetBitRate>
}
1a001da2:	bd10      	pop	{r4, pc}
1a001da4:	000186a0 	.word	0x000186a0

1a001da8 <ResetISR>:
void ResetISR(void) {
1a001da8:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a001daa:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001dac:	4b18      	ldr	r3, [pc, #96]	; (1a001e10 <ResetISR+0x68>)
1a001dae:	4a19      	ldr	r2, [pc, #100]	; (1a001e14 <ResetISR+0x6c>)
1a001db0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001db2:	3304      	adds	r3, #4
1a001db4:	4a18      	ldr	r2, [pc, #96]	; (1a001e18 <ResetISR+0x70>)
1a001db6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001db8:	2300      	movs	r3, #0
1a001dba:	e005      	b.n	1a001dc8 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001dbc:	4a17      	ldr	r2, [pc, #92]	; (1a001e1c <ResetISR+0x74>)
1a001dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001dc6:	3301      	adds	r3, #1
1a001dc8:	2b07      	cmp	r3, #7
1a001dca:	d9f7      	bls.n	1a001dbc <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a001dcc:	b662      	cpsie	i
    SystemInit();
1a001dce:	f7ff f977 	bl	1a0010c0 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a001dd2:	4b13      	ldr	r3, [pc, #76]	; (1a001e20 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001dd4:	e007      	b.n	1a001de6 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a001dd6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001dda:	689a      	ldr	r2, [r3, #8]
1a001ddc:	6859      	ldr	r1, [r3, #4]
1a001dde:	6818      	ldr	r0, [r3, #0]
1a001de0:	f7fe f9d9 	bl	1a000196 <data_init>
        SectionLen = *SectionTableAddr++;
1a001de4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001de6:	4a0f      	ldr	r2, [pc, #60]	; (1a001e24 <ResetISR+0x7c>)
1a001de8:	4293      	cmp	r3, r2
1a001dea:	d3f4      	bcc.n	1a001dd6 <ResetISR+0x2e>
1a001dec:	e006      	b.n	1a001dfc <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a001dee:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001df0:	6859      	ldr	r1, [r3, #4]
1a001df2:	f854 0b08 	ldr.w	r0, [r4], #8
1a001df6:	f7fe f9dd 	bl	1a0001b4 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001dfa:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001dfc:	4a0a      	ldr	r2, [pc, #40]	; (1a001e28 <ResetISR+0x80>)
1a001dfe:	4293      	cmp	r3, r2
1a001e00:	d3f5      	bcc.n	1a001dee <ResetISR+0x46>
    __libc_init_array();
1a001e02:	f000 f997 	bl	1a002134 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001e06:	f7ff f93d 	bl	1a001084 <Board_Init>
    main();
1a001e0a:	f7fe fa9f 	bl	1a00034c <main>
        ;
1a001e0e:	e7fe      	b.n	1a001e0e <ResetISR+0x66>
1a001e10:	40053100 	.word	0x40053100
1a001e14:	10df1000 	.word	0x10df1000
1a001e18:	01dff7ff 	.word	0x01dff7ff
1a001e1c:	e000e280 	.word	0xe000e280
1a001e20:	1a000114 	.word	0x1a000114
1a001e24:	1a000150 	.word	0x1a000150
1a001e28:	1a000178 	.word	0x1a000178

1a001e2c <_init>:
void _init(void) {}
1a001e2c:	4770      	bx	lr
1a001e2e:	Address 0x000000001a001e2e is out of bounds.


1a001e30 <__aeabi_uldivmod>:
1a001e30:	b953      	cbnz	r3, 1a001e48 <__aeabi_uldivmod+0x18>
1a001e32:	b94a      	cbnz	r2, 1a001e48 <__aeabi_uldivmod+0x18>
1a001e34:	2900      	cmp	r1, #0
1a001e36:	bf08      	it	eq
1a001e38:	2800      	cmpeq	r0, #0
1a001e3a:	bf1c      	itt	ne
1a001e3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001e40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001e44:	f000 b974 	b.w	1a002130 <__aeabi_idiv0>
1a001e48:	f1ad 0c08 	sub.w	ip, sp, #8
1a001e4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001e50:	f000 f806 	bl	1a001e60 <__udivmoddi4>
1a001e54:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001e5c:	b004      	add	sp, #16
1a001e5e:	4770      	bx	lr

1a001e60 <__udivmoddi4>:
1a001e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001e64:	9e08      	ldr	r6, [sp, #32]
1a001e66:	4604      	mov	r4, r0
1a001e68:	4688      	mov	r8, r1
1a001e6a:	2b00      	cmp	r3, #0
1a001e6c:	f040 8085 	bne.w	1a001f7a <__udivmoddi4+0x11a>
1a001e70:	428a      	cmp	r2, r1
1a001e72:	4615      	mov	r5, r2
1a001e74:	d948      	bls.n	1a001f08 <__udivmoddi4+0xa8>
1a001e76:	fab2 f282 	clz	r2, r2
1a001e7a:	b14a      	cbz	r2, 1a001e90 <__udivmoddi4+0x30>
1a001e7c:	f1c2 0720 	rsb	r7, r2, #32
1a001e80:	fa01 f302 	lsl.w	r3, r1, r2
1a001e84:	fa20 f707 	lsr.w	r7, r0, r7
1a001e88:	4095      	lsls	r5, r2
1a001e8a:	ea47 0803 	orr.w	r8, r7, r3
1a001e8e:	4094      	lsls	r4, r2
1a001e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e94:	0c23      	lsrs	r3, r4, #16
1a001e96:	fbb8 f7fe 	udiv	r7, r8, lr
1a001e9a:	fa1f fc85 	uxth.w	ip, r5
1a001e9e:	fb0e 8817 	mls	r8, lr, r7, r8
1a001ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001ea6:	fb07 f10c 	mul.w	r1, r7, ip
1a001eaa:	4299      	cmp	r1, r3
1a001eac:	d909      	bls.n	1a001ec2 <__udivmoddi4+0x62>
1a001eae:	18eb      	adds	r3, r5, r3
1a001eb0:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001eb4:	f080 80e3 	bcs.w	1a00207e <__udivmoddi4+0x21e>
1a001eb8:	4299      	cmp	r1, r3
1a001eba:	f240 80e0 	bls.w	1a00207e <__udivmoddi4+0x21e>
1a001ebe:	3f02      	subs	r7, #2
1a001ec0:	442b      	add	r3, r5
1a001ec2:	1a5b      	subs	r3, r3, r1
1a001ec4:	b2a4      	uxth	r4, r4
1a001ec6:	fbb3 f0fe 	udiv	r0, r3, lr
1a001eca:	fb0e 3310 	mls	r3, lr, r0, r3
1a001ece:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001ed2:	fb00 fc0c 	mul.w	ip, r0, ip
1a001ed6:	45a4      	cmp	ip, r4
1a001ed8:	d909      	bls.n	1a001eee <__udivmoddi4+0x8e>
1a001eda:	192c      	adds	r4, r5, r4
1a001edc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001ee0:	f080 80cb 	bcs.w	1a00207a <__udivmoddi4+0x21a>
1a001ee4:	45a4      	cmp	ip, r4
1a001ee6:	f240 80c8 	bls.w	1a00207a <__udivmoddi4+0x21a>
1a001eea:	3802      	subs	r0, #2
1a001eec:	442c      	add	r4, r5
1a001eee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001ef2:	eba4 040c 	sub.w	r4, r4, ip
1a001ef6:	2700      	movs	r7, #0
1a001ef8:	b11e      	cbz	r6, 1a001f02 <__udivmoddi4+0xa2>
1a001efa:	40d4      	lsrs	r4, r2
1a001efc:	2300      	movs	r3, #0
1a001efe:	e9c6 4300 	strd	r4, r3, [r6]
1a001f02:	4639      	mov	r1, r7
1a001f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f08:	2a00      	cmp	r2, #0
1a001f0a:	d053      	beq.n	1a001fb4 <__udivmoddi4+0x154>
1a001f0c:	fab2 f282 	clz	r2, r2
1a001f10:	2a00      	cmp	r2, #0
1a001f12:	f040 80b6 	bne.w	1a002082 <__udivmoddi4+0x222>
1a001f16:	1b49      	subs	r1, r1, r5
1a001f18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001f1c:	fa1f f885 	uxth.w	r8, r5
1a001f20:	2701      	movs	r7, #1
1a001f22:	fbb1 fcfe 	udiv	ip, r1, lr
1a001f26:	0c23      	lsrs	r3, r4, #16
1a001f28:	fb0e 111c 	mls	r1, lr, ip, r1
1a001f2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001f30:	fb08 f10c 	mul.w	r1, r8, ip
1a001f34:	4299      	cmp	r1, r3
1a001f36:	d907      	bls.n	1a001f48 <__udivmoddi4+0xe8>
1a001f38:	18eb      	adds	r3, r5, r3
1a001f3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001f3e:	d202      	bcs.n	1a001f46 <__udivmoddi4+0xe6>
1a001f40:	4299      	cmp	r1, r3
1a001f42:	f200 80ec 	bhi.w	1a00211e <__udivmoddi4+0x2be>
1a001f46:	4684      	mov	ip, r0
1a001f48:	1a59      	subs	r1, r3, r1
1a001f4a:	b2a3      	uxth	r3, r4
1a001f4c:	fbb1 f0fe 	udiv	r0, r1, lr
1a001f50:	fb0e 1410 	mls	r4, lr, r0, r1
1a001f54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001f58:	fb08 f800 	mul.w	r8, r8, r0
1a001f5c:	45a0      	cmp	r8, r4
1a001f5e:	d907      	bls.n	1a001f70 <__udivmoddi4+0x110>
1a001f60:	192c      	adds	r4, r5, r4
1a001f62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001f66:	d202      	bcs.n	1a001f6e <__udivmoddi4+0x10e>
1a001f68:	45a0      	cmp	r8, r4
1a001f6a:	f200 80dc 	bhi.w	1a002126 <__udivmoddi4+0x2c6>
1a001f6e:	4618      	mov	r0, r3
1a001f70:	eba4 0408 	sub.w	r4, r4, r8
1a001f74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001f78:	e7be      	b.n	1a001ef8 <__udivmoddi4+0x98>
1a001f7a:	428b      	cmp	r3, r1
1a001f7c:	d908      	bls.n	1a001f90 <__udivmoddi4+0x130>
1a001f7e:	2e00      	cmp	r6, #0
1a001f80:	d078      	beq.n	1a002074 <__udivmoddi4+0x214>
1a001f82:	2700      	movs	r7, #0
1a001f84:	e9c6 0100 	strd	r0, r1, [r6]
1a001f88:	4638      	mov	r0, r7
1a001f8a:	4639      	mov	r1, r7
1a001f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f90:	fab3 f783 	clz	r7, r3
1a001f94:	b97f      	cbnz	r7, 1a001fb6 <__udivmoddi4+0x156>
1a001f96:	428b      	cmp	r3, r1
1a001f98:	d302      	bcc.n	1a001fa0 <__udivmoddi4+0x140>
1a001f9a:	4282      	cmp	r2, r0
1a001f9c:	f200 80bd 	bhi.w	1a00211a <__udivmoddi4+0x2ba>
1a001fa0:	1a84      	subs	r4, r0, r2
1a001fa2:	eb61 0303 	sbc.w	r3, r1, r3
1a001fa6:	2001      	movs	r0, #1
1a001fa8:	4698      	mov	r8, r3
1a001faa:	2e00      	cmp	r6, #0
1a001fac:	d0a9      	beq.n	1a001f02 <__udivmoddi4+0xa2>
1a001fae:	e9c6 4800 	strd	r4, r8, [r6]
1a001fb2:	e7a6      	b.n	1a001f02 <__udivmoddi4+0xa2>
1a001fb4:	deff      	udf	#255	; 0xff
1a001fb6:	f1c7 0520 	rsb	r5, r7, #32
1a001fba:	40bb      	lsls	r3, r7
1a001fbc:	fa22 fc05 	lsr.w	ip, r2, r5
1a001fc0:	ea4c 0c03 	orr.w	ip, ip, r3
1a001fc4:	fa01 f407 	lsl.w	r4, r1, r7
1a001fc8:	fa20 f805 	lsr.w	r8, r0, r5
1a001fcc:	fa21 f305 	lsr.w	r3, r1, r5
1a001fd0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001fd4:	ea48 0404 	orr.w	r4, r8, r4
1a001fd8:	fbb3 f9fe 	udiv	r9, r3, lr
1a001fdc:	0c21      	lsrs	r1, r4, #16
1a001fde:	fb0e 3319 	mls	r3, lr, r9, r3
1a001fe2:	fa1f f88c 	uxth.w	r8, ip
1a001fe6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001fea:	fb09 fa08 	mul.w	sl, r9, r8
1a001fee:	459a      	cmp	sl, r3
1a001ff0:	fa02 f207 	lsl.w	r2, r2, r7
1a001ff4:	fa00 f107 	lsl.w	r1, r0, r7
1a001ff8:	d90b      	bls.n	1a002012 <__udivmoddi4+0x1b2>
1a001ffa:	eb1c 0303 	adds.w	r3, ip, r3
1a001ffe:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002002:	f080 8088 	bcs.w	1a002116 <__udivmoddi4+0x2b6>
1a002006:	459a      	cmp	sl, r3
1a002008:	f240 8085 	bls.w	1a002116 <__udivmoddi4+0x2b6>
1a00200c:	f1a9 0902 	sub.w	r9, r9, #2
1a002010:	4463      	add	r3, ip
1a002012:	eba3 030a 	sub.w	r3, r3, sl
1a002016:	b2a4      	uxth	r4, r4
1a002018:	fbb3 f0fe 	udiv	r0, r3, lr
1a00201c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002020:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002024:	fb00 f808 	mul.w	r8, r0, r8
1a002028:	45a0      	cmp	r8, r4
1a00202a:	d908      	bls.n	1a00203e <__udivmoddi4+0x1de>
1a00202c:	eb1c 0404 	adds.w	r4, ip, r4
1a002030:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002034:	d26b      	bcs.n	1a00210e <__udivmoddi4+0x2ae>
1a002036:	45a0      	cmp	r8, r4
1a002038:	d969      	bls.n	1a00210e <__udivmoddi4+0x2ae>
1a00203a:	3802      	subs	r0, #2
1a00203c:	4464      	add	r4, ip
1a00203e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002042:	eba4 0408 	sub.w	r4, r4, r8
1a002046:	fba0 8902 	umull	r8, r9, r0, r2
1a00204a:	454c      	cmp	r4, r9
1a00204c:	46c6      	mov	lr, r8
1a00204e:	464b      	mov	r3, r9
1a002050:	d354      	bcc.n	1a0020fc <__udivmoddi4+0x29c>
1a002052:	d051      	beq.n	1a0020f8 <__udivmoddi4+0x298>
1a002054:	2e00      	cmp	r6, #0
1a002056:	d069      	beq.n	1a00212c <__udivmoddi4+0x2cc>
1a002058:	ebb1 020e 	subs.w	r2, r1, lr
1a00205c:	eb64 0403 	sbc.w	r4, r4, r3
1a002060:	fa04 f505 	lsl.w	r5, r4, r5
1a002064:	fa22 f307 	lsr.w	r3, r2, r7
1a002068:	40fc      	lsrs	r4, r7
1a00206a:	431d      	orrs	r5, r3
1a00206c:	e9c6 5400 	strd	r5, r4, [r6]
1a002070:	2700      	movs	r7, #0
1a002072:	e746      	b.n	1a001f02 <__udivmoddi4+0xa2>
1a002074:	4637      	mov	r7, r6
1a002076:	4630      	mov	r0, r6
1a002078:	e743      	b.n	1a001f02 <__udivmoddi4+0xa2>
1a00207a:	4618      	mov	r0, r3
1a00207c:	e737      	b.n	1a001eee <__udivmoddi4+0x8e>
1a00207e:	4607      	mov	r7, r0
1a002080:	e71f      	b.n	1a001ec2 <__udivmoddi4+0x62>
1a002082:	f1c2 0320 	rsb	r3, r2, #32
1a002086:	fa20 f703 	lsr.w	r7, r0, r3
1a00208a:	4095      	lsls	r5, r2
1a00208c:	fa01 f002 	lsl.w	r0, r1, r2
1a002090:	fa21 f303 	lsr.w	r3, r1, r3
1a002094:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002098:	4338      	orrs	r0, r7
1a00209a:	0c01      	lsrs	r1, r0, #16
1a00209c:	fbb3 f7fe 	udiv	r7, r3, lr
1a0020a0:	fa1f f885 	uxth.w	r8, r5
1a0020a4:	fb0e 3317 	mls	r3, lr, r7, r3
1a0020a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0020ac:	fb07 f308 	mul.w	r3, r7, r8
1a0020b0:	428b      	cmp	r3, r1
1a0020b2:	fa04 f402 	lsl.w	r4, r4, r2
1a0020b6:	d907      	bls.n	1a0020c8 <__udivmoddi4+0x268>
1a0020b8:	1869      	adds	r1, r5, r1
1a0020ba:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0020be:	d228      	bcs.n	1a002112 <__udivmoddi4+0x2b2>
1a0020c0:	428b      	cmp	r3, r1
1a0020c2:	d926      	bls.n	1a002112 <__udivmoddi4+0x2b2>
1a0020c4:	3f02      	subs	r7, #2
1a0020c6:	4429      	add	r1, r5
1a0020c8:	1acb      	subs	r3, r1, r3
1a0020ca:	b281      	uxth	r1, r0
1a0020cc:	fbb3 f0fe 	udiv	r0, r3, lr
1a0020d0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0020d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0020d8:	fb00 f308 	mul.w	r3, r0, r8
1a0020dc:	428b      	cmp	r3, r1
1a0020de:	d907      	bls.n	1a0020f0 <__udivmoddi4+0x290>
1a0020e0:	1869      	adds	r1, r5, r1
1a0020e2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0020e6:	d210      	bcs.n	1a00210a <__udivmoddi4+0x2aa>
1a0020e8:	428b      	cmp	r3, r1
1a0020ea:	d90e      	bls.n	1a00210a <__udivmoddi4+0x2aa>
1a0020ec:	3802      	subs	r0, #2
1a0020ee:	4429      	add	r1, r5
1a0020f0:	1ac9      	subs	r1, r1, r3
1a0020f2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0020f6:	e714      	b.n	1a001f22 <__udivmoddi4+0xc2>
1a0020f8:	4541      	cmp	r1, r8
1a0020fa:	d2ab      	bcs.n	1a002054 <__udivmoddi4+0x1f4>
1a0020fc:	ebb8 0e02 	subs.w	lr, r8, r2
1a002100:	eb69 020c 	sbc.w	r2, r9, ip
1a002104:	3801      	subs	r0, #1
1a002106:	4613      	mov	r3, r2
1a002108:	e7a4      	b.n	1a002054 <__udivmoddi4+0x1f4>
1a00210a:	4660      	mov	r0, ip
1a00210c:	e7f0      	b.n	1a0020f0 <__udivmoddi4+0x290>
1a00210e:	4618      	mov	r0, r3
1a002110:	e795      	b.n	1a00203e <__udivmoddi4+0x1de>
1a002112:	4667      	mov	r7, ip
1a002114:	e7d8      	b.n	1a0020c8 <__udivmoddi4+0x268>
1a002116:	4681      	mov	r9, r0
1a002118:	e77b      	b.n	1a002012 <__udivmoddi4+0x1b2>
1a00211a:	4638      	mov	r0, r7
1a00211c:	e745      	b.n	1a001faa <__udivmoddi4+0x14a>
1a00211e:	f1ac 0c02 	sub.w	ip, ip, #2
1a002122:	442b      	add	r3, r5
1a002124:	e710      	b.n	1a001f48 <__udivmoddi4+0xe8>
1a002126:	3802      	subs	r0, #2
1a002128:	442c      	add	r4, r5
1a00212a:	e721      	b.n	1a001f70 <__udivmoddi4+0x110>
1a00212c:	4637      	mov	r7, r6
1a00212e:	e6e8      	b.n	1a001f02 <__udivmoddi4+0xa2>

1a002130 <__aeabi_idiv0>:
1a002130:	4770      	bx	lr
1a002132:	bf00      	nop

1a002134 <__libc_init_array>:
1a002134:	b570      	push	{r4, r5, r6, lr}
1a002136:	4d0d      	ldr	r5, [pc, #52]	; (1a00216c <__libc_init_array+0x38>)
1a002138:	4c0d      	ldr	r4, [pc, #52]	; (1a002170 <__libc_init_array+0x3c>)
1a00213a:	1b64      	subs	r4, r4, r5
1a00213c:	10a4      	asrs	r4, r4, #2
1a00213e:	2600      	movs	r6, #0
1a002140:	42a6      	cmp	r6, r4
1a002142:	d109      	bne.n	1a002158 <__libc_init_array+0x24>
1a002144:	4d0b      	ldr	r5, [pc, #44]	; (1a002174 <__libc_init_array+0x40>)
1a002146:	4c0c      	ldr	r4, [pc, #48]	; (1a002178 <__libc_init_array+0x44>)
1a002148:	f7ff fe70 	bl	1a001e2c <_init>
1a00214c:	1b64      	subs	r4, r4, r5
1a00214e:	10a4      	asrs	r4, r4, #2
1a002150:	2600      	movs	r6, #0
1a002152:	42a6      	cmp	r6, r4
1a002154:	d105      	bne.n	1a002162 <__libc_init_array+0x2e>
1a002156:	bd70      	pop	{r4, r5, r6, pc}
1a002158:	f855 3b04 	ldr.w	r3, [r5], #4
1a00215c:	4798      	blx	r3
1a00215e:	3601      	adds	r6, #1
1a002160:	e7ee      	b.n	1a002140 <__libc_init_array+0xc>
1a002162:	f855 3b04 	ldr.w	r3, [r5], #4
1a002166:	4798      	blx	r3
1a002168:	3601      	adds	r6, #1
1a00216a:	e7f2      	b.n	1a002152 <__libc_init_array+0x1e>
1a00216c:	1a002500 	.word	0x1a002500
1a002170:	1a002500 	.word	0x1a002500
1a002174:	1a002500 	.word	0x1a002500
1a002178:	1a002500 	.word	0x1a002500

1a00217c <memset>:
1a00217c:	4402      	add	r2, r0
1a00217e:	4603      	mov	r3, r0
1a002180:	4293      	cmp	r3, r2
1a002182:	d100      	bne.n	1a002186 <memset+0xa>
1a002184:	4770      	bx	lr
1a002186:	f803 1b01 	strb.w	r1, [r3], #1
1a00218a:	e7f9      	b.n	1a002180 <memset+0x4>
1a00218c:	ff000a0d 	.word	0xff000a0d
1a002190:	7778797a 	.word	0x7778797a
1a002194:	73747576 	.word	0x73747576
1a002198:	6f707172 	.word	0x6f707172
1a00219c:	6b6c6d6e 	.word	0x6b6c6d6e
1a0021a0:	6768696a 	.word	0x6768696a
1a0021a4:	63646566 	.word	0x63646566
1a0021a8:	38396162 	.word	0x38396162
1a0021ac:	34353637 	.word	0x34353637
1a0021b0:	30313233 	.word	0x30313233
1a0021b4:	34333231 	.word	0x34333231
1a0021b8:	38373635 	.word	0x38373635
1a0021bc:	63626139 	.word	0x63626139
1a0021c0:	67666564 	.word	0x67666564
1a0021c4:	6b6a6968 	.word	0x6b6a6968
1a0021c8:	6f6e6d6c 	.word	0x6f6e6d6c
1a0021cc:	73727170 	.word	0x73727170
1a0021d0:	77767574 	.word	0x77767574
1a0021d4:	007a7978 	.word	0x007a7978

1a0021d8 <ultrasonicSensorsIrqMap>:
1a0021d8:	ff020100                                ....

1a0021dc <gpioPinsInit>:
1a0021dc:	02000104 00050701 05010d03 04080100     ................
1a0021ec:	02020002 02000304 00000403 04070002     ................
1a0021fc:	030c0300 09050402 05040103 04030208     ................
1a00220c:	04020305 06040504 0802000c 03000b06     ................
1a00221c:	00090607 07060503 060f0504 03030004     ................
1a00222c:	02000404 00050404 06040502 04060200     ................
1a00223c:	0c050408 05040a04 0003010e 14010a00     ................
1a00224c:	010f0000 0d000012 00001101 0010010c     ................
1a00225c:	07070300 000f0300 01000001 00000000     ................
1a00226c:	000a0600 08060603 06100504 04030005     ................
1a00227c:	03000106 04090400 04010d05 010b0000     ................
1a00228c:	0200000f 00000001 00010104 02010800     ................
1a00229c:	01090000 09010006 05040002 04010200     ................
1a0022ac:	02020105 02020504 0e00000a 01000b02     ................
1a0022bc:	000c020b 00040c01 04000200 01020001     ................
1a0022cc:	02000204 00030402 03070302 070b0300     ................
1a0022dc:	0c030004 03000507 0006070d 01020e03     ................
1a0022ec:	04010504 06020006 02000504 00040405     ................
1a0022fc:	08040402 040c0504 0d050409 05040a04     ................
1a00230c:	0005010e ffff0801                       ........

1a002314 <lpcUarts>:
1a002314:	40081000 06020406 00180205 40081000     ...@...........@
1a002324:	09070509 00180706 40082000 00000000     ......... .@....
1a002334:	00190000 400c1000 07060107 001a0602     .......@........
1a002344:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002354:	02020302 001b0204                       ........

1a00235c <ExtRateIn>:
1a00235c:	00000000                                ....

1a002360 <GpioButtons>:
1a002360:	08000400 09010900                       ........

1a002368 <GpioLeds>:
1a002368:	01050005 0e000205 0c010b01              ............

1a002374 <GpioPorts>:
1a002374:	03030003 0f050403 05031005 07030603     ................
1a002384:	ffff0802                                ....

1a002388 <OscRateIn>:
1a002388:	00b71b00                                ....

1a00238c <InitClkStates>:
1a00238c:	00010308 00010307 01010f01              ............

1a002398 <pinmuxing>:
1a002398:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0023a8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0023b8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0023c8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0023d8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0023e8:	00d50301 00d50401 00160107 00560207     ..............V.
1a0023f8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002408:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a002418:	00b31201 00f01301 00b31401 00b60707     ................
1a002428:	00f20000 00b60100                       ........

1a002430 <UART_BClock>:
1a002430:	01a201c2 01620182                       ......b.

1a002438 <UART_PClock>:
1a002438:	00820081 00a200a1 08040201 0f0f0f03     ................
1a002448:	000000ff                                ....

1a00244c <periph_to_base>:
1a00244c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00245c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00246c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00247c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00248c:	01820013 00120182 01a201a2 01c20011     ................
1a00249c:	001001c2 01e201e2 0202000f 000e0202     ................
1a0024ac:	02220222 0223000d 001c0223              "."...#.#...

1a0024b8 <InitClkStates>:
1a0024b8:	00010100 00010909 0001090a 01010701     ................
1a0024c8:	00010902 00010906 0101090c 0001090d     ................
1a0024d8:	0001090e 0001090f 00010910 00010911     ................
1a0024e8:	00010912 00010913 00011114 00011119     ................
1a0024f8:	0001111a 0001111b                       ........
