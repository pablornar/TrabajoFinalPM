
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001881

Program Header:
0x70000001 off    0x000128a8 vaddr 0x1a0028a8 paddr 0x1a0028a8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000188 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000028b0 memsz 0x000028b0 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0028b0 align 2**16
         filesz 0x0000012c memsz 0x0000012c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a8  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  10000000  1a0028b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
  6 .bss          00000058  10000130  10000130  00000130  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0028a8  1a0028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  0002012c  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 17 .noinit       00000000  10000188  10000188  0002012c  2**2
                  CONTENTS
 18 .debug_info   0001c6bc  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000046aa  00000000  00000000  0003c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000856e  00000000  00000000  00040e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000009f0  00000000  00000000  00049400  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a68  00000000  00000000  00049df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000b4ce  00000000  00000000  0004a858  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00010cd5  00000000  00000000  00055d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001fe4d  00000000  00000000  000669fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  00086848  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  000868b0  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001d8c  00000000  00000000  000868e4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000130 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0028a8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000188 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a000764 l     F .text	000000bc uartProcessIRQ
10000138 l     O .bss	00000004 rxIsrCallbackUART0
1000013c l     O .bss	00000004 rxIsrCallbackUART2
10000140 l     O .bss	00000004 rxIsrCallbackUART3
10000144 l     O .bss	00000004 txIsrCallbackUART0
10000148 l     O .bss	00000004 txIsrCallbackUART2
1000014c l     O .bss	00000004 txIsrCallbackUART3
1a002658 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000000 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000380 l     F .text	00000010 clearInterrupt
1a000390 l     F .text	0000005c serveInterrupt
10000008 l     O .data	00000048 ultrasonicSensors
1a00251c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00040c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00086c l     F .text	00000002 errorOcurred
1a00086e l     F .text	00000002 doNothing
10000050 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a000a6c l     F .text	00000044 Board_LED_Init
1a000ab0 l     F .text	00000040 Board_TEC_Init
1a000af0 l     F .text	00000040 Board_GPIO_Init
1a000b30 l     F .text	00000038 Board_SPI_Init
1a000b68 l     F .text	00000024 Board_I2C_Init
1a000b8c l     F .text	00000030 Board_ADC_Init
1a0026a4 l     O .text	00000008 GpioButtons
1a0026ac l     O .text	0000000c GpioLeds
1a0026b8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 system.c
10000150 l     O .bss	00000004 heap_end.11577
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0026d0 l     O .text	0000000c InitClkStates
1a0026dc l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000090 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000e58 l     F .text	0000002c Chip_UART_GetIndex
1a002774 l     O .text	00000008 UART_BClock
1a00277c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000fb4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000fc8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001090 l     F .text	000000a0 pll_calc_divs
1a001130 l     F .text	0000010c pll_get_frac
1a00123c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0014b0 l     F .text	00000022 Chip_Clock_GetDivRate
10000154 l     O .bss	00000008 audio_usb_pll_freq
1a002790 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0027fc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0017cc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0017e0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002054 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
100000cc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a0028a8 l       .bss_RAM5	00000000 __init_array_end
1a0028a8 l       .bss_RAM5	00000000 __preinit_array_end
1a0028a8 l       .bss_RAM5	00000000 __init_array_start
1a0028a8 l       .bss_RAM5	00000000 __preinit_array_start
1a0012d4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000c60 g     F .text	00000012 _isatty_r
1a001c64 g     F .text	000000dc _puts_r
1a0008f0 g     F .text	00000044 TIMER2_IRQHandler
1a00018e  w    F .text	00000002 DebugMon_Handler
1a000c72 g     F .text	0000000a _lseek_r
1a000194  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000194  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000194  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000194  w    F .text	00000002 I2C0_IRQHandler
1000017c g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0024b6 g     F .text	00000024 __sseek
1a002104 g     F .text	00000070 __sinit
10000130 g     O .bss	00000004 callBackFuncParams
1a001d50 g     F .text	000000a4 __swbuf_r
1a000184  w    F .text	00000002 HardFault_Handler
1a0020a8 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a00106e g     F .text	0000000c Chip_ADC_SetResolution
1a0024f0 g     F .text	0000000c __malloc_unlock
1a000734 g     F .text	00000030 SysTick_Handler
1000017d g     O .bss	00000001 __lock___arc4random_mutex
1a000194  w    F .text	00000002 SDIO_IRQHandler
1a000bf4 g     F .text	0000001c Board_UARTGetChar
1a000194  w    F .text	00000002 ATIMER_IRQHandler
1a000190  w    F .text	00000002 PendSV_Handler
1a000182  w    F .text	00000002 NMI_Handler
1a0028b0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000194  w    F .text	00000002 I2C1_IRQHandler
1a000194  w    F .text	00000002 UART1_IRQHandler
1a000194  w    F .text	00000002 GPIO5_IRQHandler
1a000194  w    F .text	00000002 CAN1_IRQHandler
1a000c56 g     F .text	0000000a _fstat_r
53ff5fdc g       *ABS*	00000000 __valid_user_code_checksum
1a0028b0 g       .ARM.exidx	00000000 _etext
1a000194  w    F .text	00000002 USB1_IRQHandler
1a000194  w    F .text	00000002 I2S0_IRQHandler
1a000934 g     F .text	00000044 TIMER3_IRQHandler
1a001552 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001b4 g     F .text	00000012 bss_init
1a000194  w    F .text	00000002 SGPIO_IRQHandler
1a00209c g     F .text	0000000c _cleanup_r
1a001908 g     F .text	00000000 .hidden __aeabi_uldivmod
10000188 g       .noinit	00000000 _noinit
1a001d40 g     F .text	00000010 puts
10000178 g     O .bss	00000004 SystemCoreClock
1a000e84 g     F .text	00000054 Chip_UART_Init
1a000194  w    F .text	00000002 ADC0_IRQHandler
1a00018a  w    F .text	00000002 UsageFault_Handler
1a0015d0 g     F .text	0000004c Chip_Clock_GetRate
1a000194  w    F .text	00000002 GPIO6_IRQHandler
10000168 g     O .bss	00000008 tickCounter
1a000d64 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001938 g     F .text	000002d0 .hidden __udivmoddi4
1a000cc8 g     F .text	00000020 _sbrk_r
1a0026a0 g     O .text	00000004 ExtRateIn
1a000194  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c7c g     F .text	0000004a _read_r
1a0003f6 g     F .text	0000000a GPIO1_IRQHandler
1a000194  w    F .text	00000002 SSP0_IRQHandler
1a0028a8 g       .ARM.exidx	00000000 __exidx_start
1000017e g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1000017f g     O .bss	00000001 __lock___sinit_recursive_mutex
1a0028a4 g     O .text	00000004 _global_impure_ptr
1a001c0c g     F .text	00000048 __libc_init_array
1a000194  w    F .text	00000002 ADC1_IRQHandler
1a000c10 g     F .text	0000003c Board_Init
1a001904 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000194  w    F .text	00000002 RTC_IRQHandler
10000188 g       .bss	00000000 _ebss
1a000870 g     F .text	00000040 TIMER0_IRQHandler
1a0006b8 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000194  w    F .text	00000002 SPI_IRQHandler
1a000e20 g     F .text	00000038 Chip_I2C_SetClockRate
1a000194  w    F .text	00000002 LCD_IRQHandler
1a001288 g     F .text	0000004c Chip_Clock_EnableCrystal
10000180 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000196 g     F .text	0000001e data_init
1a0008b0 g     F .text	00000040 TIMER1_IRQHandler
1a002844 g     O .text	00000020 __sf_fake_stderr
1a000dfc g     F .text	00000024 Chip_I2C_Init
1a002240 g     F .text	00000002 __retarget_lock_release_recursive
1a000820 g     F .text	0000000a UART2_IRQHandler
1a001444 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002520 g     O .text	00000136 gpioPinsInit
1a0017f8 g     F .text	00000012 Chip_SSP_SetClockRate
1a00067e g     F .text	00000016 gpioToggle
1a000400 g     F .text	0000000a GPIO2_IRQHandler
1a0020d4 g     F .text	0000000c __sfp_lock_acquire
1a00230c g     F .text	0000009c _free_r
1a00152c g     F .text	00000026 Chip_Clock_GetBaseClock
10000130 g       .bss	00000000 _bss
1a00103c g     F .text	00000032 Chip_ADC_SetSampleRate
1a000194  w    F .text	00000002 I2S1_IRQHandler
1a00180a g     F .text	0000003e Chip_SSP_SetBitRate
1a001670 g     F .text	00000002 Chip_GPIO_Init
1a0026cc g     O .text	00000004 OscRateIn
10000188 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000194  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000c4c g     F .text	0000000a _close_r
1a000440 g     F .text	00000194 gpioInit
1a001df4 g     F .text	000000dc __swsetup_r
1a001c08  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002174 g     F .text	0000008c __sfp
1a0020f8 g     F .text	0000000c __sinit_lock_release
1a00245c g     F .text	00000022 __sread
1a000194  w    F .text	00000002 USB0_IRQHandler
1a000194  w    F .text	00000002 GPIO3_IRQHandler
1a0024e4 g     F .text	0000000c __malloc_lock
1a000be0 g     F .text	00000014 Board_UARTPutChar
1a000194  w    F .text	00000002 SCT_IRQHandler
1a001fdc g     F .text	00000078 _fflush_r
1a002864 g     O .text	00000020 __sf_fake_stdin
1a0012f0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00223e g     F .text	00000002 __retarget_lock_acquire_recursive
1a001c54 g     F .text	00000010 memset
1a000186  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000064 main
1a00223c g     F .text	00000002 __retarget_lock_init_recursive
1a000194  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00018c  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a0024da g     F .text	00000008 __sclose
1a0023a8 g     F .text	000000b4 _malloc_r
1a000194  w    F .text	00000002 GPIO7_IRQHandler
1a001560 g     F .text	0000003c Chip_Clock_EnableOpts
1a00130c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00161c g     F .text	00000054 fpuInit
1a0013c4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000d10 g     F .text	0000001c SystemInit
1a000194  w    F .text	00000002 SPIFI_IRQHandler
1a000834 g     F .text	00000038 delay
1a000194  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0005d4 g     F .text	00000056 gpioWrite
1a000ffc g     F .text	00000040 Chip_ADC_Init
1a000d2c g     F .text	00000038 Board_SetupMuxing
1a000ed8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000694 g     F .text	0000000c tickRead
1a000ce8 g     F .text	00000028 _write_r
10000170 g     O .bss	00000008 tickRateMS
1a000194  w    F .text	00000002 ETH_IRQHandler
10000134 g     O .bss	00000004 tickHookFunction
100000c8 g     O .data	00000004 _impure_ptr
1a001ed0 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000194  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000188 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001848 g     F .text	00000038 Chip_SSP_Init
1a000194  w    F .text	00000002 GINT0_IRQHandler
1a002242 g     F .text	00000048 __swhatbuf_r
1a000194  w    F .text	00000002 DAC_IRQHandler
1a000bbc g     F .text	00000024 Board_Debug_Init
1000012c g       .data	00000000 _edata
1a000ddc g     F .text	00000020 Chip_I2C_EventHandler
1a000194  w    F .text	00000002 M0SUB_IRQHandler
10000181 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001674 g     F .text	00000158 Chip_SetupCoreClock
1a00247e g     F .text	00000038 __swrite
1a0003ec g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001880 g     F .text	00000084 ResetISR
1a002200 g     F .text	0000003c _fwalk_reent
1a00107c g     F .text	00000014 SystemCoreClockUpdate
1a000194  w    F .text	00000002 DMA_IRQHandler
1a000194  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0020e0 g     F .text	0000000c __sfp_lock_release
1a002884 g     O .text	00000020 __sf_fake_stdout
1a001c08  w    F .text	00000002 .hidden __aeabi_idiv0
1a000188  w    F .text	00000002 BusFault_Handler
10000182 g     O .bss	00000001 __lock___dd_hash_mutex
1a00228c g     F .text	00000080 __smakebuf_r
10000183 g     O .bss	00000001 __lock___tz_mutex
1a00159c g     F .text	00000034 Chip_Clock_Enable
1a00082a g     F .text	0000000a UART3_IRQHandler
10000160 g     O .bss	00000004 __malloc_sbrk_start
1a000194  w    F .text	00000002 MCPWM_IRQHandler
1a000194  w    F .text	00000002 M0APP_IRQHandler
1a00062a g     F .text	00000054 gpioRead
1a000978 g     F .text	000000f4 boardInit
1000015c g     O .bss	00000004 __malloc_free_list
1a000194  w    F .text	00000002 GINT1_IRQHandler
1a0006a0 g     F .text	00000018 tickPowerSet
1a0014d4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a000364 g     F .text	0000001c cyclesCounterInit
1a000194  w    F .text	00000002 GPIO4_IRQHandler
10000184 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0020ec g     F .text	0000000c __sinit_lock_acquire
1a000dd0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 81 18 00 1a 83 01 00 1a 85 01 00 1a     ................
1a000010:	87 01 00 1a 89 01 00 1a 8b 01 00 1a dc 5f ff 53     ............._.S
	...
1a00002c:	8d 01 00 1a 8f 01 00 1a 00 00 00 00 91 01 00 1a     ................
1a00003c:	35 07 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     5...............
1a00004c:	00 00 00 00 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00005c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00006c:	95 01 00 1a 71 08 00 1a b1 08 00 1a f1 08 00 1a     ....q...........
1a00007c:	35 09 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     5...............
1a00008c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00009c:	95 01 00 1a 79 01 00 1a 95 01 00 1a 21 08 00 1a     ....y.......!...
1a0000ac:	2b 08 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     +...............
1a0000bc:	95 01 00 1a ed 03 00 1a f7 03 00 1a 01 04 00 1a     ................
1a0000cc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000dc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000ec:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a0000fc:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a00010c:	95 01 00 1a 95 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a0028b0 	.word	0x1a0028b0
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000012c 	.word	0x0000012c
1a000120:	1a0028b0 	.word	0x1a0028b0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0028b0 	.word	0x1a0028b0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0028b0 	.word	0x1a0028b0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0028b0 	.word	0x1a0028b0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000130 	.word	0x10000130
1a000154:	00000058 	.word	0x00000058
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 faf2 	bl	1a000764 <uartProcessIRQ>
}
1a000180:	bd08      	pop	{r3, pc}

1a000182 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <NMI_Handler>

1a000184 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <HardFault_Handler>

1a000186 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <MemManage_Handler>

1a000188 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>

1a00018a <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <UsageFault_Handler>

1a00018c <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>

1a00018e <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00018e:	e7fe      	b.n	1a00018e <DebugMon_Handler>

1a000190 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000192:	e7fe      	b.n	1a000192 <PendSV_Handler+0x2>

1a000194 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <ADC0_IRQHandler>

1a000196 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	2300      	movs	r3, #0
1a000198:	4293      	cmp	r3, r2
1a00019a:	d20a      	bcs.n	1a0001b2 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00019e:	f850 4b04 	ldr.w	r4, [r0], #4
1a0001a2:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a6:	3304      	adds	r3, #4
1a0001a8:	4293      	cmp	r3, r2
1a0001aa:	d3f8      	bcc.n	1a00019e <data_init+0x8>
}
1a0001ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b0:	4770      	bx	lr
1a0001b2:	4770      	bx	lr

1a0001b4 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	2300      	movs	r3, #0
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d204      	bcs.n	1a0001c4 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ba:	2200      	movs	r2, #0
1a0001bc:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	3304      	adds	r3, #4
1a0001c2:	e7f8      	b.n	1a0001b6 <bss_init+0x2>
}
1a0001c4:	4770      	bx	lr
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
#include "app.h"         // <= Su propia cabecera
#include "sapi.h"        // <= Biblioteca sAPI

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a000300:	b538      	push	{r3, r4, r5, lr}
   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar y configurar la plataforma
   boardConfig();
1a000302:	f000 fb39 	bl	1a000978 <boardInit>

   // Crear varias variables del tipo booleano
   bool_t buttonValue = OFF;
   bool_t ledValue    = OFF;
   // Crear variable del tipo tick_t para contar tiempo
   tick_t timeCount   = 0;
1a000306:	2400      	movs	r4, #0
1a000308:	2500      	movs	r5, #0
   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE ) {

      /* Retardo bloqueante durante 100ms */
      
      delay( 100 );
1a00030a:	2064      	movs	r0, #100	; 0x64
1a00030c:	2100      	movs	r1, #0
1a00030e:	f000 fa91 	bl	1a000834 <delay>
      
      /* Si pasaron 10 segundos comienza a funcionar el programa que copia las
         acciones en BOTON al LED. Mientras espera titila el LED.  */
      
      timeCount++;      
1a000312:	3401      	adds	r4, #1
1a000314:	f145 0500 	adc.w	r5, r5, #0
      
      if( timeCount == 100 ){ // 100ms * 100 = 10s
1a000318:	2d00      	cmp	r5, #0
1a00031a:	bf08      	it	eq
1a00031c:	2c64      	cmpeq	r4, #100	; 0x64
1a00031e:	d00a      	beq.n	1a000336 <main+0x36>
            delay( 250 );
            
         }
      } else {
         // Intercambiar el valor de CIAA_BOARD_LED
         gpioToggle(CIAA_BOARD_LED);
1a000320:	202a      	movs	r0, #42	; 0x2a
1a000322:	f000 f9ac 	bl	1a00067e <gpioToggle>
      delay( 100 );
1a000326:	e7f0      	b.n	1a00030a <main+0xa>
               printf( "LED apagado.\r\n" );
1a000328:	480c      	ldr	r0, [pc, #48]	; (1a00035c <main+0x5c>)
1a00032a:	f001 fd09 	bl	1a001d40 <puts>
            delay( 250 );
1a00032e:	20fa      	movs	r0, #250	; 0xfa
1a000330:	2100      	movs	r1, #0
1a000332:	f000 fa7f 	bl	1a000834 <delay>
            buttonValue = gpioRead( CIAA_BOARD_BUTTON );
1a000336:	2024      	movs	r0, #36	; 0x24
1a000338:	f000 f977 	bl	1a00062a <gpioRead>
            gpioWrite( CIAA_BOARD_LED, buttonValue );
1a00033c:	fab0 f180 	clz	r1, r0
1a000340:	0949      	lsrs	r1, r1, #5
1a000342:	202a      	movs	r0, #42	; 0x2a
1a000344:	f000 f946 	bl	1a0005d4 <gpioWrite>
            ledValue = gpioRead( CIAA_BOARD_LED );
1a000348:	202a      	movs	r0, #42	; 0x2a
1a00034a:	f000 f96e 	bl	1a00062a <gpioRead>
            if( ledValue == ON ) {
1a00034e:	2801      	cmp	r0, #1
1a000350:	d1ea      	bne.n	1a000328 <main+0x28>
               printf( "LED encendido.\r\n" );
1a000352:	4803      	ldr	r0, [pc, #12]	; (1a000360 <main+0x60>)
1a000354:	f001 fcf4 	bl	1a001d40 <puts>
1a000358:	e7e9      	b.n	1a00032e <main+0x2e>
1a00035a:	bf00      	nop
1a00035c:	1a00250c 	.word	0x1a00250c
1a000360:	1a0024fc 	.word	0x1a0024fc

1a000364 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a000364:	4b04      	ldr	r3, [pc, #16]	; (1a000378 <cyclesCounterInit+0x14>)
1a000366:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000368:	4b04      	ldr	r3, [pc, #16]	; (1a00037c <cyclesCounterInit+0x18>)
1a00036a:	681a      	ldr	r2, [r3, #0]
1a00036c:	6813      	ldr	r3, [r2, #0]
1a00036e:	f043 0301 	orr.w	r3, r3, #1
1a000372:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a000374:	2001      	movs	r0, #1
1a000376:	4770      	bx	lr
1a000378:	10000000 	.word	0x10000000
1a00037c:	10000004 	.word	0x10000004

1a000380 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000380:	2301      	movs	r3, #1
1a000382:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000386:	4b01      	ldr	r3, [pc, #4]	; (1a00038c <clearInterrupt+0xc>)
1a000388:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00038a:	4770      	bx	lr
1a00038c:	40087000 	.word	0x40087000

1a000390 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a000392:	4b12      	ldr	r3, [pc, #72]	; (1a0003dc <serveInterrupt+0x4c>)
1a000394:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a000396:	4b12      	ldr	r3, [pc, #72]	; (1a0003e0 <serveInterrupt+0x50>)
1a000398:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00039a:	2301      	movs	r3, #1
1a00039c:	4083      	lsls	r3, r0
1a00039e:	420b      	tst	r3, r1
1a0003a0:	d00c      	beq.n	1a0003bc <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0003a2:	4910      	ldr	r1, [pc, #64]	; (1a0003e4 <serveInterrupt+0x54>)
1a0003a4:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0003a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0003aa:	00d1      	lsls	r1, r2, #3
1a0003ac:	4a0e      	ldr	r2, [pc, #56]	; (1a0003e8 <serveInterrupt+0x58>)
1a0003ae:	440a      	add	r2, r1
1a0003b0:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0003b2:	4a0b      	ldr	r2, [pc, #44]	; (1a0003e0 <serveInterrupt+0x50>)
1a0003b4:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0003b6:	f7ff ffe3 	bl	1a000380 <clearInterrupt>
}
1a0003ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0003bc:	4909      	ldr	r1, [pc, #36]	; (1a0003e4 <serveInterrupt+0x54>)
1a0003be:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0003c0:	4d09      	ldr	r5, [pc, #36]	; (1a0003e8 <serveInterrupt+0x58>)
1a0003c2:	0051      	lsls	r1, r2, #1
1a0003c4:	188f      	adds	r7, r1, r2
1a0003c6:	00fc      	lsls	r4, r7, #3
1a0003c8:	4627      	mov	r7, r4
1a0003ca:	442c      	add	r4, r5
1a0003cc:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0003ce:	6864      	ldr	r4, [r4, #4]
1a0003d0:	1b36      	subs	r6, r6, r4
1a0003d2:	443d      	add	r5, r7
1a0003d4:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0003d6:	4a02      	ldr	r2, [pc, #8]	; (1a0003e0 <serveInterrupt+0x50>)
1a0003d8:	6213      	str	r3, [r2, #32]
1a0003da:	e7ec      	b.n	1a0003b6 <serveInterrupt+0x26>
1a0003dc:	1a00251c 	.word	0x1a00251c
1a0003e0:	40087000 	.word	0x40087000
1a0003e4:	40084000 	.word	0x40084000
1a0003e8:	10000008 	.word	0x10000008

1a0003ec <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a0003ec:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0003ee:	2000      	movs	r0, #0
1a0003f0:	f7ff ffce 	bl	1a000390 <serveInterrupt>
}
1a0003f4:	bd08      	pop	{r3, pc}

1a0003f6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0003f6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0003f8:	2001      	movs	r0, #1
1a0003fa:	f7ff ffc9 	bl	1a000390 <serveInterrupt>
}
1a0003fe:	bd08      	pop	{r3, pc}

1a000400 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a000400:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a000402:	2002      	movs	r0, #2
1a000404:	f7ff ffc4 	bl	1a000390 <serveInterrupt>
}
1a000408:	bd08      	pop	{r3, pc}
1a00040a:	Address 0x000000001a00040a is out of bounds.


1a00040c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00040c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00040e:	4d0b      	ldr	r5, [pc, #44]	; (1a00043c <gpioObtainPinInit+0x30>)
1a000410:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000414:	182c      	adds	r4, r5, r0
1a000416:	5628      	ldrsb	r0, [r5, r0]
1a000418:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00041a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00041e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a000420:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a000424:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a000426:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00042a:	9b02      	ldr	r3, [sp, #8]
1a00042c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00042e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a000432:	9b03      	ldr	r3, [sp, #12]
1a000434:	701a      	strb	r2, [r3, #0]
}
1a000436:	bc30      	pop	{r4, r5}
1a000438:	4770      	bx	lr
1a00043a:	bf00      	nop
1a00043c:	1a002520 	.word	0x1a002520

1a000440 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000440:	b570      	push	{r4, r5, r6, lr}
1a000442:	b084      	sub	sp, #16
1a000444:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000446:	2300      	movs	r3, #0
1a000448:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00044c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000450:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000454:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000458:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00045c:	f10d 030b 	add.w	r3, sp, #11
1a000460:	9301      	str	r3, [sp, #4]
1a000462:	ab03      	add	r3, sp, #12
1a000464:	9300      	str	r3, [sp, #0]
1a000466:	f10d 030d 	add.w	r3, sp, #13
1a00046a:	f10d 020e 	add.w	r2, sp, #14
1a00046e:	f10d 010f 	add.w	r1, sp, #15
1a000472:	f7ff ffcb 	bl	1a00040c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000476:	2c05      	cmp	r4, #5
1a000478:	f200 80a5 	bhi.w	1a0005c6 <gpioInit+0x186>
1a00047c:	e8df f004 	tbb	[pc, r4]
1a000480:	45278109 	.word	0x45278109
1a000484:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000486:	4851      	ldr	r0, [pc, #324]	; (1a0005cc <gpioInit+0x18c>)
1a000488:	f001 f8f2 	bl	1a001670 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00048c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00048e:	b004      	add	sp, #16
1a000490:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a000492:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000496:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00049a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00049e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0004a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0004a6:	494a      	ldr	r1, [pc, #296]	; (1a0005d0 <gpioInit+0x190>)
1a0004a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0004ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0004b0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0004b4:	2001      	movs	r0, #1
1a0004b6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0004ba:	4c44      	ldr	r4, [pc, #272]	; (1a0005cc <gpioInit+0x18c>)
1a0004bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0004c0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0004c4:	ea22 0201 	bic.w	r2, r2, r1
1a0004c8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0004cc:	e7df      	b.n	1a00048e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0004ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0004d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0004d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0004da:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0004de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0004e2:	493b      	ldr	r1, [pc, #236]	; (1a0005d0 <gpioInit+0x190>)
1a0004e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0004e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0004ec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0004f0:	2001      	movs	r0, #1
1a0004f2:	fa00 f102 	lsl.w	r1, r0, r2
1a0004f6:	4c35      	ldr	r4, [pc, #212]	; (1a0005cc <gpioInit+0x18c>)
1a0004f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0004fc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000500:	ea22 0201 	bic.w	r2, r2, r1
1a000504:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000508:	e7c1      	b.n	1a00048e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00050a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00050e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000512:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000516:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00051a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00051e:	492c      	ldr	r1, [pc, #176]	; (1a0005d0 <gpioInit+0x190>)
1a000520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000524:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000528:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00052c:	2001      	movs	r0, #1
1a00052e:	fa00 f102 	lsl.w	r1, r0, r2
1a000532:	4c26      	ldr	r4, [pc, #152]	; (1a0005cc <gpioInit+0x18c>)
1a000534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000538:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00053c:	ea22 0201 	bic.w	r2, r2, r1
1a000540:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000544:	e7a3      	b.n	1a00048e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000546:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00054a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00054e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000552:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a000556:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00055a:	491d      	ldr	r1, [pc, #116]	; (1a0005d0 <gpioInit+0x190>)
1a00055c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000560:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000564:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000568:	2001      	movs	r0, #1
1a00056a:	fa00 f102 	lsl.w	r1, r0, r2
1a00056e:	4c17      	ldr	r4, [pc, #92]	; (1a0005cc <gpioInit+0x18c>)
1a000570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000574:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000578:	ea22 0201 	bic.w	r2, r2, r1
1a00057c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000580:	e785      	b.n	1a00048e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000582:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000586:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00058a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00058e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000592:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000596:	490e      	ldr	r1, [pc, #56]	; (1a0005d0 <gpioInit+0x190>)
1a000598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00059c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0005a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0005a4:	2001      	movs	r0, #1
1a0005a6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0005aa:	4b08      	ldr	r3, [pc, #32]	; (1a0005cc <gpioInit+0x18c>)
1a0005ac:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0005b0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0005b4:	4331      	orrs	r1, r6
1a0005b6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0005ba:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0005bc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0005c0:	2100      	movs	r1, #0
1a0005c2:	5499      	strb	r1, [r3, r2]
1a0005c4:	e763      	b.n	1a00048e <gpioInit+0x4e>
      ret_val = 0;
1a0005c6:	2000      	movs	r0, #0
1a0005c8:	e761      	b.n	1a00048e <gpioInit+0x4e>
1a0005ca:	bf00      	nop
1a0005cc:	400f4000 	.word	0x400f4000
1a0005d0:	40086000 	.word	0x40086000

1a0005d4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0005d4:	b510      	push	{r4, lr}
1a0005d6:	b084      	sub	sp, #16
1a0005d8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0005da:	2300      	movs	r3, #0
1a0005dc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0005e0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0005e4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0005e8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0005ec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0005f0:	f10d 030b 	add.w	r3, sp, #11
1a0005f4:	9301      	str	r3, [sp, #4]
1a0005f6:	ab03      	add	r3, sp, #12
1a0005f8:	9300      	str	r3, [sp, #0]
1a0005fa:	f10d 030d 	add.w	r3, sp, #13
1a0005fe:	f10d 020e 	add.w	r2, sp, #14
1a000602:	f10d 010f 	add.w	r1, sp, #15
1a000606:	f7ff ff01 	bl	1a00040c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00060a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00060e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a000612:	3400      	adds	r4, #0
1a000614:	bf18      	it	ne
1a000616:	2401      	movne	r4, #1
1a000618:	015b      	lsls	r3, r3, #5
1a00061a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00061e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000622:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a000624:	2001      	movs	r0, #1
1a000626:	b004      	add	sp, #16
1a000628:	bd10      	pop	{r4, pc}

1a00062a <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00062a:	b500      	push	{lr}
1a00062c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00062e:	2300      	movs	r3, #0
1a000630:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000634:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000638:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00063c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000640:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000644:	f10d 030b 	add.w	r3, sp, #11
1a000648:	9301      	str	r3, [sp, #4]
1a00064a:	ab03      	add	r3, sp, #12
1a00064c:	9300      	str	r3, [sp, #0]
1a00064e:	f10d 030d 	add.w	r3, sp, #13
1a000652:	f10d 020e 	add.w	r2, sp, #14
1a000656:	f10d 010f 	add.w	r1, sp, #15
1a00065a:	f7ff fed7 	bl	1a00040c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00065e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a000662:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a000666:	015b      	lsls	r3, r3, #5
1a000668:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00066c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000670:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a000672:	3000      	adds	r0, #0
1a000674:	bf18      	it	ne
1a000676:	2001      	movne	r0, #1
1a000678:	b005      	add	sp, #20
1a00067a:	f85d fb04 	ldr.w	pc, [sp], #4

1a00067e <gpioToggle>:
{
1a00067e:	b510      	push	{r4, lr}
1a000680:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a000682:	f7ff ffd2 	bl	1a00062a <gpioRead>
1a000686:	fab0 f180 	clz	r1, r0
1a00068a:	0949      	lsrs	r1, r1, #5
1a00068c:	4620      	mov	r0, r4
1a00068e:	f7ff ffa1 	bl	1a0005d4 <gpioWrite>
}
1a000692:	bd10      	pop	{r4, pc}

1a000694 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a000694:	4b01      	ldr	r3, [pc, #4]	; (1a00069c <tickRead+0x8>)
1a000696:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00069a:	4770      	bx	lr
1a00069c:	10000168 	.word	0x10000168

1a0006a0 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0006a0:	b118      	cbz	r0, 1a0006aa <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0006a2:	4b04      	ldr	r3, [pc, #16]	; (1a0006b4 <tickPowerSet+0x14>)
1a0006a4:	2207      	movs	r2, #7
1a0006a6:	601a      	str	r2, [r3, #0]
1a0006a8:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0006aa:	4b02      	ldr	r3, [pc, #8]	; (1a0006b4 <tickPowerSet+0x14>)
1a0006ac:	2200      	movs	r2, #0
1a0006ae:	601a      	str	r2, [r3, #0]
   }
}
1a0006b0:	4770      	bx	lr
1a0006b2:	bf00      	nop
1a0006b4:	e000e010 	.word	0xe000e010

1a0006b8 <tickInit>:
{
1a0006b8:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0006ba:	ea50 0401 	orrs.w	r4, r0, r1
1a0006be:	d02a      	beq.n	1a000716 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0006c0:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0006c4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0006c8:	2b00      	cmp	r3, #0
1a0006ca:	bf08      	it	eq
1a0006cc:	2a32      	cmpeq	r2, #50	; 0x32
1a0006ce:	d227      	bcs.n	1a000720 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0006d0:	4b14      	ldr	r3, [pc, #80]	; (1a000724 <tickInit+0x6c>)
1a0006d2:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0006d6:	4b14      	ldr	r3, [pc, #80]	; (1a000728 <tickInit+0x70>)
1a0006d8:	681b      	ldr	r3, [r3, #0]
1a0006da:	fba3 4500 	umull	r4, r5, r3, r0
1a0006de:	fb03 5501 	mla	r5, r3, r1, r5
1a0006e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0006e6:	2300      	movs	r3, #0
1a0006e8:	4620      	mov	r0, r4
1a0006ea:	4629      	mov	r1, r5
1a0006ec:	f001 f90c 	bl	1a001908 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a0006f0:	3801      	subs	r0, #1
1a0006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0006f6:	d209      	bcs.n	1a00070c <tickInit+0x54>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a0006f8:	4b0c      	ldr	r3, [pc, #48]	; (1a00072c <tickInit+0x74>)
1a0006fa:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a0006fc:	4a0c      	ldr	r2, [pc, #48]	; (1a000730 <tickInit+0x78>)
1a0006fe:	21e0      	movs	r1, #224	; 0xe0
1a000700:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000704:	2200      	movs	r2, #0
1a000706:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000708:	2207      	movs	r2, #7
1a00070a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a00070c:	2001      	movs	r0, #1
1a00070e:	f7ff ffc7 	bl	1a0006a0 <tickPowerSet>
      bool_t ret_val = 1;
1a000712:	2001      	movs	r0, #1
}
1a000714:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a000716:	2000      	movs	r0, #0
1a000718:	f7ff ffc2 	bl	1a0006a0 <tickPowerSet>
         ret_val = 0;
1a00071c:	2000      	movs	r0, #0
1a00071e:	e7f9      	b.n	1a000714 <tickInit+0x5c>
            ret_val = 0;
1a000720:	2000      	movs	r0, #0
1a000722:	e7f7      	b.n	1a000714 <tickInit+0x5c>
1a000724:	10000170 	.word	0x10000170
1a000728:	10000178 	.word	0x10000178
1a00072c:	e000e010 	.word	0xe000e010
1a000730:	e000ed00 	.word	0xe000ed00

1a000734 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000734:	b538      	push	{r3, r4, r5, lr}
   // Increment Tick counters
   tickCounter++;
1a000736:	4908      	ldr	r1, [pc, #32]	; (1a000758 <SysTick_Handler+0x24>)
1a000738:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00073c:	1c54      	adds	r4, r2, #1
1a00073e:	f143 0500 	adc.w	r5, r3, #0
1a000742:	e9c1 4500 	strd	r4, r5, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000746:	4b05      	ldr	r3, [pc, #20]	; (1a00075c <SysTick_Handler+0x28>)
1a000748:	681b      	ldr	r3, [r3, #0]
1a00074a:	b123      	cbz	r3, 1a000756 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00074c:	4b03      	ldr	r3, [pc, #12]	; (1a00075c <SysTick_Handler+0x28>)
1a00074e:	681b      	ldr	r3, [r3, #0]
1a000750:	4a03      	ldr	r2, [pc, #12]	; (1a000760 <SysTick_Handler+0x2c>)
1a000752:	6810      	ldr	r0, [r2, #0]
1a000754:	4798      	blx	r3
   }
}
1a000756:	bd38      	pop	{r3, r4, r5, pc}
1a000758:	10000168 	.word	0x10000168
1a00075c:	10000134 	.word	0x10000134
1a000760:	10000130 	.word	0x10000130

1a000764 <uartProcessIRQ>:
{
1a000764:	b570      	push	{r4, r5, r6, lr}
1a000766:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a000768:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a00076c:	0093      	lsls	r3, r2, #2
1a00076e:	4a25      	ldr	r2, [pc, #148]	; (1a000804 <uartProcessIRQ+0xa0>)
1a000770:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000772:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a000774:	b2ed      	uxtb	r5, r5
1a000776:	f015 0f01 	tst.w	r5, #1
1a00077a:	d00b      	beq.n	1a000794 <uartProcessIRQ+0x30>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00077c:	b930      	cbnz	r0, 1a00078c <uartProcessIRQ+0x28>
1a00077e:	4b22      	ldr	r3, [pc, #136]	; (1a000808 <uartProcessIRQ+0xa4>)
1a000780:	681b      	ldr	r3, [r3, #0]
1a000782:	b11b      	cbz	r3, 1a00078c <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a000784:	4b20      	ldr	r3, [pc, #128]	; (1a000808 <uartProcessIRQ+0xa4>)
1a000786:	681b      	ldr	r3, [r3, #0]
1a000788:	2000      	movs	r0, #0
1a00078a:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00078c:	2c03      	cmp	r4, #3
1a00078e:	d015      	beq.n	1a0007bc <uartProcessIRQ+0x58>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a000790:	2c05      	cmp	r4, #5
1a000792:	d01c      	beq.n	1a0007ce <uartProcessIRQ+0x6a>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a000794:	f015 0f20 	tst.w	r5, #32
1a000798:	d00f      	beq.n	1a0007ba <uartProcessIRQ+0x56>
	return pUART->IER;
1a00079a:	6873      	ldr	r3, [r6, #4]
1a00079c:	f013 0f02 	tst.w	r3, #2
1a0007a0:	d00b      	beq.n	1a0007ba <uartProcessIRQ+0x56>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0007a2:	b934      	cbnz	r4, 1a0007b2 <uartProcessIRQ+0x4e>
1a0007a4:	4b19      	ldr	r3, [pc, #100]	; (1a00080c <uartProcessIRQ+0xa8>)
1a0007a6:	681b      	ldr	r3, [r3, #0]
1a0007a8:	b11b      	cbz	r3, 1a0007b2 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART0)(0);
1a0007aa:	4b18      	ldr	r3, [pc, #96]	; (1a00080c <uartProcessIRQ+0xa8>)
1a0007ac:	681b      	ldr	r3, [r3, #0]
1a0007ae:	2000      	movs	r0, #0
1a0007b0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0007b2:	2c03      	cmp	r4, #3
1a0007b4:	d014      	beq.n	1a0007e0 <uartProcessIRQ+0x7c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0007b6:	2c05      	cmp	r4, #5
1a0007b8:	d01b      	beq.n	1a0007f2 <uartProcessIRQ+0x8e>
}
1a0007ba:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0007bc:	4b14      	ldr	r3, [pc, #80]	; (1a000810 <uartProcessIRQ+0xac>)
1a0007be:	681b      	ldr	r3, [r3, #0]
1a0007c0:	2b00      	cmp	r3, #0
1a0007c2:	d0e5      	beq.n	1a000790 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART2)(0);
1a0007c4:	4b12      	ldr	r3, [pc, #72]	; (1a000810 <uartProcessIRQ+0xac>)
1a0007c6:	681b      	ldr	r3, [r3, #0]
1a0007c8:	2000      	movs	r0, #0
1a0007ca:	4798      	blx	r3
1a0007cc:	e7e0      	b.n	1a000790 <uartProcessIRQ+0x2c>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0007ce:	4b11      	ldr	r3, [pc, #68]	; (1a000814 <uartProcessIRQ+0xb0>)
1a0007d0:	681b      	ldr	r3, [r3, #0]
1a0007d2:	2b00      	cmp	r3, #0
1a0007d4:	d0de      	beq.n	1a000794 <uartProcessIRQ+0x30>
         (*rxIsrCallbackUART3)(0);
1a0007d6:	4b0f      	ldr	r3, [pc, #60]	; (1a000814 <uartProcessIRQ+0xb0>)
1a0007d8:	681b      	ldr	r3, [r3, #0]
1a0007da:	2000      	movs	r0, #0
1a0007dc:	4798      	blx	r3
1a0007de:	e7d9      	b.n	1a000794 <uartProcessIRQ+0x30>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0007e0:	4b0d      	ldr	r3, [pc, #52]	; (1a000818 <uartProcessIRQ+0xb4>)
1a0007e2:	681b      	ldr	r3, [r3, #0]
1a0007e4:	2b00      	cmp	r3, #0
1a0007e6:	d0e6      	beq.n	1a0007b6 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART2)(0);
1a0007e8:	4b0b      	ldr	r3, [pc, #44]	; (1a000818 <uartProcessIRQ+0xb4>)
1a0007ea:	681b      	ldr	r3, [r3, #0]
1a0007ec:	2000      	movs	r0, #0
1a0007ee:	4798      	blx	r3
1a0007f0:	e7e1      	b.n	1a0007b6 <uartProcessIRQ+0x52>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0007f2:	4b0a      	ldr	r3, [pc, #40]	; (1a00081c <uartProcessIRQ+0xb8>)
1a0007f4:	681b      	ldr	r3, [r3, #0]
1a0007f6:	2b00      	cmp	r3, #0
1a0007f8:	d0df      	beq.n	1a0007ba <uartProcessIRQ+0x56>
         (*txIsrCallbackUART3)(0);
1a0007fa:	4b08      	ldr	r3, [pc, #32]	; (1a00081c <uartProcessIRQ+0xb8>)
1a0007fc:	681b      	ldr	r3, [r3, #0]
1a0007fe:	2000      	movs	r0, #0
1a000800:	4798      	blx	r3
}
1a000802:	e7da      	b.n	1a0007ba <uartProcessIRQ+0x56>
1a000804:	1a002658 	.word	0x1a002658
1a000808:	10000138 	.word	0x10000138
1a00080c:	10000144 	.word	0x10000144
1a000810:	1000013c 	.word	0x1000013c
1a000814:	10000140 	.word	0x10000140
1a000818:	10000148 	.word	0x10000148
1a00081c:	1000014c 	.word	0x1000014c

1a000820 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a000820:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a000822:	2003      	movs	r0, #3
1a000824:	f7ff ff9e 	bl	1a000764 <uartProcessIRQ>
}
1a000828:	bd08      	pop	{r3, pc}

1a00082a <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a00082a:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a00082c:	2005      	movs	r0, #5
1a00082e:	f7ff ff99 	bl	1a000764 <uartProcessIRQ>
}
1a000832:	bd08      	pop	{r3, pc}

1a000834 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a000834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000838:	4680      	mov	r8, r0
1a00083a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a00083c:	f7ff ff2a 	bl	1a000694 <tickRead>
1a000840:	4606      	mov	r6, r0
1a000842:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a000844:	f7ff ff26 	bl	1a000694 <tickRead>
1a000848:	1b84      	subs	r4, r0, r6
1a00084a:	eb61 0507 	sbc.w	r5, r1, r7
1a00084e:	4b06      	ldr	r3, [pc, #24]	; (1a000868 <delay+0x34>)
1a000850:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000854:	4640      	mov	r0, r8
1a000856:	4649      	mov	r1, r9
1a000858:	f001 f856 	bl	1a001908 <__aeabi_uldivmod>
1a00085c:	428d      	cmp	r5, r1
1a00085e:	bf08      	it	eq
1a000860:	4284      	cmpeq	r4, r0
1a000862:	d3ef      	bcc.n	1a000844 <delay+0x10>
}
1a000864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000868:	10000170 	.word	0x10000170

1a00086c <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a00086c:	e7fe      	b.n	1a00086c <errorOcurred>

1a00086e <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a00086e:	4770      	bx	lr

1a000870 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a000870:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000872:	2400      	movs	r4, #0
1a000874:	e001      	b.n	1a00087a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000876:	3401      	adds	r4, #1
1a000878:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00087a:	2c03      	cmp	r4, #3
1a00087c:	d812      	bhi.n	1a0008a4 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00087e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000880:	4b09      	ldr	r3, [pc, #36]	; (1a0008a8 <TIMER0_IRQHandler+0x38>)
1a000882:	681a      	ldr	r2, [r3, #0]
1a000884:	f004 010f 	and.w	r1, r4, #15
1a000888:	2301      	movs	r3, #1
1a00088a:	408b      	lsls	r3, r1
1a00088c:	421a      	tst	r2, r3
1a00088e:	d0f2      	beq.n	1a000876 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000890:	4b06      	ldr	r3, [pc, #24]	; (1a0008ac <TIMER0_IRQHandler+0x3c>)
1a000892:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000896:	2000      	movs	r0, #0
1a000898:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00089a:	2301      	movs	r3, #1
1a00089c:	40ab      	lsls	r3, r5
1a00089e:	4a02      	ldr	r2, [pc, #8]	; (1a0008a8 <TIMER0_IRQHandler+0x38>)
1a0008a0:	6013      	str	r3, [r2, #0]
1a0008a2:	e7e8      	b.n	1a000876 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0008a4:	bd38      	pop	{r3, r4, r5, pc}
1a0008a6:	bf00      	nop
1a0008a8:	40084000 	.word	0x40084000
1a0008ac:	10000050 	.word	0x10000050

1a0008b0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0008b0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008b2:	2400      	movs	r4, #0
1a0008b4:	e001      	b.n	1a0008ba <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0008b6:	3401      	adds	r4, #1
1a0008b8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008ba:	2c03      	cmp	r4, #3
1a0008bc:	d813      	bhi.n	1a0008e6 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0008be:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0008c0:	4b09      	ldr	r3, [pc, #36]	; (1a0008e8 <TIMER1_IRQHandler+0x38>)
1a0008c2:	681a      	ldr	r2, [r3, #0]
1a0008c4:	f004 010f 	and.w	r1, r4, #15
1a0008c8:	2301      	movs	r3, #1
1a0008ca:	408b      	lsls	r3, r1
1a0008cc:	421a      	tst	r2, r3
1a0008ce:	d0f2      	beq.n	1a0008b6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0008d0:	1d23      	adds	r3, r4, #4
1a0008d2:	4a06      	ldr	r2, [pc, #24]	; (1a0008ec <TIMER1_IRQHandler+0x3c>)
1a0008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0008d8:	2000      	movs	r0, #0
1a0008da:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0008dc:	2301      	movs	r3, #1
1a0008de:	40ab      	lsls	r3, r5
1a0008e0:	4a01      	ldr	r2, [pc, #4]	; (1a0008e8 <TIMER1_IRQHandler+0x38>)
1a0008e2:	6013      	str	r3, [r2, #0]
1a0008e4:	e7e7      	b.n	1a0008b6 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0008e6:	bd38      	pop	{r3, r4, r5, pc}
1a0008e8:	40085000 	.word	0x40085000
1a0008ec:	10000050 	.word	0x10000050

1a0008f0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0008f0:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008f2:	2400      	movs	r4, #0
1a0008f4:	e001      	b.n	1a0008fa <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0008f6:	3401      	adds	r4, #1
1a0008f8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008fa:	2c03      	cmp	r4, #3
1a0008fc:	d814      	bhi.n	1a000928 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0008fe:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000900:	4b0a      	ldr	r3, [pc, #40]	; (1a00092c <TIMER2_IRQHandler+0x3c>)
1a000902:	681a      	ldr	r2, [r3, #0]
1a000904:	f004 010f 	and.w	r1, r4, #15
1a000908:	2301      	movs	r3, #1
1a00090a:	408b      	lsls	r3, r1
1a00090c:	421a      	tst	r2, r3
1a00090e:	d0f2      	beq.n	1a0008f6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000910:	f104 0308 	add.w	r3, r4, #8
1a000914:	4a06      	ldr	r2, [pc, #24]	; (1a000930 <TIMER2_IRQHandler+0x40>)
1a000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00091a:	2000      	movs	r0, #0
1a00091c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00091e:	2301      	movs	r3, #1
1a000920:	40ab      	lsls	r3, r5
1a000922:	4a02      	ldr	r2, [pc, #8]	; (1a00092c <TIMER2_IRQHandler+0x3c>)
1a000924:	6013      	str	r3, [r2, #0]
1a000926:	e7e6      	b.n	1a0008f6 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000928:	bd38      	pop	{r3, r4, r5, pc}
1a00092a:	bf00      	nop
1a00092c:	400c3000 	.word	0x400c3000
1a000930:	10000050 	.word	0x10000050

1a000934 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a000934:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000936:	2400      	movs	r4, #0
1a000938:	e001      	b.n	1a00093e <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00093a:	3401      	adds	r4, #1
1a00093c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00093e:	2c03      	cmp	r4, #3
1a000940:	d814      	bhi.n	1a00096c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a000942:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000944:	4b0a      	ldr	r3, [pc, #40]	; (1a000970 <TIMER3_IRQHandler+0x3c>)
1a000946:	681a      	ldr	r2, [r3, #0]
1a000948:	f004 010f 	and.w	r1, r4, #15
1a00094c:	2301      	movs	r3, #1
1a00094e:	408b      	lsls	r3, r1
1a000950:	421a      	tst	r2, r3
1a000952:	d0f2      	beq.n	1a00093a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000954:	f104 030c 	add.w	r3, r4, #12
1a000958:	4a06      	ldr	r2, [pc, #24]	; (1a000974 <TIMER3_IRQHandler+0x40>)
1a00095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00095e:	2000      	movs	r0, #0
1a000960:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000962:	2301      	movs	r3, #1
1a000964:	40ab      	lsls	r3, r5
1a000966:	4a02      	ldr	r2, [pc, #8]	; (1a000970 <TIMER3_IRQHandler+0x3c>)
1a000968:	6013      	str	r3, [r2, #0]
1a00096a:	e7e6      	b.n	1a00093a <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a00096c:	bd38      	pop	{r3, r4, r5, pc}
1a00096e:	bf00      	nop
1a000970:	400c4000 	.word	0x400c4000
1a000974:	10000050 	.word	0x10000050

1a000978 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a000978:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00097a:	f000 fb7f 	bl	1a00107c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00097e:	4b3a      	ldr	r3, [pc, #232]	; (1a000a68 <boardInit+0xf0>)
1a000980:	6818      	ldr	r0, [r3, #0]
1a000982:	f7ff fcef 	bl	1a000364 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a000986:	2001      	movs	r0, #1
1a000988:	2100      	movs	r1, #0
1a00098a:	f7ff fe95 	bl	1a0006b8 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00098e:	2105      	movs	r1, #5
1a000990:	2000      	movs	r0, #0
1a000992:	f7ff fd55 	bl	1a000440 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a000996:	2100      	movs	r1, #0
1a000998:	2024      	movs	r0, #36	; 0x24
1a00099a:	f7ff fd51 	bl	1a000440 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00099e:	2100      	movs	r1, #0
1a0009a0:	2025      	movs	r0, #37	; 0x25
1a0009a2:	f7ff fd4d 	bl	1a000440 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0009a6:	2100      	movs	r1, #0
1a0009a8:	2026      	movs	r0, #38	; 0x26
1a0009aa:	f7ff fd49 	bl	1a000440 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0009ae:	2100      	movs	r1, #0
1a0009b0:	2027      	movs	r0, #39	; 0x27
1a0009b2:	f7ff fd45 	bl	1a000440 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0009b6:	2101      	movs	r1, #1
1a0009b8:	2028      	movs	r0, #40	; 0x28
1a0009ba:	f7ff fd41 	bl	1a000440 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0009be:	2101      	movs	r1, #1
1a0009c0:	2029      	movs	r0, #41	; 0x29
1a0009c2:	f7ff fd3d 	bl	1a000440 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0009c6:	2101      	movs	r1, #1
1a0009c8:	202a      	movs	r0, #42	; 0x2a
1a0009ca:	f7ff fd39 	bl	1a000440 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0009ce:	2101      	movs	r1, #1
1a0009d0:	202b      	movs	r0, #43	; 0x2b
1a0009d2:	f7ff fd35 	bl	1a000440 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0009d6:	2101      	movs	r1, #1
1a0009d8:	202c      	movs	r0, #44	; 0x2c
1a0009da:	f7ff fd31 	bl	1a000440 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0009de:	2101      	movs	r1, #1
1a0009e0:	202d      	movs	r0, #45	; 0x2d
1a0009e2:	f7ff fd2d 	bl	1a000440 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0009e6:	2100      	movs	r1, #0
1a0009e8:	202e      	movs	r0, #46	; 0x2e
1a0009ea:	f7ff fd29 	bl	1a000440 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0009ee:	2100      	movs	r1, #0
1a0009f0:	202f      	movs	r0, #47	; 0x2f
1a0009f2:	f7ff fd25 	bl	1a000440 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0009f6:	2100      	movs	r1, #0
1a0009f8:	2030      	movs	r0, #48	; 0x30
1a0009fa:	f7ff fd21 	bl	1a000440 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0009fe:	2100      	movs	r1, #0
1a000a00:	2031      	movs	r0, #49	; 0x31
1a000a02:	f7ff fd1d 	bl	1a000440 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a000a06:	2100      	movs	r1, #0
1a000a08:	2032      	movs	r0, #50	; 0x32
1a000a0a:	f7ff fd19 	bl	1a000440 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a000a0e:	2100      	movs	r1, #0
1a000a10:	2033      	movs	r0, #51	; 0x33
1a000a12:	f7ff fd15 	bl	1a000440 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a000a16:	2100      	movs	r1, #0
1a000a18:	2034      	movs	r0, #52	; 0x34
1a000a1a:	f7ff fd11 	bl	1a000440 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a000a1e:	2100      	movs	r1, #0
1a000a20:	2035      	movs	r0, #53	; 0x35
1a000a22:	f7ff fd0d 	bl	1a000440 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a000a26:	2101      	movs	r1, #1
1a000a28:	2036      	movs	r0, #54	; 0x36
1a000a2a:	f7ff fd09 	bl	1a000440 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a000a2e:	2101      	movs	r1, #1
1a000a30:	2037      	movs	r0, #55	; 0x37
1a000a32:	f7ff fd05 	bl	1a000440 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a000a36:	2101      	movs	r1, #1
1a000a38:	2038      	movs	r0, #56	; 0x38
1a000a3a:	f7ff fd01 	bl	1a000440 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a000a3e:	2101      	movs	r1, #1
1a000a40:	2039      	movs	r0, #57	; 0x39
1a000a42:	f7ff fcfd 	bl	1a000440 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a000a46:	2101      	movs	r1, #1
1a000a48:	203a      	movs	r0, #58	; 0x3a
1a000a4a:	f7ff fcf9 	bl	1a000440 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a000a4e:	2101      	movs	r1, #1
1a000a50:	203b      	movs	r0, #59	; 0x3b
1a000a52:	f7ff fcf5 	bl	1a000440 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a000a56:	2101      	movs	r1, #1
1a000a58:	203c      	movs	r0, #60	; 0x3c
1a000a5a:	f7ff fcf1 	bl	1a000440 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a000a5e:	2101      	movs	r1, #1
1a000a60:	203d      	movs	r0, #61	; 0x3d
1a000a62:	f7ff fced 	bl	1a000440 <gpioInit>

}
1a000a66:	bd08      	pop	{r3, pc}
1a000a68:	10000178 	.word	0x10000178

1a000a6c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a6c:	2200      	movs	r2, #0
1a000a6e:	2a05      	cmp	r2, #5
1a000a70:	d819      	bhi.n	1a000aa6 <Board_LED_Init+0x3a>
{
1a000a72:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000a74:	490c      	ldr	r1, [pc, #48]	; (1a000aa8 <Board_LED_Init+0x3c>)
1a000a76:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000a7a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000a7e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000a80:	4b0a      	ldr	r3, [pc, #40]	; (1a000aac <Board_LED_Init+0x40>)
1a000a82:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000a86:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000a8a:	2001      	movs	r0, #1
1a000a8c:	40a0      	lsls	r0, r4
1a000a8e:	4301      	orrs	r1, r0
1a000a90:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000a94:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000a98:	2100      	movs	r1, #0
1a000a9a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a9c:	3201      	adds	r2, #1
1a000a9e:	2a05      	cmp	r2, #5
1a000aa0:	d9e8      	bls.n	1a000a74 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000aa2:	bc70      	pop	{r4, r5, r6}
1a000aa4:	4770      	bx	lr
1a000aa6:	4770      	bx	lr
1a000aa8:	1a0026ac 	.word	0x1a0026ac
1a000aac:	400f4000 	.word	0x400f4000

1a000ab0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000ab0:	2300      	movs	r3, #0
1a000ab2:	2b03      	cmp	r3, #3
1a000ab4:	d816      	bhi.n	1a000ae4 <Board_TEC_Init+0x34>
{
1a000ab6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000ab8:	490b      	ldr	r1, [pc, #44]	; (1a000ae8 <Board_TEC_Init+0x38>)
1a000aba:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000abe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000ac2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000ac4:	4c09      	ldr	r4, [pc, #36]	; (1a000aec <Board_TEC_Init+0x3c>)
1a000ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000aca:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000ace:	2001      	movs	r0, #1
1a000ad0:	40a8      	lsls	r0, r5
1a000ad2:	ea21 0100 	bic.w	r1, r1, r0
1a000ad6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000ada:	3301      	adds	r3, #1
1a000adc:	2b03      	cmp	r3, #3
1a000ade:	d9eb      	bls.n	1a000ab8 <Board_TEC_Init+0x8>
    }
}
1a000ae0:	bc30      	pop	{r4, r5}
1a000ae2:	4770      	bx	lr
1a000ae4:	4770      	bx	lr
1a000ae6:	bf00      	nop
1a000ae8:	1a0026a4 	.word	0x1a0026a4
1a000aec:	400f4000 	.word	0x400f4000

1a000af0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000af0:	2300      	movs	r3, #0
1a000af2:	2b08      	cmp	r3, #8
1a000af4:	d816      	bhi.n	1a000b24 <Board_GPIO_Init+0x34>
{
1a000af6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000af8:	490b      	ldr	r1, [pc, #44]	; (1a000b28 <Board_GPIO_Init+0x38>)
1a000afa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000afe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000b02:	784d      	ldrb	r5, [r1, #1]
1a000b04:	4c09      	ldr	r4, [pc, #36]	; (1a000b2c <Board_GPIO_Init+0x3c>)
1a000b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000b0a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000b0e:	2001      	movs	r0, #1
1a000b10:	40a8      	lsls	r0, r5
1a000b12:	ea21 0100 	bic.w	r1, r1, r0
1a000b16:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000b1a:	3301      	adds	r3, #1
1a000b1c:	2b08      	cmp	r3, #8
1a000b1e:	d9eb      	bls.n	1a000af8 <Board_GPIO_Init+0x8>
    }
}
1a000b20:	bc30      	pop	{r4, r5}
1a000b22:	4770      	bx	lr
1a000b24:	4770      	bx	lr
1a000b26:	bf00      	nop
1a000b28:	1a0026b8 	.word	0x1a0026b8
1a000b2c:	400f4000 	.word	0x400f4000

1a000b30 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a000b30:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000b32:	4c0b      	ldr	r4, [pc, #44]	; (1a000b60 <Board_SPI_Init+0x30>)
1a000b34:	4620      	mov	r0, r4
1a000b36:	f000 fe87 	bl	1a001848 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000b3a:	6863      	ldr	r3, [r4, #4]
1a000b3c:	f023 0304 	bic.w	r3, r3, #4
1a000b40:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000b42:	6823      	ldr	r3, [r4, #0]
1a000b44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000b48:	f043 0307 	orr.w	r3, r3, #7
1a000b4c:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000b4e:	4905      	ldr	r1, [pc, #20]	; (1a000b64 <Board_SPI_Init+0x34>)
1a000b50:	4620      	mov	r0, r4
1a000b52:	f000 fe5a 	bl	1a00180a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000b56:	6863      	ldr	r3, [r4, #4]
1a000b58:	f043 0302 	orr.w	r3, r3, #2
1a000b5c:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a000b5e:	bd10      	pop	{r4, pc}
1a000b60:	400c5000 	.word	0x400c5000
1a000b64:	000186a0 	.word	0x000186a0

1a000b68 <Board_I2C_Init>:
{
1a000b68:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000b6a:	2000      	movs	r0, #0
1a000b6c:	f000 f946 	bl	1a000dfc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000b70:	4b04      	ldr	r3, [pc, #16]	; (1a000b84 <Board_I2C_Init+0x1c>)
1a000b72:	f640 0208 	movw	r2, #2056	; 0x808
1a000b76:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000b7a:	4903      	ldr	r1, [pc, #12]	; (1a000b88 <Board_I2C_Init+0x20>)
1a000b7c:	2000      	movs	r0, #0
1a000b7e:	f000 f94f 	bl	1a000e20 <Chip_I2C_SetClockRate>
}
1a000b82:	bd08      	pop	{r3, pc}
1a000b84:	40086000 	.word	0x40086000
1a000b88:	000f4240 	.word	0x000f4240

1a000b8c <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a000b8c:	b510      	push	{r4, lr}
1a000b8e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000b90:	4c08      	ldr	r4, [pc, #32]	; (1a000bb4 <Board_ADC_Init+0x28>)
1a000b92:	4669      	mov	r1, sp
1a000b94:	4620      	mov	r0, r4
1a000b96:	f000 fa31 	bl	1a000ffc <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000b9a:	4a07      	ldr	r2, [pc, #28]	; (1a000bb8 <Board_ADC_Init+0x2c>)
1a000b9c:	4669      	mov	r1, sp
1a000b9e:	4620      	mov	r0, r4
1a000ba0:	f000 fa4c 	bl	1a00103c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000ba4:	2200      	movs	r2, #0
1a000ba6:	4669      	mov	r1, sp
1a000ba8:	4620      	mov	r0, r4
1a000baa:	f000 fa60 	bl	1a00106e <Chip_ADC_SetResolution>
}
1a000bae:	b002      	add	sp, #8
1a000bb0:	bd10      	pop	{r4, pc}
1a000bb2:	bf00      	nop
1a000bb4:	400e3000 	.word	0x400e3000
1a000bb8:	00061a80 	.word	0x00061a80

1a000bbc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000bbc:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000bbe:	4c07      	ldr	r4, [pc, #28]	; (1a000bdc <Board_Debug_Init+0x20>)
1a000bc0:	4620      	mov	r0, r4
1a000bc2:	f000 f95f 	bl	1a000e84 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000bc6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000bca:	4620      	mov	r0, r4
1a000bcc:	f000 f984 	bl	1a000ed8 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a000bd0:	2303      	movs	r3, #3
1a000bd2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000bd4:	2301      	movs	r3, #1
1a000bd6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000bd8:	bd10      	pop	{r4, pc}
1a000bda:	bf00      	nop
1a000bdc:	400c1000 	.word	0x400c1000

1a000be0 <Board_UARTPutChar>:
	return pUART->LSR;
1a000be0:	4b03      	ldr	r3, [pc, #12]	; (1a000bf0 <Board_UARTPutChar+0x10>)
1a000be2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000be4:	f013 0f20 	tst.w	r3, #32
1a000be8:	d0fa      	beq.n	1a000be0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a000bea:	4b01      	ldr	r3, [pc, #4]	; (1a000bf0 <Board_UARTPutChar+0x10>)
1a000bec:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a000bee:	4770      	bx	lr
1a000bf0:	400c1000 	.word	0x400c1000

1a000bf4 <Board_UARTGetChar>:
	return pUART->LSR;
1a000bf4:	4b05      	ldr	r3, [pc, #20]	; (1a000c0c <Board_UARTGetChar+0x18>)
1a000bf6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000bf8:	f013 0f01 	tst.w	r3, #1
1a000bfc:	d003      	beq.n	1a000c06 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000bfe:	4b03      	ldr	r3, [pc, #12]	; (1a000c0c <Board_UARTGetChar+0x18>)
1a000c00:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000c02:	b2c0      	uxtb	r0, r0
1a000c04:	4770      	bx	lr
    }
    return EOF;
1a000c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000c0a:	4770      	bx	lr
1a000c0c:	400c1000 	.word	0x400c1000

1a000c10 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000c10:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000c12:	f7ff ffd3 	bl	1a000bbc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000c16:	480b      	ldr	r0, [pc, #44]	; (1a000c44 <Board_Init+0x34>)
1a000c18:	f000 fd2a 	bl	1a001670 <Chip_GPIO_Init>

   Board_LED_Init();
1a000c1c:	f7ff ff26 	bl	1a000a6c <Board_LED_Init>
   Board_TEC_Init();
1a000c20:	f7ff ff46 	bl	1a000ab0 <Board_TEC_Init>
   Board_SPI_Init();
1a000c24:	f7ff ff84 	bl	1a000b30 <Board_SPI_Init>
   Board_GPIO_Init();
1a000c28:	f7ff ff62 	bl	1a000af0 <Board_GPIO_Init>
   Board_I2C_Init();
1a000c2c:	f7ff ff9c 	bl	1a000b68 <Board_I2C_Init>
   Board_ADC_Init();
1a000c30:	f7ff ffac 	bl	1a000b8c <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a000c34:	4a04      	ldr	r2, [pc, #16]	; (1a000c48 <Board_Init+0x38>)
1a000c36:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000c3a:	f043 0304 	orr.w	r3, r3, #4
1a000c3e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a000c42:	bd08      	pop	{r3, pc}
1a000c44:	400f4000 	.word	0x400f4000
1a000c48:	40043000 	.word	0x40043000

1a000c4c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000c4c:	2309      	movs	r3, #9
1a000c4e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c54:	4770      	bx	lr

1a000c56 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000c56:	2358      	movs	r3, #88	; 0x58
1a000c58:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c5e:	4770      	bx	lr

1a000c60 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000c60:	2902      	cmp	r1, #2
1a000c62:	d904      	bls.n	1a000c6e <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000c64:	2309      	movs	r3, #9
1a000c66:	6003      	str	r3, [r0, #0]
       return -1;
1a000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c6c:	4770      	bx	lr
       return 1;
1a000c6e:	2001      	movs	r0, #1
   }
}
1a000c70:	4770      	bx	lr

1a000c72 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000c72:	2358      	movs	r3, #88	; 0x58
1a000c74:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c7a:	4770      	bx	lr

1a000c7c <_read_r>:
   UNUSED(m);
   SET_ERR(EBADF);
   return -1;
}

_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a000c7e:	2902      	cmp	r1, #2
1a000c80:	d81c      	bhi.n	1a000cbc <_read_r+0x40>
1a000c82:	461d      	mov	r5, r3
1a000c84:	4617      	mov	r7, r2
1a000c86:	4606      	mov	r6, r0
  size_t i = 0;
1a000c88:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000c8a:	42ac      	cmp	r4, r5
1a000c8c:	d211      	bcs.n	1a000cb2 <_read_r+0x36>
         c = (char)Board_UARTGetChar();
1a000c8e:	f7ff ffb1 	bl	1a000bf4 <Board_UARTGetChar>
1a000c92:	b2c0      	uxtb	r0, r0
         if( c != 255 ){
1a000c94:	28ff      	cmp	r0, #255	; 0xff
1a000c96:	d0f8      	beq.n	1a000c8a <_read_r+0xe>
            if( c != '\r' && c != '\n' ){
1a000c98:	280d      	cmp	r0, #13
1a000c9a:	d004      	beq.n	1a000ca6 <_read_r+0x2a>
1a000c9c:	280a      	cmp	r0, #10
1a000c9e:	d002      	beq.n	1a000ca6 <_read_r+0x2a>
               ((char*) b)[i] = c;
1a000ca0:	5538      	strb	r0, [r7, r4]
               i++;
1a000ca2:	3401      	adds	r4, #1
1a000ca4:	e7f1      	b.n	1a000c8a <_read_r+0xe>
            }else{
               ((char*) b)[i] = c;
1a000ca6:	5538      	strb	r0, [r7, r4]
               i++;
1a000ca8:	3401      	adds	r4, #1
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
1a000caa:	f7ff ffa3 	bl	1a000bf4 <Board_UARTGetChar>
               return i;
1a000cae:	4620      	mov	r0, r4
1a000cb0:	e003      	b.n	1a000cba <_read_r+0x3e>
            }
         }
      }
      SET_ERR(ENODEV);
1a000cb2:	2313      	movs	r3, #19
1a000cb4:	6033      	str	r3, [r6, #0]
      return -1;
1a000cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_ERR(ENODEV);
1a000cbc:	2313      	movs	r3, #19
1a000cbe:	6003      	str	r3, [r0, #0]
      return -1;
1a000cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000cc4:	e7f9      	b.n	1a000cba <_read_r+0x3e>
1a000cc6:	Address 0x000000001a000cc6 is out of bounds.


1a000cc8 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000cc8:	4b05      	ldr	r3, [pc, #20]	; (1a000ce0 <_sbrk_r+0x18>)
1a000cca:	681b      	ldr	r3, [r3, #0]
1a000ccc:	b123      	cbz	r3, 1a000cd8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000cce:	4b04      	ldr	r3, [pc, #16]	; (1a000ce0 <_sbrk_r+0x18>)
1a000cd0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000cd2:	4401      	add	r1, r0
1a000cd4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000cd6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000cd8:	4b01      	ldr	r3, [pc, #4]	; (1a000ce0 <_sbrk_r+0x18>)
1a000cda:	4a02      	ldr	r2, [pc, #8]	; (1a000ce4 <_sbrk_r+0x1c>)
1a000cdc:	601a      	str	r2, [r3, #0]
1a000cde:	e7f6      	b.n	1a000cce <_sbrk_r+0x6>
1a000ce0:	10000150 	.word	0x10000150
1a000ce4:	10000188 	.word	0x10000188

1a000ce8 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000ce8:	2902      	cmp	r1, #2
1a000cea:	d80c      	bhi.n	1a000d06 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000cec:	b570      	push	{r4, r5, r6, lr}
1a000cee:	461d      	mov	r5, r3
1a000cf0:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000cf2:	2400      	movs	r4, #0
1a000cf4:	42ac      	cmp	r4, r5
1a000cf6:	d204      	bcs.n	1a000d02 <_write_r+0x1a>
           Board_UARTPutChar(((char*) b)[i]);
1a000cf8:	5d30      	ldrb	r0, [r6, r4]
1a000cfa:	f7ff ff71 	bl	1a000be0 <Board_UARTPutChar>
       for (i = 0; i < n; i++)
1a000cfe:	3401      	adds	r4, #1
1a000d00:	e7f8      	b.n	1a000cf4 <_write_r+0xc>
       return n;
1a000d02:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000d04:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000d06:	2313      	movs	r3, #19
1a000d08:	6003      	str	r3, [r0, #0]
       return -1;
1a000d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000d0e:	4770      	bx	lr

1a000d10 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000d10:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a000d12:	4a04      	ldr	r2, [pc, #16]	; (1a000d24 <SystemInit+0x14>)
1a000d14:	4b04      	ldr	r3, [pc, #16]	; (1a000d28 <SystemInit+0x18>)
1a000d16:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000d18:	f000 fc80 	bl	1a00161c <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a000d1c:	f000 f858 	bl	1a000dd0 <Board_SystemInit>
}
1a000d20:	bd08      	pop	{r3, pc}
1a000d22:	bf00      	nop
1a000d24:	1a000000 	.word	0x1a000000
1a000d28:	e000ed08 	.word	0xe000ed08

1a000d2c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000d2c:	2300      	movs	r3, #0
1a000d2e:	2b25      	cmp	r3, #37	; 0x25
1a000d30:	d812      	bhi.n	1a000d58 <Board_SetupMuxing+0x2c>
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a000d32:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000d34:	4a09      	ldr	r2, [pc, #36]	; (1a000d5c <Board_SetupMuxing+0x30>)
1a000d36:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000d3a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000d3e:	784a      	ldrb	r2, [r1, #1]
1a000d40:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000d42:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000d46:	4906      	ldr	r1, [pc, #24]	; (1a000d60 <Board_SetupMuxing+0x34>)
1a000d48:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000d4c:	3301      	adds	r3, #1
1a000d4e:	2b25      	cmp	r3, #37	; 0x25
1a000d50:	d9f0      	bls.n	1a000d34 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000d52:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d56:	4770      	bx	lr
1a000d58:	4770      	bx	lr
1a000d5a:	bf00      	nop
1a000d5c:	1a0026dc 	.word	0x1a0026dc
1a000d60:	40086000 	.word	0x40086000

1a000d64 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000d64:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000d66:	4a17      	ldr	r2, [pc, #92]	; (1a000dc4 <Board_SetupClocking+0x60>)
1a000d68:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d70:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d74:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000d78:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d80:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d84:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000d88:	2201      	movs	r2, #1
1a000d8a:	490f      	ldr	r1, [pc, #60]	; (1a000dc8 <Board_SetupClocking+0x64>)
1a000d8c:	2006      	movs	r0, #6
1a000d8e:	f000 fc71 	bl	1a001674 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000d92:	2400      	movs	r4, #0
1a000d94:	2c02      	cmp	r4, #2
1a000d96:	d80b      	bhi.n	1a000db0 <Board_SetupClocking+0x4c>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000d98:	480c      	ldr	r0, [pc, #48]	; (1a000dcc <Board_SetupClocking+0x68>)
1a000d9a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000d9e:	78cb      	ldrb	r3, [r1, #3]
1a000da0:	788a      	ldrb	r2, [r1, #2]
1a000da2:	7849      	ldrb	r1, [r1, #1]
1a000da4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000da8:	f000 fb94 	bl	1a0014d4 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000dac:	3401      	adds	r4, #1
1a000dae:	e7f1      	b.n	1a000d94 <Board_SetupClocking+0x30>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000db0:	4b04      	ldr	r3, [pc, #16]	; (1a000dc4 <Board_SetupClocking+0x60>)
1a000db2:	685a      	ldr	r2, [r3, #4]
1a000db4:	f022 020c 	bic.w	r2, r2, #12
1a000db8:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000dba:	685a      	ldr	r2, [r3, #4]
1a000dbc:	f042 0203 	orr.w	r2, r2, #3
1a000dc0:	605a      	str	r2, [r3, #4]
}
1a000dc2:	bd10      	pop	{r4, pc}
1a000dc4:	40043000 	.word	0x40043000
1a000dc8:	0c28cb00 	.word	0x0c28cb00
1a000dcc:	1a0026d0 	.word	0x1a0026d0

1a000dd0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000dd0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000dd2:	f7ff ffab 	bl	1a000d2c <Board_SetupMuxing>
    Board_SetupClocking();
1a000dd6:	f7ff ffc5 	bl	1a000d64 <Board_SetupClocking>
}
1a000dda:	bd08      	pop	{r3, pc}

1a000ddc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000ddc:	2901      	cmp	r1, #1
1a000dde:	d109      	bne.n	1a000df4 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000de0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000de4:	0082      	lsls	r2, r0, #2
1a000de6:	4b04      	ldr	r3, [pc, #16]	; (1a000df8 <Chip_I2C_EventHandler+0x1c>)
1a000de8:	4413      	add	r3, r2
1a000dea:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000dec:	7d13      	ldrb	r3, [r2, #20]
1a000dee:	b2db      	uxtb	r3, r3
1a000df0:	2b04      	cmp	r3, #4
1a000df2:	d0fb      	beq.n	1a000dec <Chip_I2C_EventHandler+0x10>
}
1a000df4:	4770      	bx	lr
1a000df6:	bf00      	nop
1a000df8:	10000090 	.word	0x10000090

1a000dfc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000dfc:	b570      	push	{r4, r5, r6, lr}
1a000dfe:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000e00:	4e06      	ldr	r6, [pc, #24]	; (1a000e1c <Chip_I2C_Init+0x20>)
1a000e02:	00c4      	lsls	r4, r0, #3
1a000e04:	1a22      	subs	r2, r4, r0
1a000e06:	0093      	lsls	r3, r2, #2
1a000e08:	4433      	add	r3, r6
1a000e0a:	8898      	ldrh	r0, [r3, #4]
1a000e0c:	f000 fbc6 	bl	1a00159c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000e10:	1b64      	subs	r4, r4, r5
1a000e12:	00a3      	lsls	r3, r4, #2
1a000e14:	58f3      	ldr	r3, [r6, r3]
1a000e16:	226c      	movs	r2, #108	; 0x6c
1a000e18:	619a      	str	r2, [r3, #24]
}
1a000e1a:	bd70      	pop	{r4, r5, r6, pc}
1a000e1c:	10000090 	.word	0x10000090

1a000e20 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e24:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000e26:	4e0b      	ldr	r6, [pc, #44]	; (1a000e54 <Chip_I2C_SetClockRate+0x34>)
1a000e28:	00c5      	lsls	r5, r0, #3
1a000e2a:	1a2b      	subs	r3, r5, r0
1a000e2c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000e30:	eb06 0308 	add.w	r3, r6, r8
1a000e34:	8898      	ldrh	r0, [r3, #4]
1a000e36:	f000 fbcb 	bl	1a0015d0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000e3a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000e3e:	f856 3008 	ldr.w	r3, [r6, r8]
1a000e42:	0842      	lsrs	r2, r0, #1
1a000e44:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000e46:	f856 3008 	ldr.w	r3, [r6, r8]
1a000e4a:	691a      	ldr	r2, [r3, #16]
1a000e4c:	1a80      	subs	r0, r0, r2
1a000e4e:	6158      	str	r0, [r3, #20]
}
1a000e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000e54:	10000090 	.word	0x10000090

1a000e58 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000e58:	4b09      	ldr	r3, [pc, #36]	; (1a000e80 <Chip_UART_GetIndex+0x28>)
1a000e5a:	4298      	cmp	r0, r3
1a000e5c:	d009      	beq.n	1a000e72 <Chip_UART_GetIndex+0x1a>
1a000e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000e62:	4298      	cmp	r0, r3
1a000e64:	d007      	beq.n	1a000e76 <Chip_UART_GetIndex+0x1e>
1a000e66:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000e6a:	4298      	cmp	r0, r3
1a000e6c:	d005      	beq.n	1a000e7a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000e6e:	2000      	movs	r0, #0
1a000e70:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000e72:	2002      	movs	r0, #2
1a000e74:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000e76:	2003      	movs	r0, #3
1a000e78:	4770      	bx	lr
			return 1;
1a000e7a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000e7c:	4770      	bx	lr
1a000e7e:	bf00      	nop
1a000e80:	400c1000 	.word	0x400c1000

1a000e84 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000e84:	b530      	push	{r4, r5, lr}
1a000e86:	b083      	sub	sp, #12
1a000e88:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000e8a:	f7ff ffe5 	bl	1a000e58 <Chip_UART_GetIndex>
1a000e8e:	2301      	movs	r3, #1
1a000e90:	461a      	mov	r2, r3
1a000e92:	4619      	mov	r1, r3
1a000e94:	4d0e      	ldr	r5, [pc, #56]	; (1a000ed0 <Chip_UART_Init+0x4c>)
1a000e96:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000e9a:	f000 fb61 	bl	1a001560 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000e9e:	2307      	movs	r3, #7
1a000ea0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000ea2:	2300      	movs	r3, #0
1a000ea4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000ea6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000ea8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000eaa:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000eac:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000eae:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000eb0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000eb2:	4b08      	ldr	r3, [pc, #32]	; (1a000ed4 <Chip_UART_Init+0x50>)
1a000eb4:	429c      	cmp	r4, r3
1a000eb6:	d006      	beq.n	1a000ec6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000eb8:	2303      	movs	r3, #3
1a000eba:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000ebc:	2310      	movs	r3, #16
1a000ebe:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000ec0:	9b01      	ldr	r3, [sp, #4]
}
1a000ec2:	b003      	add	sp, #12
1a000ec4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000ec6:	2300      	movs	r3, #0
1a000ec8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000eca:	69a3      	ldr	r3, [r4, #24]
1a000ecc:	9301      	str	r3, [sp, #4]
1a000ece:	e7f3      	b.n	1a000eb8 <Chip_UART_Init+0x34>
1a000ed0:	1a00277c 	.word	0x1a00277c
1a000ed4:	40082000 	.word	0x40082000

1a000ed8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000edc:	b083      	sub	sp, #12
1a000ede:	9001      	str	r0, [sp, #4]
1a000ee0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000ee2:	f7ff ffb9 	bl	1a000e58 <Chip_UART_GetIndex>
1a000ee6:	4b32      	ldr	r3, [pc, #200]	; (1a000fb0 <Chip_UART_SetBaudFDR+0xd8>)
1a000ee8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000eec:	f000 fb70 	bl	1a0015d0 <Chip_Clock_GetRate>
1a000ef0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000ef2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000ef6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000ef8:	f04f 0b00 	mov.w	fp, #0
1a000efc:	46a2      	mov	sl, r4
1a000efe:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000f00:	e02a      	b.n	1a000f58 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000f02:	4242      	negs	r2, r0
				div ++;
1a000f04:	1c4b      	adds	r3, r1, #1
1a000f06:	e017      	b.n	1a000f38 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000f08:	b30a      	cbz	r2, 1a000f4e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000f0a:	4617      	mov	r7, r2
			sd = d;
1a000f0c:	46ab      	mov	fp, r5
			sm = m;
1a000f0e:	46a2      	mov	sl, r4
			sdiv = div;
1a000f10:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000f12:	3501      	adds	r5, #1
1a000f14:	42ac      	cmp	r4, r5
1a000f16:	d91e      	bls.n	1a000f56 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f18:	0933      	lsrs	r3, r6, #4
1a000f1a:	0730      	lsls	r0, r6, #28
1a000f1c:	fba4 0100 	umull	r0, r1, r4, r0
1a000f20:	fb04 1103 	mla	r1, r4, r3, r1
1a000f24:	1962      	adds	r2, r4, r5
1a000f26:	fb08 f202 	mul.w	r2, r8, r2
1a000f2a:	2300      	movs	r3, #0
1a000f2c:	f000 fcec 	bl	1a001908 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000f30:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000f32:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000f34:	2800      	cmp	r0, #0
1a000f36:	dbe4      	blt.n	1a000f02 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f38:	4297      	cmp	r7, r2
1a000f3a:	d3ea      	bcc.n	1a000f12 <Chip_UART_SetBaudFDR+0x3a>
1a000f3c:	2b00      	cmp	r3, #0
1a000f3e:	d0e8      	beq.n	1a000f12 <Chip_UART_SetBaudFDR+0x3a>
1a000f40:	0c19      	lsrs	r1, r3, #16
1a000f42:	d1e6      	bne.n	1a000f12 <Chip_UART_SetBaudFDR+0x3a>
1a000f44:	2b02      	cmp	r3, #2
1a000f46:	d8df      	bhi.n	1a000f08 <Chip_UART_SetBaudFDR+0x30>
1a000f48:	2d00      	cmp	r5, #0
1a000f4a:	d0dd      	beq.n	1a000f08 <Chip_UART_SetBaudFDR+0x30>
1a000f4c:	e7e1      	b.n	1a000f12 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000f4e:	4617      	mov	r7, r2
			sd = d;
1a000f50:	46ab      	mov	fp, r5
			sm = m;
1a000f52:	46a2      	mov	sl, r4
			sdiv = div;
1a000f54:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000f56:	3401      	adds	r4, #1
1a000f58:	b11f      	cbz	r7, 1a000f62 <Chip_UART_SetBaudFDR+0x8a>
1a000f5a:	2c0f      	cmp	r4, #15
1a000f5c:	d801      	bhi.n	1a000f62 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000f5e:	2500      	movs	r5, #0
1a000f60:	e7d8      	b.n	1a000f14 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000f62:	f1b9 0f00 	cmp.w	r9, #0
1a000f66:	d01e      	beq.n	1a000fa6 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000f68:	9a01      	ldr	r2, [sp, #4]
1a000f6a:	4611      	mov	r1, r2
1a000f6c:	68d3      	ldr	r3, [r2, #12]
1a000f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f72:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a000f74:	fa5f f389 	uxtb.w	r3, r9
1a000f78:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000f7a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000f7e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000f80:	68d3      	ldr	r3, [r2, #12]
1a000f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f86:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000f88:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000f8c:	b2db      	uxtb	r3, r3
1a000f8e:	f00b 020f 	and.w	r2, fp, #15
1a000f92:	4313      	orrs	r3, r2
1a000f94:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000f96:	0933      	lsrs	r3, r6, #4
1a000f98:	fb0a f303 	mul.w	r3, sl, r3
1a000f9c:	44da      	add	sl, fp
1a000f9e:	fb09 f90a 	mul.w	r9, r9, sl
1a000fa2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000fa6:	4648      	mov	r0, r9
1a000fa8:	b003      	add	sp, #12
1a000faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000fae:	bf00      	nop
1a000fb0:	1a002774 	.word	0x1a002774

1a000fb4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000fb4:	4b03      	ldr	r3, [pc, #12]	; (1a000fc4 <Chip_ADC_GetClockIndex+0x10>)
1a000fb6:	4298      	cmp	r0, r3
1a000fb8:	d001      	beq.n	1a000fbe <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000fba:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000fbc:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000fbe:	2004      	movs	r0, #4
1a000fc0:	4770      	bx	lr
1a000fc2:	bf00      	nop
1a000fc4:	400e4000 	.word	0x400e4000

1a000fc8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000fc8:	b570      	push	{r4, r5, r6, lr}
1a000fca:	460d      	mov	r5, r1
1a000fcc:	4614      	mov	r4, r2
1a000fce:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000fd0:	f7ff fff0 	bl	1a000fb4 <Chip_ADC_GetClockIndex>
1a000fd4:	f000 fafc 	bl	1a0015d0 <Chip_Clock_GetRate>
	if (burstMode) {
1a000fd8:	b155      	cbz	r5, 1a000ff0 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000fda:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000fde:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000fe2:	0064      	lsls	r4, r4, #1
1a000fe4:	fbb0 f0f4 	udiv	r0, r0, r4
1a000fe8:	b2c0      	uxtb	r0, r0
1a000fea:	3801      	subs	r0, #1
	return div;
}
1a000fec:	b2c0      	uxtb	r0, r0
1a000fee:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000ff0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000ff4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000ff8:	e7f1      	b.n	1a000fde <getClkDiv+0x16>
1a000ffa:	Address 0x000000001a000ffa is out of bounds.


1a000ffc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000ffc:	b538      	push	{r3, r4, r5, lr}
1a000ffe:	4605      	mov	r5, r0
1a001000:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001002:	f7ff ffd7 	bl	1a000fb4 <Chip_ADC_GetClockIndex>
1a001006:	2301      	movs	r3, #1
1a001008:	461a      	mov	r2, r3
1a00100a:	4619      	mov	r1, r3
1a00100c:	f000 faa8 	bl	1a001560 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001010:	2100      	movs	r1, #0
1a001012:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001014:	4a08      	ldr	r2, [pc, #32]	; (1a001038 <Chip_ADC_Init+0x3c>)
1a001016:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001018:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00101a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00101c:	230b      	movs	r3, #11
1a00101e:	4628      	mov	r0, r5
1a001020:	f7ff ffd2 	bl	1a000fc8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001024:	0200      	lsls	r0, r0, #8
1a001026:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00102a:	7920      	ldrb	r0, [r4, #4]
1a00102c:	0440      	lsls	r0, r0, #17
1a00102e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001032:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001034:	6028      	str	r0, [r5, #0]
}
1a001036:	bd38      	pop	{r3, r4, r5, pc}
1a001038:	00061a80 	.word	0x00061a80

1a00103c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00103c:	b570      	push	{r4, r5, r6, lr}
1a00103e:	4605      	mov	r5, r0
1a001040:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001042:	6804      	ldr	r4, [r0, #0]
1a001044:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001048:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00104c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00104e:	790b      	ldrb	r3, [r1, #4]
1a001050:	f1c3 030b 	rsb	r3, r3, #11
1a001054:	b2db      	uxtb	r3, r3
1a001056:	7949      	ldrb	r1, [r1, #5]
1a001058:	f7ff ffb6 	bl	1a000fc8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00105c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001060:	7933      	ldrb	r3, [r6, #4]
1a001062:	045b      	lsls	r3, r3, #17
1a001064:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001068:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a00106a:	602b      	str	r3, [r5, #0]
}
1a00106c:	bd70      	pop	{r4, r5, r6, pc}

1a00106e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00106e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001070:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001072:	680a      	ldr	r2, [r1, #0]
1a001074:	f7ff ffe2 	bl	1a00103c <Chip_ADC_SetSampleRate>
}
1a001078:	bd08      	pop	{r3, pc}
1a00107a:	Address 0x000000001a00107a is out of bounds.


1a00107c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00107c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00107e:	2069      	movs	r0, #105	; 0x69
1a001080:	f000 faa6 	bl	1a0015d0 <Chip_Clock_GetRate>
1a001084:	4b01      	ldr	r3, [pc, #4]	; (1a00108c <SystemCoreClockUpdate+0x10>)
1a001086:	6018      	str	r0, [r3, #0]
}
1a001088:	bd08      	pop	{r3, pc}
1a00108a:	bf00      	nop
1a00108c:	10000178 	.word	0x10000178

1a001090 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001090:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001092:	680b      	ldr	r3, [r1, #0]
1a001094:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001098:	d002      	beq.n	1a0010a0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00109a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00109e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0010a0:	4607      	mov	r7, r0
1a0010a2:	2501      	movs	r5, #1
1a0010a4:	e03a      	b.n	1a00111c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0010a6:	694b      	ldr	r3, [r1, #20]
1a0010a8:	fb03 f302 	mul.w	r3, r3, r2
1a0010ac:	fbb3 f3f5 	udiv	r3, r3, r5
1a0010b0:	e01c      	b.n	1a0010ec <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0010b2:	461c      	mov	r4, r3
	if (val < 0)
1a0010b4:	ebb0 0c04 	subs.w	ip, r0, r4
1a0010b8:	d427      	bmi.n	1a00110a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0010ba:	4567      	cmp	r7, ip
1a0010bc:	d906      	bls.n	1a0010cc <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0010be:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0010c0:	1c77      	adds	r7, r6, #1
1a0010c2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0010c4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0010c6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0010c8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0010ca:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0010cc:	3201      	adds	r2, #1
1a0010ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0010d2:	dc1d      	bgt.n	1a001110 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0010d4:	680c      	ldr	r4, [r1, #0]
1a0010d6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0010da:	d0e4      	beq.n	1a0010a6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0010dc:	1c73      	adds	r3, r6, #1
1a0010de:	fa02 fc03 	lsl.w	ip, r2, r3
1a0010e2:	694b      	ldr	r3, [r1, #20]
1a0010e4:	fb03 f30c 	mul.w	r3, r3, ip
1a0010e8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0010ec:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001128 <pll_calc_divs+0x98>
1a0010f0:	4563      	cmp	r3, ip
1a0010f2:	d9eb      	bls.n	1a0010cc <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0010f4:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a00112c <pll_calc_divs+0x9c>
1a0010f8:	4563      	cmp	r3, ip
1a0010fa:	d809      	bhi.n	1a001110 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0010fc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001100:	d1d7      	bne.n	1a0010b2 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001102:	1c74      	adds	r4, r6, #1
1a001104:	fa23 f404 	lsr.w	r4, r3, r4
1a001108:	e7d4      	b.n	1a0010b4 <pll_calc_divs+0x24>
		return -val;
1a00110a:	f1cc 0c00 	rsb	ip, ip, #0
1a00110e:	e7d4      	b.n	1a0010ba <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001110:	3601      	adds	r6, #1
1a001112:	2e03      	cmp	r6, #3
1a001114:	dc01      	bgt.n	1a00111a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001116:	2201      	movs	r2, #1
1a001118:	e7d9      	b.n	1a0010ce <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a00111a:	3501      	adds	r5, #1
1a00111c:	2d04      	cmp	r5, #4
1a00111e:	dc01      	bgt.n	1a001124 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001120:	2600      	movs	r6, #0
1a001122:	e7f6      	b.n	1a001112 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001124:	bcf0      	pop	{r4, r5, r6, r7}
1a001126:	4770      	bx	lr
1a001128:	094c5eff 	.word	0x094c5eff
1a00112c:	1312d000 	.word	0x1312d000

1a001130 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001130:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001132:	b099      	sub	sp, #100	; 0x64
1a001134:	4605      	mov	r5, r0
1a001136:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001138:	225c      	movs	r2, #92	; 0x5c
1a00113a:	2100      	movs	r1, #0
1a00113c:	a801      	add	r0, sp, #4
1a00113e:	f000 fd89 	bl	1a001c54 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001142:	2380      	movs	r3, #128	; 0x80
1a001144:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001146:	6963      	ldr	r3, [r4, #20]
1a001148:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00114a:	7923      	ldrb	r3, [r4, #4]
1a00114c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001150:	4669      	mov	r1, sp
1a001152:	4628      	mov	r0, r5
1a001154:	f7ff ff9c 	bl	1a001090 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001158:	9b06      	ldr	r3, [sp, #24]
1a00115a:	42ab      	cmp	r3, r5
1a00115c:	d027      	beq.n	1a0011ae <pll_get_frac+0x7e>
	if (val < 0)
1a00115e:	1aeb      	subs	r3, r5, r3
1a001160:	d42e      	bmi.n	1a0011c0 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001162:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001164:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00116a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00116c:	6963      	ldr	r3, [r4, #20]
1a00116e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001170:	7923      	ldrb	r3, [r4, #4]
1a001172:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001176:	a910      	add	r1, sp, #64	; 0x40
1a001178:	4628      	mov	r0, r5
1a00117a:	f7ff ff89 	bl	1a001090 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00117e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001180:	42ab      	cmp	r3, r5
1a001182:	d01f      	beq.n	1a0011c4 <pll_get_frac+0x94>
	if (val < 0)
1a001184:	1aeb      	subs	r3, r5, r3
1a001186:	d425      	bmi.n	1a0011d4 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001188:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00118a:	4b2b      	ldr	r3, [pc, #172]	; (1a001238 <pll_get_frac+0x108>)
1a00118c:	429d      	cmp	r5, r3
1a00118e:	d923      	bls.n	1a0011d8 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001192:	1aed      	subs	r5, r5, r3
1a001194:	d433      	bmi.n	1a0011fe <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001196:	42ae      	cmp	r6, r5
1a001198:	dc3b      	bgt.n	1a001212 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00119a:	42be      	cmp	r6, r7
1a00119c:	dc31      	bgt.n	1a001202 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00119e:	466d      	mov	r5, sp
1a0011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0011ac:	e006      	b.n	1a0011bc <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0011ae:	466d      	mov	r5, sp
1a0011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0011bc:	b019      	add	sp, #100	; 0x64
1a0011be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0011c0:	425b      	negs	r3, r3
1a0011c2:	e7ce      	b.n	1a001162 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0011c4:	ad10      	add	r5, sp, #64	; 0x40
1a0011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0011d2:	e7f3      	b.n	1a0011bc <pll_get_frac+0x8c>
		return -val;
1a0011d4:	425b      	negs	r3, r3
1a0011d6:	e7d7      	b.n	1a001188 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0011d8:	2340      	movs	r3, #64	; 0x40
1a0011da:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0011dc:	6963      	ldr	r3, [r4, #20]
1a0011de:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0011e0:	a908      	add	r1, sp, #32
1a0011e2:	4628      	mov	r0, r5
1a0011e4:	f7ff ff54 	bl	1a001090 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0011e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0011ea:	42ab      	cmp	r3, r5
1a0011ec:	d1d0      	bne.n	1a001190 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0011ee:	ad08      	add	r5, sp, #32
1a0011f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0011fc:	e7de      	b.n	1a0011bc <pll_get_frac+0x8c>
		return -val;
1a0011fe:	426d      	negs	r5, r5
1a001200:	e7c9      	b.n	1a001196 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001202:	ad10      	add	r5, sp, #64	; 0x40
1a001204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001208:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001210:	e7d4      	b.n	1a0011bc <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001212:	42af      	cmp	r7, r5
1a001214:	db07      	blt.n	1a001226 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001216:	ad08      	add	r5, sp, #32
1a001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00121c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001224:	e7ca      	b.n	1a0011bc <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001226:	ad10      	add	r5, sp, #64	; 0x40
1a001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00122c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001234:	e7c2      	b.n	1a0011bc <pll_get_frac+0x8c>
1a001236:	bf00      	nop
1a001238:	068e7780 	.word	0x068e7780

1a00123c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00123c:	b430      	push	{r4, r5}
1a00123e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001240:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001242:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001244:	e000      	b.n	1a001248 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001246:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001248:	281c      	cmp	r0, #28
1a00124a:	d118      	bne.n	1a00127e <Chip_Clock_FindBaseClock+0x42>
1a00124c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001250:	0051      	lsls	r1, r2, #1
1a001252:	4a0c      	ldr	r2, [pc, #48]	; (1a001284 <Chip_Clock_FindBaseClock+0x48>)
1a001254:	440a      	add	r2, r1
1a001256:	7914      	ldrb	r4, [r2, #4]
1a001258:	4284      	cmp	r4, r0
1a00125a:	d010      	beq.n	1a00127e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00125c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001260:	004a      	lsls	r2, r1, #1
1a001262:	4908      	ldr	r1, [pc, #32]	; (1a001284 <Chip_Clock_FindBaseClock+0x48>)
1a001264:	5a8a      	ldrh	r2, [r1, r2]
1a001266:	42aa      	cmp	r2, r5
1a001268:	d8ed      	bhi.n	1a001246 <Chip_Clock_FindBaseClock+0xa>
1a00126a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00126e:	0051      	lsls	r1, r2, #1
1a001270:	4a04      	ldr	r2, [pc, #16]	; (1a001284 <Chip_Clock_FindBaseClock+0x48>)
1a001272:	440a      	add	r2, r1
1a001274:	8852      	ldrh	r2, [r2, #2]
1a001276:	42aa      	cmp	r2, r5
1a001278:	d3e5      	bcc.n	1a001246 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00127a:	4620      	mov	r0, r4
1a00127c:	e7e4      	b.n	1a001248 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00127e:	bc30      	pop	{r4, r5}
1a001280:	4770      	bx	lr
1a001282:	bf00      	nop
1a001284:	1a002790 	.word	0x1a002790

1a001288 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001288:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00128e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001290:	4a0d      	ldr	r2, [pc, #52]	; (1a0012c8 <Chip_Clock_EnableCrystal+0x40>)
1a001292:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001294:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001298:	6992      	ldr	r2, [r2, #24]
1a00129a:	428a      	cmp	r2, r1
1a00129c:	d001      	beq.n	1a0012a2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00129e:	4a0a      	ldr	r2, [pc, #40]	; (1a0012c8 <Chip_Clock_EnableCrystal+0x40>)
1a0012a0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0012a2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0012a6:	4a09      	ldr	r2, [pc, #36]	; (1a0012cc <Chip_Clock_EnableCrystal+0x44>)
1a0012a8:	6811      	ldr	r1, [r2, #0]
1a0012aa:	4a09      	ldr	r2, [pc, #36]	; (1a0012d0 <Chip_Clock_EnableCrystal+0x48>)
1a0012ac:	4291      	cmp	r1, r2
1a0012ae:	d901      	bls.n	1a0012b4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0012b0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0012b4:	4a04      	ldr	r2, [pc, #16]	; (1a0012c8 <Chip_Clock_EnableCrystal+0x40>)
1a0012b6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0012b8:	9b01      	ldr	r3, [sp, #4]
1a0012ba:	1e5a      	subs	r2, r3, #1
1a0012bc:	9201      	str	r2, [sp, #4]
1a0012be:	2b00      	cmp	r3, #0
1a0012c0:	d1fa      	bne.n	1a0012b8 <Chip_Clock_EnableCrystal+0x30>
}
1a0012c2:	b002      	add	sp, #8
1a0012c4:	4770      	bx	lr
1a0012c6:	bf00      	nop
1a0012c8:	40050000 	.word	0x40050000
1a0012cc:	1a0026cc 	.word	0x1a0026cc
1a0012d0:	01312cff 	.word	0x01312cff

1a0012d4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0012d4:	3012      	adds	r0, #18
1a0012d6:	4b05      	ldr	r3, [pc, #20]	; (1a0012ec <Chip_Clock_GetDividerSource+0x18>)
1a0012d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0012dc:	f010 0f01 	tst.w	r0, #1
1a0012e0:	d102      	bne.n	1a0012e8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0012e2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0012e6:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012e8:	2011      	movs	r0, #17
}
1a0012ea:	4770      	bx	lr
1a0012ec:	40050000 	.word	0x40050000

1a0012f0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0012f0:	f100 0212 	add.w	r2, r0, #18
1a0012f4:	4b03      	ldr	r3, [pc, #12]	; (1a001304 <Chip_Clock_GetDividerDivisor+0x14>)
1a0012f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0012fa:	4b03      	ldr	r3, [pc, #12]	; (1a001308 <Chip_Clock_GetDividerDivisor+0x18>)
1a0012fc:	5c18      	ldrb	r0, [r3, r0]
}
1a0012fe:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001302:	4770      	bx	lr
1a001304:	40050000 	.word	0x40050000
1a001308:	1a002788 	.word	0x1a002788

1a00130c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00130c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00130e:	2810      	cmp	r0, #16
1a001310:	d80a      	bhi.n	1a001328 <Chip_Clock_GetClockInputHz+0x1c>
1a001312:	e8df f000 	tbb	[pc, r0]
1a001316:	0b44      	.short	0x0b44
1a001318:	0921180d 	.word	0x0921180d
1a00131c:	2d2a2724 	.word	0x2d2a2724
1a001320:	34300909 	.word	0x34300909
1a001324:	3c38      	.short	0x3c38
1a001326:	40          	.byte	0x40
1a001327:	00          	.byte	0x00
	uint32_t rate = 0;
1a001328:	2000      	movs	r0, #0
1a00132a:	e03a      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a00132c:	481e      	ldr	r0, [pc, #120]	; (1a0013a8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00132e:	e038      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001330:	4b1e      	ldr	r3, [pc, #120]	; (1a0013ac <Chip_Clock_GetClockInputHz+0xa0>)
1a001332:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001336:	f003 0307 	and.w	r3, r3, #7
1a00133a:	2b04      	cmp	r3, #4
1a00133c:	d001      	beq.n	1a001342 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00133e:	481c      	ldr	r0, [pc, #112]	; (1a0013b0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001340:	e02f      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001342:	2000      	movs	r0, #0
1a001344:	e02d      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001346:	4b19      	ldr	r3, [pc, #100]	; (1a0013ac <Chip_Clock_GetClockInputHz+0xa0>)
1a001348:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00134c:	f003 0307 	and.w	r3, r3, #7
1a001350:	2b04      	cmp	r3, #4
1a001352:	d027      	beq.n	1a0013a4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001354:	4816      	ldr	r0, [pc, #88]	; (1a0013b0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001356:	e024      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001358:	4b16      	ldr	r3, [pc, #88]	; (1a0013b4 <Chip_Clock_GetClockInputHz+0xa8>)
1a00135a:	6818      	ldr	r0, [r3, #0]
		break;
1a00135c:	e021      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00135e:	4b16      	ldr	r3, [pc, #88]	; (1a0013b8 <Chip_Clock_GetClockInputHz+0xac>)
1a001360:	6818      	ldr	r0, [r3, #0]
		break;
1a001362:	e01e      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001364:	4b15      	ldr	r3, [pc, #84]	; (1a0013bc <Chip_Clock_GetClockInputHz+0xb0>)
1a001366:	6818      	ldr	r0, [r3, #0]
		break;
1a001368:	e01b      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00136a:	4b14      	ldr	r3, [pc, #80]	; (1a0013bc <Chip_Clock_GetClockInputHz+0xb0>)
1a00136c:	6858      	ldr	r0, [r3, #4]
		break;
1a00136e:	e018      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001370:	f000 f868 	bl	1a001444 <Chip_Clock_GetMainPLLHz>
		break;
1a001374:	e015      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001376:	2100      	movs	r1, #0
1a001378:	f000 f89a 	bl	1a0014b0 <Chip_Clock_GetDivRate>
		break;
1a00137c:	e011      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00137e:	2101      	movs	r1, #1
1a001380:	f000 f896 	bl	1a0014b0 <Chip_Clock_GetDivRate>
		break;
1a001384:	e00d      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001386:	2102      	movs	r1, #2
1a001388:	f000 f892 	bl	1a0014b0 <Chip_Clock_GetDivRate>
		break;
1a00138c:	e009      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00138e:	2103      	movs	r1, #3
1a001390:	f000 f88e 	bl	1a0014b0 <Chip_Clock_GetDivRate>
		break;
1a001394:	e005      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001396:	2104      	movs	r1, #4
1a001398:	f000 f88a 	bl	1a0014b0 <Chip_Clock_GetDivRate>
		break;
1a00139c:	e001      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a00139e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0013a2:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0013a4:	4806      	ldr	r0, [pc, #24]	; (1a0013c0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0013a6:	e7fc      	b.n	1a0013a2 <Chip_Clock_GetClockInputHz+0x96>
1a0013a8:	00b71b00 	.word	0x00b71b00
1a0013ac:	40043000 	.word	0x40043000
1a0013b0:	017d7840 	.word	0x017d7840
1a0013b4:	1a0026a0 	.word	0x1a0026a0
1a0013b8:	1a0026cc 	.word	0x1a0026cc
1a0013bc:	10000154 	.word	0x10000154
1a0013c0:	02faf080 	.word	0x02faf080

1a0013c4 <Chip_Clock_CalcMainPLLValue>:
{
1a0013c4:	b538      	push	{r3, r4, r5, lr}
1a0013c6:	4605      	mov	r5, r0
1a0013c8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0013ca:	7908      	ldrb	r0, [r1, #4]
1a0013cc:	f7ff ff9e 	bl	1a00130c <Chip_Clock_GetClockInputHz>
1a0013d0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0013d2:	4b19      	ldr	r3, [pc, #100]	; (1a001438 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0013d4:	442b      	add	r3, r5
1a0013d6:	4a19      	ldr	r2, [pc, #100]	; (1a00143c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0013d8:	4293      	cmp	r3, r2
1a0013da:	d821      	bhi.n	1a001420 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0013dc:	b318      	cbz	r0, 1a001426 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0013de:	2380      	movs	r3, #128	; 0x80
1a0013e0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0013e2:	2300      	movs	r3, #0
1a0013e4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0013e6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0013e8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0013ec:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0013ee:	4a14      	ldr	r2, [pc, #80]	; (1a001440 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0013f0:	4295      	cmp	r5, r2
1a0013f2:	d903      	bls.n	1a0013fc <Chip_Clock_CalcMainPLLValue+0x38>
1a0013f4:	fb03 f000 	mul.w	r0, r3, r0
1a0013f8:	42a8      	cmp	r0, r5
1a0013fa:	d007      	beq.n	1a00140c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0013fc:	4621      	mov	r1, r4
1a0013fe:	4628      	mov	r0, r5
1a001400:	f7ff fe96 	bl	1a001130 <pll_get_frac>
		if (!ppll->nsel) {
1a001404:	68a3      	ldr	r3, [r4, #8]
1a001406:	b18b      	cbz	r3, 1a00142c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001408:	3b01      	subs	r3, #1
1a00140a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00140c:	6923      	ldr	r3, [r4, #16]
1a00140e:	b183      	cbz	r3, 1a001432 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001410:	68e2      	ldr	r2, [r4, #12]
1a001412:	b10a      	cbz	r2, 1a001418 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001414:	3a01      	subs	r2, #1
1a001416:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001418:	3b01      	subs	r3, #1
1a00141a:	6123      	str	r3, [r4, #16]
	return 0;
1a00141c:	2000      	movs	r0, #0
}
1a00141e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001424:	e7fb      	b.n	1a00141e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00142a:	e7f8      	b.n	1a00141e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a00142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001430:	e7f5      	b.n	1a00141e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001436:	e7f2      	b.n	1a00141e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001438:	ff6b3a10 	.word	0xff6b3a10
1a00143c:	0b940510 	.word	0x0b940510
1a001440:	094c5eff 	.word	0x094c5eff

1a001444 <Chip_Clock_GetMainPLLHz>:
{
1a001444:	b530      	push	{r4, r5, lr}
1a001446:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001448:	4d17      	ldr	r5, [pc, #92]	; (1a0014a8 <Chip_Clock_GetMainPLLHz+0x64>)
1a00144a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00144c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001450:	f7ff ff5c 	bl	1a00130c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001454:	4b15      	ldr	r3, [pc, #84]	; (1a0014ac <Chip_Clock_GetMainPLLHz+0x68>)
1a001456:	681b      	ldr	r3, [r3, #0]
1a001458:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00145a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00145c:	f013 0f01 	tst.w	r3, #1
1a001460:	d020      	beq.n	1a0014a4 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001462:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001466:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00146a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00146e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001472:	3301      	adds	r3, #1
	n = nsel + 1;
1a001474:	3201      	adds	r2, #1
	p = ptab[psel];
1a001476:	f10d 0c08 	add.w	ip, sp, #8
1a00147a:	4461      	add	r1, ip
1a00147c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001480:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001484:	d108      	bne.n	1a001498 <Chip_Clock_GetMainPLLHz+0x54>
1a001486:	b93d      	cbnz	r5, 1a001498 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001488:	0049      	lsls	r1, r1, #1
1a00148a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00148e:	fbb0 f0f2 	udiv	r0, r0, r2
1a001492:	fb00 f003 	mul.w	r0, r0, r3
1a001496:	e003      	b.n	1a0014a0 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001498:	fbb0 f0f2 	udiv	r0, r0, r2
1a00149c:	fb03 f000 	mul.w	r0, r3, r0
}
1a0014a0:	b003      	add	sp, #12
1a0014a2:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0014a4:	2000      	movs	r0, #0
1a0014a6:	e7fb      	b.n	1a0014a0 <Chip_Clock_GetMainPLLHz+0x5c>
1a0014a8:	40050000 	.word	0x40050000
1a0014ac:	1a002784 	.word	0x1a002784

1a0014b0 <Chip_Clock_GetDivRate>:
{
1a0014b0:	b538      	push	{r3, r4, r5, lr}
1a0014b2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0014b4:	4608      	mov	r0, r1
1a0014b6:	f7ff ff0d 	bl	1a0012d4 <Chip_Clock_GetDividerSource>
1a0014ba:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0014bc:	4620      	mov	r0, r4
1a0014be:	f7ff ff17 	bl	1a0012f0 <Chip_Clock_GetDividerDivisor>
1a0014c2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0014c4:	4628      	mov	r0, r5
1a0014c6:	f7ff ff21 	bl	1a00130c <Chip_Clock_GetClockInputHz>
1a0014ca:	3401      	adds	r4, #1
}
1a0014cc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0014d0:	bd38      	pop	{r3, r4, r5, pc}
1a0014d2:	Address 0x000000001a0014d2 is out of bounds.


1a0014d4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0014d4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0014d6:	f100 0416 	add.w	r4, r0, #22
1a0014da:	00a4      	lsls	r4, r4, #2
1a0014dc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0014e0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0014e4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0014e6:	281b      	cmp	r0, #27
1a0014e8:	d813      	bhi.n	1a001512 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0014ea:	2911      	cmp	r1, #17
1a0014ec:	d01a      	beq.n	1a001524 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0014ee:	4d0e      	ldr	r5, [pc, #56]	; (1a001528 <Chip_Clock_SetBaseClock+0x54>)
1a0014f0:	4025      	ands	r5, r4

			if (autoblocken) {
1a0014f2:	b10a      	cbz	r2, 1a0014f8 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0014f4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0014f8:	b10b      	cbz	r3, 1a0014fe <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0014fa:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0014fe:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001502:	3016      	adds	r0, #22
1a001504:	0080      	lsls	r0, r0, #2
1a001506:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00150a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00150e:	6045      	str	r5, [r0, #4]
1a001510:	e008      	b.n	1a001524 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001512:	f044 0401 	orr.w	r4, r4, #1
1a001516:	3016      	adds	r0, #22
1a001518:	0080      	lsls	r0, r0, #2
1a00151a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00151e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001522:	6044      	str	r4, [r0, #4]
	}
}
1a001524:	bc30      	pop	{r4, r5}
1a001526:	4770      	bx	lr
1a001528:	e0fff7fe 	.word	0xe0fff7fe

1a00152c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00152c:	281b      	cmp	r0, #27
1a00152e:	d80c      	bhi.n	1a00154a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001530:	3016      	adds	r0, #22
1a001532:	0080      	lsls	r0, r0, #2
1a001534:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001538:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00153c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00153e:	f010 0f01 	tst.w	r0, #1
1a001542:	d104      	bne.n	1a00154e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001544:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001548:	4770      	bx	lr
		return CLKINPUT_PD;
1a00154a:	2011      	movs	r0, #17
1a00154c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00154e:	2011      	movs	r0, #17
}
1a001550:	4770      	bx	lr

1a001552 <Chip_Clock_GetBaseClocktHz>:
{
1a001552:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001554:	f7ff ffea 	bl	1a00152c <Chip_Clock_GetBaseClock>
1a001558:	f7ff fed8 	bl	1a00130c <Chip_Clock_GetClockInputHz>
}
1a00155c:	bd08      	pop	{r3, pc}
1a00155e:	Address 0x000000001a00155e is out of bounds.


1a001560 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001560:	b971      	cbnz	r1, 1a001580 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001562:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001564:	b10a      	cbz	r2, 1a00156a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001566:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00156a:	2b02      	cmp	r3, #2
1a00156c:	d00a      	beq.n	1a001584 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00156e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001572:	d30a      	bcc.n	1a00158a <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001574:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001578:	4b06      	ldr	r3, [pc, #24]	; (1a001594 <Chip_Clock_EnableOpts+0x34>)
1a00157a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00157e:	4770      	bx	lr
		reg |= (1 << 1);
1a001580:	2103      	movs	r1, #3
1a001582:	e7ef      	b.n	1a001564 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001584:	f041 0120 	orr.w	r1, r1, #32
1a001588:	e7f1      	b.n	1a00156e <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00158a:	3020      	adds	r0, #32
1a00158c:	4b02      	ldr	r3, [pc, #8]	; (1a001598 <Chip_Clock_EnableOpts+0x38>)
1a00158e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001592:	4770      	bx	lr
1a001594:	40052000 	.word	0x40052000
1a001598:	40051000 	.word	0x40051000

1a00159c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00159c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015a0:	d309      	bcc.n	1a0015b6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0015a2:	4a09      	ldr	r2, [pc, #36]	; (1a0015c8 <Chip_Clock_Enable+0x2c>)
1a0015a4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0015a8:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0015ac:	f043 0301 	orr.w	r3, r3, #1
1a0015b0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0015b4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0015b6:	4a05      	ldr	r2, [pc, #20]	; (1a0015cc <Chip_Clock_Enable+0x30>)
1a0015b8:	3020      	adds	r0, #32
1a0015ba:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0015be:	f043 0301 	orr.w	r3, r3, #1
1a0015c2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0015c6:	4770      	bx	lr
1a0015c8:	40052000 	.word	0x40052000
1a0015cc:	40051000 	.word	0x40051000

1a0015d0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0015d0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0015d2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015d6:	d309      	bcc.n	1a0015ec <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0015d8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0015dc:	4a0d      	ldr	r2, [pc, #52]	; (1a001614 <Chip_Clock_GetRate+0x44>)
1a0015de:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0015e2:	f014 0f01 	tst.w	r4, #1
1a0015e6:	d107      	bne.n	1a0015f8 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0015e8:	2000      	movs	r0, #0
	}

	return rate;
}
1a0015ea:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0015ec:	f100 0320 	add.w	r3, r0, #32
1a0015f0:	4a09      	ldr	r2, [pc, #36]	; (1a001618 <Chip_Clock_GetRate+0x48>)
1a0015f2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0015f6:	e7f4      	b.n	1a0015e2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0015f8:	f7ff fe20 	bl	1a00123c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0015fc:	f7ff ffa9 	bl	1a001552 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001600:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001604:	d103      	bne.n	1a00160e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001606:	2301      	movs	r3, #1
		rate = rate / div;
1a001608:	fbb0 f0f3 	udiv	r0, r0, r3
1a00160c:	e7ed      	b.n	1a0015ea <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00160e:	2302      	movs	r3, #2
1a001610:	e7fa      	b.n	1a001608 <Chip_Clock_GetRate+0x38>
1a001612:	bf00      	nop
1a001614:	40052000 	.word	0x40052000
1a001618:	40051000 	.word	0x40051000

1a00161c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a00161c:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a00161e:	4b0f      	ldr	r3, [pc, #60]	; (1a00165c <fpuInit+0x40>)
1a001620:	681b      	ldr	r3, [r3, #0]
1a001622:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a001624:	4b0e      	ldr	r3, [pc, #56]	; (1a001660 <fpuInit+0x44>)
1a001626:	681b      	ldr	r3, [r3, #0]
1a001628:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00162a:	9a02      	ldr	r2, [sp, #8]
1a00162c:	4b0d      	ldr	r3, [pc, #52]	; (1a001664 <fpuInit+0x48>)
1a00162e:	429a      	cmp	r2, r3
1a001630:	d00c      	beq.n	1a00164c <fpuInit+0x30>
1a001632:	2300      	movs	r3, #0

	if (vfpPresent) {
1a001634:	b143      	cbz	r3, 1a001648 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a001636:	4a0c      	ldr	r2, [pc, #48]	; (1a001668 <fpuInit+0x4c>)
1a001638:	6813      	ldr	r3, [r2, #0]
1a00163a:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a00163c:	9b03      	ldr	r3, [sp, #12]
1a00163e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001642:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a001644:	9b03      	ldr	r3, [sp, #12]
1a001646:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a001648:	b004      	add	sp, #16
1a00164a:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00164c:	9a01      	ldr	r2, [sp, #4]
1a00164e:	4b07      	ldr	r3, [pc, #28]	; (1a00166c <fpuInit+0x50>)
1a001650:	429a      	cmp	r2, r3
1a001652:	d001      	beq.n	1a001658 <fpuInit+0x3c>
1a001654:	2300      	movs	r3, #0
1a001656:	e7ed      	b.n	1a001634 <fpuInit+0x18>
1a001658:	2301      	movs	r3, #1
1a00165a:	e7eb      	b.n	1a001634 <fpuInit+0x18>
1a00165c:	e000ef40 	.word	0xe000ef40
1a001660:	e000ef44 	.word	0xe000ef44
1a001664:	10110021 	.word	0x10110021
1a001668:	e000ed88 	.word	0xe000ed88
1a00166c:	11000011 	.word	0x11000011

1a001670 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001670:	4770      	bx	lr
1a001672:	Address 0x000000001a001672 is out of bounds.


1a001674 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001674:	b570      	push	{r4, r5, r6, lr}
1a001676:	b08a      	sub	sp, #40	; 0x28
1a001678:	4605      	mov	r5, r0
1a00167a:	460e      	mov	r6, r1
1a00167c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00167e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001682:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001684:	2806      	cmp	r0, #6
1a001686:	d018      	beq.n	1a0016ba <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001688:	2300      	movs	r3, #0
1a00168a:	2201      	movs	r2, #1
1a00168c:	4629      	mov	r1, r5
1a00168e:	2004      	movs	r0, #4
1a001690:	f7ff ff20 	bl	1a0014d4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001694:	4a4a      	ldr	r2, [pc, #296]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001696:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001698:	f043 0301 	orr.w	r3, r3, #1
1a00169c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00169e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0016a2:	a901      	add	r1, sp, #4
1a0016a4:	4630      	mov	r0, r6
1a0016a6:	f7ff fe8d 	bl	1a0013c4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0016aa:	4b46      	ldr	r3, [pc, #280]	; (1a0017c4 <Chip_SetupCoreClock+0x150>)
1a0016ac:	429e      	cmp	r6, r3
1a0016ae:	d916      	bls.n	1a0016de <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0016b0:	9b01      	ldr	r3, [sp, #4]
1a0016b2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0016b6:	d003      	beq.n	1a0016c0 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0016b8:	e7fe      	b.n	1a0016b8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0016ba:	f7ff fde5 	bl	1a001288 <Chip_Clock_EnableCrystal>
1a0016be:	e7e3      	b.n	1a001688 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0016c0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0016c4:	d005      	beq.n	1a0016d2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0016c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0016ca:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0016cc:	2500      	movs	r5, #0
			direct = 1;
1a0016ce:	2601      	movs	r6, #1
1a0016d0:	e007      	b.n	1a0016e2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0016d2:	9b04      	ldr	r3, [sp, #16]
1a0016d4:	3301      	adds	r3, #1
1a0016d6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0016d8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0016da:	2600      	movs	r6, #0
1a0016dc:	e001      	b.n	1a0016e2 <Chip_SetupCoreClock+0x6e>
1a0016de:	2500      	movs	r5, #0
1a0016e0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0016e2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0016e6:	9b01      	ldr	r3, [sp, #4]
1a0016e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0016ec:	9a05      	ldr	r2, [sp, #20]
1a0016ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0016f2:	9a03      	ldr	r2, [sp, #12]
1a0016f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0016f8:	9a04      	ldr	r2, [sp, #16]
1a0016fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0016fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001702:	4a2f      	ldr	r2, [pc, #188]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001704:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001706:	4b2e      	ldr	r3, [pc, #184]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00170a:	f013 0f01 	tst.w	r3, #1
1a00170e:	d0fa      	beq.n	1a001706 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001710:	2300      	movs	r3, #0
1a001712:	2201      	movs	r2, #1
1a001714:	2109      	movs	r1, #9
1a001716:	2004      	movs	r0, #4
1a001718:	f7ff fedc 	bl	1a0014d4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00171c:	b306      	cbz	r6, 1a001760 <Chip_SetupCoreClock+0xec>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00171e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001722:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001724:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001726:	1e5a      	subs	r2, r3, #1
1a001728:	9209      	str	r2, [sp, #36]	; 0x24
1a00172a:	2b00      	cmp	r3, #0
1a00172c:	d1fa      	bne.n	1a001724 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00172e:	9b01      	ldr	r3, [sp, #4]
1a001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001734:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001736:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00173a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00173e:	9a05      	ldr	r2, [sp, #20]
1a001740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001744:	9a03      	ldr	r2, [sp, #12]
1a001746:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00174a:	9a04      	ldr	r2, [sp, #16]
1a00174c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001754:	4a1a      	ldr	r2, [pc, #104]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001756:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001758:	2c00      	cmp	r4, #0
1a00175a:	d12e      	bne.n	1a0017ba <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00175c:	b00a      	add	sp, #40	; 0x28
1a00175e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001760:	2d00      	cmp	r5, #0
1a001762:	d0f9      	beq.n	1a001758 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001764:	f242 7310 	movw	r3, #10000	; 0x2710
1a001768:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00176a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00176c:	1e5a      	subs	r2, r3, #1
1a00176e:	9209      	str	r2, [sp, #36]	; 0x24
1a001770:	2b00      	cmp	r3, #0
1a001772:	d1fa      	bne.n	1a00176a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001774:	9b04      	ldr	r3, [sp, #16]
1a001776:	1e5a      	subs	r2, r3, #1
1a001778:	9204      	str	r2, [sp, #16]
1a00177a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00177e:	9b01      	ldr	r3, [sp, #4]
1a001780:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001784:	9905      	ldr	r1, [sp, #20]
1a001786:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00178a:	9903      	ldr	r1, [sp, #12]
1a00178c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001790:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001798:	4a09      	ldr	r2, [pc, #36]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a00179a:	6453      	str	r3, [r2, #68]	; 0x44
1a00179c:	e7dc      	b.n	1a001758 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00179e:	480a      	ldr	r0, [pc, #40]	; (1a0017c8 <Chip_SetupCoreClock+0x154>)
1a0017a0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0017a4:	78cb      	ldrb	r3, [r1, #3]
1a0017a6:	788a      	ldrb	r2, [r1, #2]
1a0017a8:	7849      	ldrb	r1, [r1, #1]
1a0017aa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0017ae:	f7ff fe91 	bl	1a0014d4 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0017b2:	3401      	adds	r4, #1
1a0017b4:	2c11      	cmp	r4, #17
1a0017b6:	d9f2      	bls.n	1a00179e <Chip_SetupCoreClock+0x12a>
1a0017b8:	e7d0      	b.n	1a00175c <Chip_SetupCoreClock+0xe8>
1a0017ba:	2400      	movs	r4, #0
1a0017bc:	e7fa      	b.n	1a0017b4 <Chip_SetupCoreClock+0x140>
1a0017be:	bf00      	nop
1a0017c0:	40050000 	.word	0x40050000
1a0017c4:	068e7780 	.word	0x068e7780
1a0017c8:	1a0027fc 	.word	0x1a0027fc

1a0017cc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0017cc:	4b03      	ldr	r3, [pc, #12]	; (1a0017dc <Chip_SSP_GetClockIndex+0x10>)
1a0017ce:	4298      	cmp	r0, r3
1a0017d0:	d001      	beq.n	1a0017d6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0017d2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0017d4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0017d6:	20a5      	movs	r0, #165	; 0xa5
1a0017d8:	4770      	bx	lr
1a0017da:	bf00      	nop
1a0017dc:	400c5000 	.word	0x400c5000

1a0017e0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0017e0:	4b04      	ldr	r3, [pc, #16]	; (1a0017f4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0017e2:	4298      	cmp	r0, r3
1a0017e4:	d002      	beq.n	1a0017ec <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0017e6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0017ea:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0017ec:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0017f0:	4770      	bx	lr
1a0017f2:	bf00      	nop
1a0017f4:	400c5000 	.word	0x400c5000

1a0017f8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0017f8:	6803      	ldr	r3, [r0, #0]
1a0017fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0017fe:	0209      	lsls	r1, r1, #8
1a001800:	b289      	uxth	r1, r1
1a001802:	4319      	orrs	r1, r3
1a001804:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001806:	6102      	str	r2, [r0, #16]
}
1a001808:	4770      	bx	lr

1a00180a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00180a:	b570      	push	{r4, r5, r6, lr}
1a00180c:	4606      	mov	r6, r0
1a00180e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001810:	f7ff ffe6 	bl	1a0017e0 <Chip_SSP_GetPeriphClockIndex>
1a001814:	f7ff fedc 	bl	1a0015d0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001818:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00181e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001820:	e000      	b.n	1a001824 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001822:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001824:	42ab      	cmp	r3, r5
1a001826:	d90b      	bls.n	1a001840 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001828:	1c4c      	adds	r4, r1, #1
1a00182a:	fb02 f304 	mul.w	r3, r2, r4
1a00182e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001832:	429d      	cmp	r5, r3
1a001834:	d2f6      	bcs.n	1a001824 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001836:	2cff      	cmp	r4, #255	; 0xff
1a001838:	d9f3      	bls.n	1a001822 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00183a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00183c:	2100      	movs	r1, #0
1a00183e:	e7f1      	b.n	1a001824 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001840:	4630      	mov	r0, r6
1a001842:	f7ff ffd9 	bl	1a0017f8 <Chip_SSP_SetClockRate>
}
1a001846:	bd70      	pop	{r4, r5, r6, pc}

1a001848 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001848:	b510      	push	{r4, lr}
1a00184a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00184c:	f7ff ffbe 	bl	1a0017cc <Chip_SSP_GetClockIndex>
1a001850:	f7ff fea4 	bl	1a00159c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001854:	4620      	mov	r0, r4
1a001856:	f7ff ffc3 	bl	1a0017e0 <Chip_SSP_GetPeriphClockIndex>
1a00185a:	f7ff fe9f 	bl	1a00159c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00185e:	6863      	ldr	r3, [r4, #4]
1a001860:	f023 0304 	bic.w	r3, r3, #4
1a001864:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001866:	6823      	ldr	r3, [r4, #0]
1a001868:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00186c:	f043 0307 	orr.w	r3, r3, #7
1a001870:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001872:	4902      	ldr	r1, [pc, #8]	; (1a00187c <Chip_SSP_Init+0x34>)
1a001874:	4620      	mov	r0, r4
1a001876:	f7ff ffc8 	bl	1a00180a <Chip_SSP_SetBitRate>
}
1a00187a:	bd10      	pop	{r4, pc}
1a00187c:	000186a0 	.word	0x000186a0

1a001880 <ResetISR>:
void ResetISR(void) {
1a001880:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a001882:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001884:	4b18      	ldr	r3, [pc, #96]	; (1a0018e8 <ResetISR+0x68>)
1a001886:	4a19      	ldr	r2, [pc, #100]	; (1a0018ec <ResetISR+0x6c>)
1a001888:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00188a:	3304      	adds	r3, #4
1a00188c:	4a18      	ldr	r2, [pc, #96]	; (1a0018f0 <ResetISR+0x70>)
1a00188e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001890:	2300      	movs	r3, #0
1a001892:	e005      	b.n	1a0018a0 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001894:	4a17      	ldr	r2, [pc, #92]	; (1a0018f4 <ResetISR+0x74>)
1a001896:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00189a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00189e:	3301      	adds	r3, #1
1a0018a0:	2b07      	cmp	r3, #7
1a0018a2:	d9f7      	bls.n	1a001894 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0018a4:	b662      	cpsie	i
    SystemInit();
1a0018a6:	f7ff fa33 	bl	1a000d10 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0018aa:	4b13      	ldr	r3, [pc, #76]	; (1a0018f8 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0018ac:	e007      	b.n	1a0018be <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a0018ae:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0018b2:	689a      	ldr	r2, [r3, #8]
1a0018b4:	6859      	ldr	r1, [r3, #4]
1a0018b6:	6818      	ldr	r0, [r3, #0]
1a0018b8:	f7fe fc6d 	bl	1a000196 <data_init>
        SectionLen = *SectionTableAddr++;
1a0018bc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0018be:	4a0f      	ldr	r2, [pc, #60]	; (1a0018fc <ResetISR+0x7c>)
1a0018c0:	4293      	cmp	r3, r2
1a0018c2:	d3f4      	bcc.n	1a0018ae <ResetISR+0x2e>
1a0018c4:	e006      	b.n	1a0018d4 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a0018c6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0018c8:	6859      	ldr	r1, [r3, #4]
1a0018ca:	f854 0b08 	ldr.w	r0, [r4], #8
1a0018ce:	f7fe fc71 	bl	1a0001b4 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0018d2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0018d4:	4a0a      	ldr	r2, [pc, #40]	; (1a001900 <ResetISR+0x80>)
1a0018d6:	4293      	cmp	r3, r2
1a0018d8:	d3f5      	bcc.n	1a0018c6 <ResetISR+0x46>
    __libc_init_array();
1a0018da:	f000 f997 	bl	1a001c0c <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0018de:	f7ff f997 	bl	1a000c10 <Board_Init>
    main();
1a0018e2:	f7fe fd0d 	bl	1a000300 <main>
        ;
1a0018e6:	e7fe      	b.n	1a0018e6 <ResetISR+0x66>
1a0018e8:	40053100 	.word	0x40053100
1a0018ec:	10df1000 	.word	0x10df1000
1a0018f0:	01dff7ff 	.word	0x01dff7ff
1a0018f4:	e000e280 	.word	0xe000e280
1a0018f8:	1a000114 	.word	0x1a000114
1a0018fc:	1a000150 	.word	0x1a000150
1a001900:	1a000178 	.word	0x1a000178

1a001904 <_init>:
void _init(void) {}
1a001904:	4770      	bx	lr
1a001906:	Address 0x000000001a001906 is out of bounds.


1a001908 <__aeabi_uldivmod>:
1a001908:	b953      	cbnz	r3, 1a001920 <__aeabi_uldivmod+0x18>
1a00190a:	b94a      	cbnz	r2, 1a001920 <__aeabi_uldivmod+0x18>
1a00190c:	2900      	cmp	r1, #0
1a00190e:	bf08      	it	eq
1a001910:	2800      	cmpeq	r0, #0
1a001912:	bf1c      	itt	ne
1a001914:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001918:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00191c:	f000 b974 	b.w	1a001c08 <__aeabi_idiv0>
1a001920:	f1ad 0c08 	sub.w	ip, sp, #8
1a001924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001928:	f000 f806 	bl	1a001938 <__udivmoddi4>
1a00192c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001934:	b004      	add	sp, #16
1a001936:	4770      	bx	lr

1a001938 <__udivmoddi4>:
1a001938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00193c:	9e08      	ldr	r6, [sp, #32]
1a00193e:	4604      	mov	r4, r0
1a001940:	4688      	mov	r8, r1
1a001942:	2b00      	cmp	r3, #0
1a001944:	f040 8085 	bne.w	1a001a52 <__udivmoddi4+0x11a>
1a001948:	428a      	cmp	r2, r1
1a00194a:	4615      	mov	r5, r2
1a00194c:	d948      	bls.n	1a0019e0 <__udivmoddi4+0xa8>
1a00194e:	fab2 f282 	clz	r2, r2
1a001952:	b14a      	cbz	r2, 1a001968 <__udivmoddi4+0x30>
1a001954:	f1c2 0720 	rsb	r7, r2, #32
1a001958:	fa01 f302 	lsl.w	r3, r1, r2
1a00195c:	fa20 f707 	lsr.w	r7, r0, r7
1a001960:	4095      	lsls	r5, r2
1a001962:	ea47 0803 	orr.w	r8, r7, r3
1a001966:	4094      	lsls	r4, r2
1a001968:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00196c:	0c23      	lsrs	r3, r4, #16
1a00196e:	fbb8 f7fe 	udiv	r7, r8, lr
1a001972:	fa1f fc85 	uxth.w	ip, r5
1a001976:	fb0e 8817 	mls	r8, lr, r7, r8
1a00197a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00197e:	fb07 f10c 	mul.w	r1, r7, ip
1a001982:	4299      	cmp	r1, r3
1a001984:	d909      	bls.n	1a00199a <__udivmoddi4+0x62>
1a001986:	18eb      	adds	r3, r5, r3
1a001988:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00198c:	f080 80e3 	bcs.w	1a001b56 <__udivmoddi4+0x21e>
1a001990:	4299      	cmp	r1, r3
1a001992:	f240 80e0 	bls.w	1a001b56 <__udivmoddi4+0x21e>
1a001996:	3f02      	subs	r7, #2
1a001998:	442b      	add	r3, r5
1a00199a:	1a5b      	subs	r3, r3, r1
1a00199c:	b2a4      	uxth	r4, r4
1a00199e:	fbb3 f0fe 	udiv	r0, r3, lr
1a0019a2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0019a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0019aa:	fb00 fc0c 	mul.w	ip, r0, ip
1a0019ae:	45a4      	cmp	ip, r4
1a0019b0:	d909      	bls.n	1a0019c6 <__udivmoddi4+0x8e>
1a0019b2:	192c      	adds	r4, r5, r4
1a0019b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0019b8:	f080 80cb 	bcs.w	1a001b52 <__udivmoddi4+0x21a>
1a0019bc:	45a4      	cmp	ip, r4
1a0019be:	f240 80c8 	bls.w	1a001b52 <__udivmoddi4+0x21a>
1a0019c2:	3802      	subs	r0, #2
1a0019c4:	442c      	add	r4, r5
1a0019c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0019ca:	eba4 040c 	sub.w	r4, r4, ip
1a0019ce:	2700      	movs	r7, #0
1a0019d0:	b11e      	cbz	r6, 1a0019da <__udivmoddi4+0xa2>
1a0019d2:	40d4      	lsrs	r4, r2
1a0019d4:	2300      	movs	r3, #0
1a0019d6:	e9c6 4300 	strd	r4, r3, [r6]
1a0019da:	4639      	mov	r1, r7
1a0019dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0019e0:	2a00      	cmp	r2, #0
1a0019e2:	d053      	beq.n	1a001a8c <__udivmoddi4+0x154>
1a0019e4:	fab2 f282 	clz	r2, r2
1a0019e8:	2a00      	cmp	r2, #0
1a0019ea:	f040 80b6 	bne.w	1a001b5a <__udivmoddi4+0x222>
1a0019ee:	1b49      	subs	r1, r1, r5
1a0019f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0019f4:	fa1f f885 	uxth.w	r8, r5
1a0019f8:	2701      	movs	r7, #1
1a0019fa:	fbb1 fcfe 	udiv	ip, r1, lr
1a0019fe:	0c23      	lsrs	r3, r4, #16
1a001a00:	fb0e 111c 	mls	r1, lr, ip, r1
1a001a04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001a08:	fb08 f10c 	mul.w	r1, r8, ip
1a001a0c:	4299      	cmp	r1, r3
1a001a0e:	d907      	bls.n	1a001a20 <__udivmoddi4+0xe8>
1a001a10:	18eb      	adds	r3, r5, r3
1a001a12:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001a16:	d202      	bcs.n	1a001a1e <__udivmoddi4+0xe6>
1a001a18:	4299      	cmp	r1, r3
1a001a1a:	f200 80ec 	bhi.w	1a001bf6 <__udivmoddi4+0x2be>
1a001a1e:	4684      	mov	ip, r0
1a001a20:	1a59      	subs	r1, r3, r1
1a001a22:	b2a3      	uxth	r3, r4
1a001a24:	fbb1 f0fe 	udiv	r0, r1, lr
1a001a28:	fb0e 1410 	mls	r4, lr, r0, r1
1a001a2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001a30:	fb08 f800 	mul.w	r8, r8, r0
1a001a34:	45a0      	cmp	r8, r4
1a001a36:	d907      	bls.n	1a001a48 <__udivmoddi4+0x110>
1a001a38:	192c      	adds	r4, r5, r4
1a001a3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001a3e:	d202      	bcs.n	1a001a46 <__udivmoddi4+0x10e>
1a001a40:	45a0      	cmp	r8, r4
1a001a42:	f200 80dc 	bhi.w	1a001bfe <__udivmoddi4+0x2c6>
1a001a46:	4618      	mov	r0, r3
1a001a48:	eba4 0408 	sub.w	r4, r4, r8
1a001a4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001a50:	e7be      	b.n	1a0019d0 <__udivmoddi4+0x98>
1a001a52:	428b      	cmp	r3, r1
1a001a54:	d908      	bls.n	1a001a68 <__udivmoddi4+0x130>
1a001a56:	2e00      	cmp	r6, #0
1a001a58:	d078      	beq.n	1a001b4c <__udivmoddi4+0x214>
1a001a5a:	2700      	movs	r7, #0
1a001a5c:	e9c6 0100 	strd	r0, r1, [r6]
1a001a60:	4638      	mov	r0, r7
1a001a62:	4639      	mov	r1, r7
1a001a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001a68:	fab3 f783 	clz	r7, r3
1a001a6c:	b97f      	cbnz	r7, 1a001a8e <__udivmoddi4+0x156>
1a001a6e:	428b      	cmp	r3, r1
1a001a70:	d302      	bcc.n	1a001a78 <__udivmoddi4+0x140>
1a001a72:	4282      	cmp	r2, r0
1a001a74:	f200 80bd 	bhi.w	1a001bf2 <__udivmoddi4+0x2ba>
1a001a78:	1a84      	subs	r4, r0, r2
1a001a7a:	eb61 0303 	sbc.w	r3, r1, r3
1a001a7e:	2001      	movs	r0, #1
1a001a80:	4698      	mov	r8, r3
1a001a82:	2e00      	cmp	r6, #0
1a001a84:	d0a9      	beq.n	1a0019da <__udivmoddi4+0xa2>
1a001a86:	e9c6 4800 	strd	r4, r8, [r6]
1a001a8a:	e7a6      	b.n	1a0019da <__udivmoddi4+0xa2>
1a001a8c:	deff      	udf	#255	; 0xff
1a001a8e:	f1c7 0520 	rsb	r5, r7, #32
1a001a92:	40bb      	lsls	r3, r7
1a001a94:	fa22 fc05 	lsr.w	ip, r2, r5
1a001a98:	ea4c 0c03 	orr.w	ip, ip, r3
1a001a9c:	fa01 f407 	lsl.w	r4, r1, r7
1a001aa0:	fa20 f805 	lsr.w	r8, r0, r5
1a001aa4:	fa21 f305 	lsr.w	r3, r1, r5
1a001aa8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001aac:	ea48 0404 	orr.w	r4, r8, r4
1a001ab0:	fbb3 f9fe 	udiv	r9, r3, lr
1a001ab4:	0c21      	lsrs	r1, r4, #16
1a001ab6:	fb0e 3319 	mls	r3, lr, r9, r3
1a001aba:	fa1f f88c 	uxth.w	r8, ip
1a001abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001ac2:	fb09 fa08 	mul.w	sl, r9, r8
1a001ac6:	459a      	cmp	sl, r3
1a001ac8:	fa02 f207 	lsl.w	r2, r2, r7
1a001acc:	fa00 f107 	lsl.w	r1, r0, r7
1a001ad0:	d90b      	bls.n	1a001aea <__udivmoddi4+0x1b2>
1a001ad2:	eb1c 0303 	adds.w	r3, ip, r3
1a001ad6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001ada:	f080 8088 	bcs.w	1a001bee <__udivmoddi4+0x2b6>
1a001ade:	459a      	cmp	sl, r3
1a001ae0:	f240 8085 	bls.w	1a001bee <__udivmoddi4+0x2b6>
1a001ae4:	f1a9 0902 	sub.w	r9, r9, #2
1a001ae8:	4463      	add	r3, ip
1a001aea:	eba3 030a 	sub.w	r3, r3, sl
1a001aee:	b2a4      	uxth	r4, r4
1a001af0:	fbb3 f0fe 	udiv	r0, r3, lr
1a001af4:	fb0e 3310 	mls	r3, lr, r0, r3
1a001af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001afc:	fb00 f808 	mul.w	r8, r0, r8
1a001b00:	45a0      	cmp	r8, r4
1a001b02:	d908      	bls.n	1a001b16 <__udivmoddi4+0x1de>
1a001b04:	eb1c 0404 	adds.w	r4, ip, r4
1a001b08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001b0c:	d26b      	bcs.n	1a001be6 <__udivmoddi4+0x2ae>
1a001b0e:	45a0      	cmp	r8, r4
1a001b10:	d969      	bls.n	1a001be6 <__udivmoddi4+0x2ae>
1a001b12:	3802      	subs	r0, #2
1a001b14:	4464      	add	r4, ip
1a001b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001b1a:	eba4 0408 	sub.w	r4, r4, r8
1a001b1e:	fba0 8902 	umull	r8, r9, r0, r2
1a001b22:	454c      	cmp	r4, r9
1a001b24:	46c6      	mov	lr, r8
1a001b26:	464b      	mov	r3, r9
1a001b28:	d354      	bcc.n	1a001bd4 <__udivmoddi4+0x29c>
1a001b2a:	d051      	beq.n	1a001bd0 <__udivmoddi4+0x298>
1a001b2c:	2e00      	cmp	r6, #0
1a001b2e:	d069      	beq.n	1a001c04 <__udivmoddi4+0x2cc>
1a001b30:	ebb1 020e 	subs.w	r2, r1, lr
1a001b34:	eb64 0403 	sbc.w	r4, r4, r3
1a001b38:	fa04 f505 	lsl.w	r5, r4, r5
1a001b3c:	fa22 f307 	lsr.w	r3, r2, r7
1a001b40:	40fc      	lsrs	r4, r7
1a001b42:	431d      	orrs	r5, r3
1a001b44:	e9c6 5400 	strd	r5, r4, [r6]
1a001b48:	2700      	movs	r7, #0
1a001b4a:	e746      	b.n	1a0019da <__udivmoddi4+0xa2>
1a001b4c:	4637      	mov	r7, r6
1a001b4e:	4630      	mov	r0, r6
1a001b50:	e743      	b.n	1a0019da <__udivmoddi4+0xa2>
1a001b52:	4618      	mov	r0, r3
1a001b54:	e737      	b.n	1a0019c6 <__udivmoddi4+0x8e>
1a001b56:	4607      	mov	r7, r0
1a001b58:	e71f      	b.n	1a00199a <__udivmoddi4+0x62>
1a001b5a:	f1c2 0320 	rsb	r3, r2, #32
1a001b5e:	fa20 f703 	lsr.w	r7, r0, r3
1a001b62:	4095      	lsls	r5, r2
1a001b64:	fa01 f002 	lsl.w	r0, r1, r2
1a001b68:	fa21 f303 	lsr.w	r3, r1, r3
1a001b6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001b70:	4338      	orrs	r0, r7
1a001b72:	0c01      	lsrs	r1, r0, #16
1a001b74:	fbb3 f7fe 	udiv	r7, r3, lr
1a001b78:	fa1f f885 	uxth.w	r8, r5
1a001b7c:	fb0e 3317 	mls	r3, lr, r7, r3
1a001b80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001b84:	fb07 f308 	mul.w	r3, r7, r8
1a001b88:	428b      	cmp	r3, r1
1a001b8a:	fa04 f402 	lsl.w	r4, r4, r2
1a001b8e:	d907      	bls.n	1a001ba0 <__udivmoddi4+0x268>
1a001b90:	1869      	adds	r1, r5, r1
1a001b92:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001b96:	d228      	bcs.n	1a001bea <__udivmoddi4+0x2b2>
1a001b98:	428b      	cmp	r3, r1
1a001b9a:	d926      	bls.n	1a001bea <__udivmoddi4+0x2b2>
1a001b9c:	3f02      	subs	r7, #2
1a001b9e:	4429      	add	r1, r5
1a001ba0:	1acb      	subs	r3, r1, r3
1a001ba2:	b281      	uxth	r1, r0
1a001ba4:	fbb3 f0fe 	udiv	r0, r3, lr
1a001ba8:	fb0e 3310 	mls	r3, lr, r0, r3
1a001bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001bb0:	fb00 f308 	mul.w	r3, r0, r8
1a001bb4:	428b      	cmp	r3, r1
1a001bb6:	d907      	bls.n	1a001bc8 <__udivmoddi4+0x290>
1a001bb8:	1869      	adds	r1, r5, r1
1a001bba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001bbe:	d210      	bcs.n	1a001be2 <__udivmoddi4+0x2aa>
1a001bc0:	428b      	cmp	r3, r1
1a001bc2:	d90e      	bls.n	1a001be2 <__udivmoddi4+0x2aa>
1a001bc4:	3802      	subs	r0, #2
1a001bc6:	4429      	add	r1, r5
1a001bc8:	1ac9      	subs	r1, r1, r3
1a001bca:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001bce:	e714      	b.n	1a0019fa <__udivmoddi4+0xc2>
1a001bd0:	4541      	cmp	r1, r8
1a001bd2:	d2ab      	bcs.n	1a001b2c <__udivmoddi4+0x1f4>
1a001bd4:	ebb8 0e02 	subs.w	lr, r8, r2
1a001bd8:	eb69 020c 	sbc.w	r2, r9, ip
1a001bdc:	3801      	subs	r0, #1
1a001bde:	4613      	mov	r3, r2
1a001be0:	e7a4      	b.n	1a001b2c <__udivmoddi4+0x1f4>
1a001be2:	4660      	mov	r0, ip
1a001be4:	e7f0      	b.n	1a001bc8 <__udivmoddi4+0x290>
1a001be6:	4618      	mov	r0, r3
1a001be8:	e795      	b.n	1a001b16 <__udivmoddi4+0x1de>
1a001bea:	4667      	mov	r7, ip
1a001bec:	e7d8      	b.n	1a001ba0 <__udivmoddi4+0x268>
1a001bee:	4681      	mov	r9, r0
1a001bf0:	e77b      	b.n	1a001aea <__udivmoddi4+0x1b2>
1a001bf2:	4638      	mov	r0, r7
1a001bf4:	e745      	b.n	1a001a82 <__udivmoddi4+0x14a>
1a001bf6:	f1ac 0c02 	sub.w	ip, ip, #2
1a001bfa:	442b      	add	r3, r5
1a001bfc:	e710      	b.n	1a001a20 <__udivmoddi4+0xe8>
1a001bfe:	3802      	subs	r0, #2
1a001c00:	442c      	add	r4, r5
1a001c02:	e721      	b.n	1a001a48 <__udivmoddi4+0x110>
1a001c04:	4637      	mov	r7, r6
1a001c06:	e6e8      	b.n	1a0019da <__udivmoddi4+0xa2>

1a001c08 <__aeabi_idiv0>:
1a001c08:	4770      	bx	lr
1a001c0a:	bf00      	nop

1a001c0c <__libc_init_array>:
1a001c0c:	b570      	push	{r4, r5, r6, lr}
1a001c0e:	4d0d      	ldr	r5, [pc, #52]	; (1a001c44 <__libc_init_array+0x38>)
1a001c10:	4c0d      	ldr	r4, [pc, #52]	; (1a001c48 <__libc_init_array+0x3c>)
1a001c12:	1b64      	subs	r4, r4, r5
1a001c14:	10a4      	asrs	r4, r4, #2
1a001c16:	2600      	movs	r6, #0
1a001c18:	42a6      	cmp	r6, r4
1a001c1a:	d109      	bne.n	1a001c30 <__libc_init_array+0x24>
1a001c1c:	4d0b      	ldr	r5, [pc, #44]	; (1a001c4c <__libc_init_array+0x40>)
1a001c1e:	4c0c      	ldr	r4, [pc, #48]	; (1a001c50 <__libc_init_array+0x44>)
1a001c20:	f7ff fe70 	bl	1a001904 <_init>
1a001c24:	1b64      	subs	r4, r4, r5
1a001c26:	10a4      	asrs	r4, r4, #2
1a001c28:	2600      	movs	r6, #0
1a001c2a:	42a6      	cmp	r6, r4
1a001c2c:	d105      	bne.n	1a001c3a <__libc_init_array+0x2e>
1a001c2e:	bd70      	pop	{r4, r5, r6, pc}
1a001c30:	f855 3b04 	ldr.w	r3, [r5], #4
1a001c34:	4798      	blx	r3
1a001c36:	3601      	adds	r6, #1
1a001c38:	e7ee      	b.n	1a001c18 <__libc_init_array+0xc>
1a001c3a:	f855 3b04 	ldr.w	r3, [r5], #4
1a001c3e:	4798      	blx	r3
1a001c40:	3601      	adds	r6, #1
1a001c42:	e7f2      	b.n	1a001c2a <__libc_init_array+0x1e>
1a001c44:	1a0028a8 	.word	0x1a0028a8
1a001c48:	1a0028a8 	.word	0x1a0028a8
1a001c4c:	1a0028a8 	.word	0x1a0028a8
1a001c50:	1a0028a8 	.word	0x1a0028a8

1a001c54 <memset>:
1a001c54:	4402      	add	r2, r0
1a001c56:	4603      	mov	r3, r0
1a001c58:	4293      	cmp	r3, r2
1a001c5a:	d100      	bne.n	1a001c5e <memset+0xa>
1a001c5c:	4770      	bx	lr
1a001c5e:	f803 1b01 	strb.w	r1, [r3], #1
1a001c62:	e7f9      	b.n	1a001c58 <memset+0x4>

1a001c64 <_puts_r>:
1a001c64:	b570      	push	{r4, r5, r6, lr}
1a001c66:	460e      	mov	r6, r1
1a001c68:	4605      	mov	r5, r0
1a001c6a:	b118      	cbz	r0, 1a001c74 <_puts_r+0x10>
1a001c6c:	6983      	ldr	r3, [r0, #24]
1a001c6e:	b90b      	cbnz	r3, 1a001c74 <_puts_r+0x10>
1a001c70:	f000 fa48 	bl	1a002104 <__sinit>
1a001c74:	69ab      	ldr	r3, [r5, #24]
1a001c76:	68ac      	ldr	r4, [r5, #8]
1a001c78:	b913      	cbnz	r3, 1a001c80 <_puts_r+0x1c>
1a001c7a:	4628      	mov	r0, r5
1a001c7c:	f000 fa42 	bl	1a002104 <__sinit>
1a001c80:	4b2c      	ldr	r3, [pc, #176]	; (1a001d34 <_puts_r+0xd0>)
1a001c82:	429c      	cmp	r4, r3
1a001c84:	d120      	bne.n	1a001cc8 <_puts_r+0x64>
1a001c86:	686c      	ldr	r4, [r5, #4]
1a001c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a001c8a:	07db      	lsls	r3, r3, #31
1a001c8c:	d405      	bmi.n	1a001c9a <_puts_r+0x36>
1a001c8e:	89a3      	ldrh	r3, [r4, #12]
1a001c90:	0598      	lsls	r0, r3, #22
1a001c92:	d402      	bmi.n	1a001c9a <_puts_r+0x36>
1a001c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001c96:	f000 fad2 	bl	1a00223e <__retarget_lock_acquire_recursive>
1a001c9a:	89a3      	ldrh	r3, [r4, #12]
1a001c9c:	0719      	lsls	r1, r3, #28
1a001c9e:	d51d      	bpl.n	1a001cdc <_puts_r+0x78>
1a001ca0:	6923      	ldr	r3, [r4, #16]
1a001ca2:	b1db      	cbz	r3, 1a001cdc <_puts_r+0x78>
1a001ca4:	3e01      	subs	r6, #1
1a001ca6:	68a3      	ldr	r3, [r4, #8]
1a001ca8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a001cac:	3b01      	subs	r3, #1
1a001cae:	60a3      	str	r3, [r4, #8]
1a001cb0:	bb39      	cbnz	r1, 1a001d02 <_puts_r+0x9e>
1a001cb2:	2b00      	cmp	r3, #0
1a001cb4:	da38      	bge.n	1a001d28 <_puts_r+0xc4>
1a001cb6:	4622      	mov	r2, r4
1a001cb8:	210a      	movs	r1, #10
1a001cba:	4628      	mov	r0, r5
1a001cbc:	f000 f848 	bl	1a001d50 <__swbuf_r>
1a001cc0:	3001      	adds	r0, #1
1a001cc2:	d011      	beq.n	1a001ce8 <_puts_r+0x84>
1a001cc4:	250a      	movs	r5, #10
1a001cc6:	e011      	b.n	1a001cec <_puts_r+0x88>
1a001cc8:	4b1b      	ldr	r3, [pc, #108]	; (1a001d38 <_puts_r+0xd4>)
1a001cca:	429c      	cmp	r4, r3
1a001ccc:	d101      	bne.n	1a001cd2 <_puts_r+0x6e>
1a001cce:	68ac      	ldr	r4, [r5, #8]
1a001cd0:	e7da      	b.n	1a001c88 <_puts_r+0x24>
1a001cd2:	4b1a      	ldr	r3, [pc, #104]	; (1a001d3c <_puts_r+0xd8>)
1a001cd4:	429c      	cmp	r4, r3
1a001cd6:	bf08      	it	eq
1a001cd8:	68ec      	ldreq	r4, [r5, #12]
1a001cda:	e7d5      	b.n	1a001c88 <_puts_r+0x24>
1a001cdc:	4621      	mov	r1, r4
1a001cde:	4628      	mov	r0, r5
1a001ce0:	f000 f888 	bl	1a001df4 <__swsetup_r>
1a001ce4:	2800      	cmp	r0, #0
1a001ce6:	d0dd      	beq.n	1a001ca4 <_puts_r+0x40>
1a001ce8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a001cee:	07da      	lsls	r2, r3, #31
1a001cf0:	d405      	bmi.n	1a001cfe <_puts_r+0x9a>
1a001cf2:	89a3      	ldrh	r3, [r4, #12]
1a001cf4:	059b      	lsls	r3, r3, #22
1a001cf6:	d402      	bmi.n	1a001cfe <_puts_r+0x9a>
1a001cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001cfa:	f000 faa1 	bl	1a002240 <__retarget_lock_release_recursive>
1a001cfe:	4628      	mov	r0, r5
1a001d00:	bd70      	pop	{r4, r5, r6, pc}
1a001d02:	2b00      	cmp	r3, #0
1a001d04:	da04      	bge.n	1a001d10 <_puts_r+0xac>
1a001d06:	69a2      	ldr	r2, [r4, #24]
1a001d08:	429a      	cmp	r2, r3
1a001d0a:	dc06      	bgt.n	1a001d1a <_puts_r+0xb6>
1a001d0c:	290a      	cmp	r1, #10
1a001d0e:	d004      	beq.n	1a001d1a <_puts_r+0xb6>
1a001d10:	6823      	ldr	r3, [r4, #0]
1a001d12:	1c5a      	adds	r2, r3, #1
1a001d14:	6022      	str	r2, [r4, #0]
1a001d16:	7019      	strb	r1, [r3, #0]
1a001d18:	e7c5      	b.n	1a001ca6 <_puts_r+0x42>
1a001d1a:	4622      	mov	r2, r4
1a001d1c:	4628      	mov	r0, r5
1a001d1e:	f000 f817 	bl	1a001d50 <__swbuf_r>
1a001d22:	3001      	adds	r0, #1
1a001d24:	d1bf      	bne.n	1a001ca6 <_puts_r+0x42>
1a001d26:	e7df      	b.n	1a001ce8 <_puts_r+0x84>
1a001d28:	6823      	ldr	r3, [r4, #0]
1a001d2a:	250a      	movs	r5, #10
1a001d2c:	1c5a      	adds	r2, r3, #1
1a001d2e:	6022      	str	r2, [r4, #0]
1a001d30:	701d      	strb	r5, [r3, #0]
1a001d32:	e7db      	b.n	1a001cec <_puts_r+0x88>
1a001d34:	1a002864 	.word	0x1a002864
1a001d38:	1a002884 	.word	0x1a002884
1a001d3c:	1a002844 	.word	0x1a002844

1a001d40 <puts>:
1a001d40:	4b02      	ldr	r3, [pc, #8]	; (1a001d4c <puts+0xc>)
1a001d42:	4601      	mov	r1, r0
1a001d44:	6818      	ldr	r0, [r3, #0]
1a001d46:	f7ff bf8d 	b.w	1a001c64 <_puts_r>
1a001d4a:	bf00      	nop
1a001d4c:	100000c8 	.word	0x100000c8

1a001d50 <__swbuf_r>:
1a001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001d52:	460e      	mov	r6, r1
1a001d54:	4614      	mov	r4, r2
1a001d56:	4605      	mov	r5, r0
1a001d58:	b118      	cbz	r0, 1a001d62 <__swbuf_r+0x12>
1a001d5a:	6983      	ldr	r3, [r0, #24]
1a001d5c:	b90b      	cbnz	r3, 1a001d62 <__swbuf_r+0x12>
1a001d5e:	f000 f9d1 	bl	1a002104 <__sinit>
1a001d62:	4b21      	ldr	r3, [pc, #132]	; (1a001de8 <__swbuf_r+0x98>)
1a001d64:	429c      	cmp	r4, r3
1a001d66:	d12b      	bne.n	1a001dc0 <__swbuf_r+0x70>
1a001d68:	686c      	ldr	r4, [r5, #4]
1a001d6a:	69a3      	ldr	r3, [r4, #24]
1a001d6c:	60a3      	str	r3, [r4, #8]
1a001d6e:	89a3      	ldrh	r3, [r4, #12]
1a001d70:	071a      	lsls	r2, r3, #28
1a001d72:	d52f      	bpl.n	1a001dd4 <__swbuf_r+0x84>
1a001d74:	6923      	ldr	r3, [r4, #16]
1a001d76:	b36b      	cbz	r3, 1a001dd4 <__swbuf_r+0x84>
1a001d78:	6923      	ldr	r3, [r4, #16]
1a001d7a:	6820      	ldr	r0, [r4, #0]
1a001d7c:	1ac0      	subs	r0, r0, r3
1a001d7e:	6963      	ldr	r3, [r4, #20]
1a001d80:	b2f6      	uxtb	r6, r6
1a001d82:	4283      	cmp	r3, r0
1a001d84:	4637      	mov	r7, r6
1a001d86:	dc04      	bgt.n	1a001d92 <__swbuf_r+0x42>
1a001d88:	4621      	mov	r1, r4
1a001d8a:	4628      	mov	r0, r5
1a001d8c:	f000 f926 	bl	1a001fdc <_fflush_r>
1a001d90:	bb30      	cbnz	r0, 1a001de0 <__swbuf_r+0x90>
1a001d92:	68a3      	ldr	r3, [r4, #8]
1a001d94:	3b01      	subs	r3, #1
1a001d96:	60a3      	str	r3, [r4, #8]
1a001d98:	6823      	ldr	r3, [r4, #0]
1a001d9a:	1c5a      	adds	r2, r3, #1
1a001d9c:	6022      	str	r2, [r4, #0]
1a001d9e:	701e      	strb	r6, [r3, #0]
1a001da0:	6963      	ldr	r3, [r4, #20]
1a001da2:	3001      	adds	r0, #1
1a001da4:	4283      	cmp	r3, r0
1a001da6:	d004      	beq.n	1a001db2 <__swbuf_r+0x62>
1a001da8:	89a3      	ldrh	r3, [r4, #12]
1a001daa:	07db      	lsls	r3, r3, #31
1a001dac:	d506      	bpl.n	1a001dbc <__swbuf_r+0x6c>
1a001dae:	2e0a      	cmp	r6, #10
1a001db0:	d104      	bne.n	1a001dbc <__swbuf_r+0x6c>
1a001db2:	4621      	mov	r1, r4
1a001db4:	4628      	mov	r0, r5
1a001db6:	f000 f911 	bl	1a001fdc <_fflush_r>
1a001dba:	b988      	cbnz	r0, 1a001de0 <__swbuf_r+0x90>
1a001dbc:	4638      	mov	r0, r7
1a001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001dc0:	4b0a      	ldr	r3, [pc, #40]	; (1a001dec <__swbuf_r+0x9c>)
1a001dc2:	429c      	cmp	r4, r3
1a001dc4:	d101      	bne.n	1a001dca <__swbuf_r+0x7a>
1a001dc6:	68ac      	ldr	r4, [r5, #8]
1a001dc8:	e7cf      	b.n	1a001d6a <__swbuf_r+0x1a>
1a001dca:	4b09      	ldr	r3, [pc, #36]	; (1a001df0 <__swbuf_r+0xa0>)
1a001dcc:	429c      	cmp	r4, r3
1a001dce:	bf08      	it	eq
1a001dd0:	68ec      	ldreq	r4, [r5, #12]
1a001dd2:	e7ca      	b.n	1a001d6a <__swbuf_r+0x1a>
1a001dd4:	4621      	mov	r1, r4
1a001dd6:	4628      	mov	r0, r5
1a001dd8:	f000 f80c 	bl	1a001df4 <__swsetup_r>
1a001ddc:	2800      	cmp	r0, #0
1a001dde:	d0cb      	beq.n	1a001d78 <__swbuf_r+0x28>
1a001de0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a001de4:	e7ea      	b.n	1a001dbc <__swbuf_r+0x6c>
1a001de6:	bf00      	nop
1a001de8:	1a002864 	.word	0x1a002864
1a001dec:	1a002884 	.word	0x1a002884
1a001df0:	1a002844 	.word	0x1a002844

1a001df4 <__swsetup_r>:
1a001df4:	4b32      	ldr	r3, [pc, #200]	; (1a001ec0 <__swsetup_r+0xcc>)
1a001df6:	b570      	push	{r4, r5, r6, lr}
1a001df8:	681d      	ldr	r5, [r3, #0]
1a001dfa:	4606      	mov	r6, r0
1a001dfc:	460c      	mov	r4, r1
1a001dfe:	b125      	cbz	r5, 1a001e0a <__swsetup_r+0x16>
1a001e00:	69ab      	ldr	r3, [r5, #24]
1a001e02:	b913      	cbnz	r3, 1a001e0a <__swsetup_r+0x16>
1a001e04:	4628      	mov	r0, r5
1a001e06:	f000 f97d 	bl	1a002104 <__sinit>
1a001e0a:	4b2e      	ldr	r3, [pc, #184]	; (1a001ec4 <__swsetup_r+0xd0>)
1a001e0c:	429c      	cmp	r4, r3
1a001e0e:	d10f      	bne.n	1a001e30 <__swsetup_r+0x3c>
1a001e10:	686c      	ldr	r4, [r5, #4]
1a001e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001e16:	b29a      	uxth	r2, r3
1a001e18:	0715      	lsls	r5, r2, #28
1a001e1a:	d42c      	bmi.n	1a001e76 <__swsetup_r+0x82>
1a001e1c:	06d0      	lsls	r0, r2, #27
1a001e1e:	d411      	bmi.n	1a001e44 <__swsetup_r+0x50>
1a001e20:	2209      	movs	r2, #9
1a001e22:	6032      	str	r2, [r6, #0]
1a001e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001e28:	81a3      	strh	r3, [r4, #12]
1a001e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001e2e:	e03e      	b.n	1a001eae <__swsetup_r+0xba>
1a001e30:	4b25      	ldr	r3, [pc, #148]	; (1a001ec8 <__swsetup_r+0xd4>)
1a001e32:	429c      	cmp	r4, r3
1a001e34:	d101      	bne.n	1a001e3a <__swsetup_r+0x46>
1a001e36:	68ac      	ldr	r4, [r5, #8]
1a001e38:	e7eb      	b.n	1a001e12 <__swsetup_r+0x1e>
1a001e3a:	4b24      	ldr	r3, [pc, #144]	; (1a001ecc <__swsetup_r+0xd8>)
1a001e3c:	429c      	cmp	r4, r3
1a001e3e:	bf08      	it	eq
1a001e40:	68ec      	ldreq	r4, [r5, #12]
1a001e42:	e7e6      	b.n	1a001e12 <__swsetup_r+0x1e>
1a001e44:	0751      	lsls	r1, r2, #29
1a001e46:	d512      	bpl.n	1a001e6e <__swsetup_r+0x7a>
1a001e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001e4a:	b141      	cbz	r1, 1a001e5e <__swsetup_r+0x6a>
1a001e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001e50:	4299      	cmp	r1, r3
1a001e52:	d002      	beq.n	1a001e5a <__swsetup_r+0x66>
1a001e54:	4630      	mov	r0, r6
1a001e56:	f000 fa59 	bl	1a00230c <_free_r>
1a001e5a:	2300      	movs	r3, #0
1a001e5c:	6363      	str	r3, [r4, #52]	; 0x34
1a001e5e:	89a3      	ldrh	r3, [r4, #12]
1a001e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a001e64:	81a3      	strh	r3, [r4, #12]
1a001e66:	2300      	movs	r3, #0
1a001e68:	6063      	str	r3, [r4, #4]
1a001e6a:	6923      	ldr	r3, [r4, #16]
1a001e6c:	6023      	str	r3, [r4, #0]
1a001e6e:	89a3      	ldrh	r3, [r4, #12]
1a001e70:	f043 0308 	orr.w	r3, r3, #8
1a001e74:	81a3      	strh	r3, [r4, #12]
1a001e76:	6923      	ldr	r3, [r4, #16]
1a001e78:	b94b      	cbnz	r3, 1a001e8e <__swsetup_r+0x9a>
1a001e7a:	89a3      	ldrh	r3, [r4, #12]
1a001e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a001e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001e84:	d003      	beq.n	1a001e8e <__swsetup_r+0x9a>
1a001e86:	4621      	mov	r1, r4
1a001e88:	4630      	mov	r0, r6
1a001e8a:	f000 f9ff 	bl	1a00228c <__smakebuf_r>
1a001e8e:	89a2      	ldrh	r2, [r4, #12]
1a001e90:	f012 0301 	ands.w	r3, r2, #1
1a001e94:	d00c      	beq.n	1a001eb0 <__swsetup_r+0xbc>
1a001e96:	2300      	movs	r3, #0
1a001e98:	60a3      	str	r3, [r4, #8]
1a001e9a:	6963      	ldr	r3, [r4, #20]
1a001e9c:	425b      	negs	r3, r3
1a001e9e:	61a3      	str	r3, [r4, #24]
1a001ea0:	6923      	ldr	r3, [r4, #16]
1a001ea2:	b953      	cbnz	r3, 1a001eba <__swsetup_r+0xc6>
1a001ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001ea8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a001eac:	d1ba      	bne.n	1a001e24 <__swsetup_r+0x30>
1a001eae:	bd70      	pop	{r4, r5, r6, pc}
1a001eb0:	0792      	lsls	r2, r2, #30
1a001eb2:	bf58      	it	pl
1a001eb4:	6963      	ldrpl	r3, [r4, #20]
1a001eb6:	60a3      	str	r3, [r4, #8]
1a001eb8:	e7f2      	b.n	1a001ea0 <__swsetup_r+0xac>
1a001eba:	2000      	movs	r0, #0
1a001ebc:	e7f7      	b.n	1a001eae <__swsetup_r+0xba>
1a001ebe:	bf00      	nop
1a001ec0:	100000c8 	.word	0x100000c8
1a001ec4:	1a002864 	.word	0x1a002864
1a001ec8:	1a002884 	.word	0x1a002884
1a001ecc:	1a002844 	.word	0x1a002844

1a001ed0 <__sflush_r>:
1a001ed0:	898a      	ldrh	r2, [r1, #12]
1a001ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001ed6:	4605      	mov	r5, r0
1a001ed8:	0710      	lsls	r0, r2, #28
1a001eda:	460c      	mov	r4, r1
1a001edc:	d458      	bmi.n	1a001f90 <__sflush_r+0xc0>
1a001ede:	684b      	ldr	r3, [r1, #4]
1a001ee0:	2b00      	cmp	r3, #0
1a001ee2:	dc05      	bgt.n	1a001ef0 <__sflush_r+0x20>
1a001ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a001ee6:	2b00      	cmp	r3, #0
1a001ee8:	dc02      	bgt.n	1a001ef0 <__sflush_r+0x20>
1a001eea:	2000      	movs	r0, #0
1a001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a001ef2:	2e00      	cmp	r6, #0
1a001ef4:	d0f9      	beq.n	1a001eea <__sflush_r+0x1a>
1a001ef6:	2300      	movs	r3, #0
1a001ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a001efc:	682f      	ldr	r7, [r5, #0]
1a001efe:	602b      	str	r3, [r5, #0]
1a001f00:	d032      	beq.n	1a001f68 <__sflush_r+0x98>
1a001f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a001f04:	89a3      	ldrh	r3, [r4, #12]
1a001f06:	075a      	lsls	r2, r3, #29
1a001f08:	d505      	bpl.n	1a001f16 <__sflush_r+0x46>
1a001f0a:	6863      	ldr	r3, [r4, #4]
1a001f0c:	1ac0      	subs	r0, r0, r3
1a001f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a001f10:	b10b      	cbz	r3, 1a001f16 <__sflush_r+0x46>
1a001f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001f14:	1ac0      	subs	r0, r0, r3
1a001f16:	2300      	movs	r3, #0
1a001f18:	4602      	mov	r2, r0
1a001f1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a001f1c:	6a21      	ldr	r1, [r4, #32]
1a001f1e:	4628      	mov	r0, r5
1a001f20:	47b0      	blx	r6
1a001f22:	1c43      	adds	r3, r0, #1
1a001f24:	89a3      	ldrh	r3, [r4, #12]
1a001f26:	d106      	bne.n	1a001f36 <__sflush_r+0x66>
1a001f28:	6829      	ldr	r1, [r5, #0]
1a001f2a:	291d      	cmp	r1, #29
1a001f2c:	d849      	bhi.n	1a001fc2 <__sflush_r+0xf2>
1a001f2e:	4a2a      	ldr	r2, [pc, #168]	; (1a001fd8 <__sflush_r+0x108>)
1a001f30:	40ca      	lsrs	r2, r1
1a001f32:	07d6      	lsls	r6, r2, #31
1a001f34:	d545      	bpl.n	1a001fc2 <__sflush_r+0xf2>
1a001f36:	2200      	movs	r2, #0
1a001f38:	6062      	str	r2, [r4, #4]
1a001f3a:	04d9      	lsls	r1, r3, #19
1a001f3c:	6922      	ldr	r2, [r4, #16]
1a001f3e:	6022      	str	r2, [r4, #0]
1a001f40:	d504      	bpl.n	1a001f4c <__sflush_r+0x7c>
1a001f42:	1c42      	adds	r2, r0, #1
1a001f44:	d101      	bne.n	1a001f4a <__sflush_r+0x7a>
1a001f46:	682b      	ldr	r3, [r5, #0]
1a001f48:	b903      	cbnz	r3, 1a001f4c <__sflush_r+0x7c>
1a001f4a:	6560      	str	r0, [r4, #84]	; 0x54
1a001f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001f4e:	602f      	str	r7, [r5, #0]
1a001f50:	2900      	cmp	r1, #0
1a001f52:	d0ca      	beq.n	1a001eea <__sflush_r+0x1a>
1a001f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001f58:	4299      	cmp	r1, r3
1a001f5a:	d002      	beq.n	1a001f62 <__sflush_r+0x92>
1a001f5c:	4628      	mov	r0, r5
1a001f5e:	f000 f9d5 	bl	1a00230c <_free_r>
1a001f62:	2000      	movs	r0, #0
1a001f64:	6360      	str	r0, [r4, #52]	; 0x34
1a001f66:	e7c1      	b.n	1a001eec <__sflush_r+0x1c>
1a001f68:	6a21      	ldr	r1, [r4, #32]
1a001f6a:	2301      	movs	r3, #1
1a001f6c:	4628      	mov	r0, r5
1a001f6e:	47b0      	blx	r6
1a001f70:	1c41      	adds	r1, r0, #1
1a001f72:	d1c7      	bne.n	1a001f04 <__sflush_r+0x34>
1a001f74:	682b      	ldr	r3, [r5, #0]
1a001f76:	2b00      	cmp	r3, #0
1a001f78:	d0c4      	beq.n	1a001f04 <__sflush_r+0x34>
1a001f7a:	2b1d      	cmp	r3, #29
1a001f7c:	d001      	beq.n	1a001f82 <__sflush_r+0xb2>
1a001f7e:	2b16      	cmp	r3, #22
1a001f80:	d101      	bne.n	1a001f86 <__sflush_r+0xb6>
1a001f82:	602f      	str	r7, [r5, #0]
1a001f84:	e7b1      	b.n	1a001eea <__sflush_r+0x1a>
1a001f86:	89a3      	ldrh	r3, [r4, #12]
1a001f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001f8c:	81a3      	strh	r3, [r4, #12]
1a001f8e:	e7ad      	b.n	1a001eec <__sflush_r+0x1c>
1a001f90:	690f      	ldr	r7, [r1, #16]
1a001f92:	2f00      	cmp	r7, #0
1a001f94:	d0a9      	beq.n	1a001eea <__sflush_r+0x1a>
1a001f96:	0793      	lsls	r3, r2, #30
1a001f98:	680e      	ldr	r6, [r1, #0]
1a001f9a:	bf08      	it	eq
1a001f9c:	694b      	ldreq	r3, [r1, #20]
1a001f9e:	600f      	str	r7, [r1, #0]
1a001fa0:	bf18      	it	ne
1a001fa2:	2300      	movne	r3, #0
1a001fa4:	eba6 0807 	sub.w	r8, r6, r7
1a001fa8:	608b      	str	r3, [r1, #8]
1a001faa:	f1b8 0f00 	cmp.w	r8, #0
1a001fae:	dd9c      	ble.n	1a001eea <__sflush_r+0x1a>
1a001fb0:	4643      	mov	r3, r8
1a001fb2:	463a      	mov	r2, r7
1a001fb4:	6a21      	ldr	r1, [r4, #32]
1a001fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a001fb8:	4628      	mov	r0, r5
1a001fba:	47b0      	blx	r6
1a001fbc:	2800      	cmp	r0, #0
1a001fbe:	dc06      	bgt.n	1a001fce <__sflush_r+0xfe>
1a001fc0:	89a3      	ldrh	r3, [r4, #12]
1a001fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001fc6:	81a3      	strh	r3, [r4, #12]
1a001fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001fcc:	e78e      	b.n	1a001eec <__sflush_r+0x1c>
1a001fce:	4407      	add	r7, r0
1a001fd0:	eba8 0800 	sub.w	r8, r8, r0
1a001fd4:	e7e9      	b.n	1a001faa <__sflush_r+0xda>
1a001fd6:	bf00      	nop
1a001fd8:	20400001 	.word	0x20400001

1a001fdc <_fflush_r>:
1a001fdc:	b538      	push	{r3, r4, r5, lr}
1a001fde:	690b      	ldr	r3, [r1, #16]
1a001fe0:	4605      	mov	r5, r0
1a001fe2:	460c      	mov	r4, r1
1a001fe4:	b913      	cbnz	r3, 1a001fec <_fflush_r+0x10>
1a001fe6:	2500      	movs	r5, #0
1a001fe8:	4628      	mov	r0, r5
1a001fea:	bd38      	pop	{r3, r4, r5, pc}
1a001fec:	b118      	cbz	r0, 1a001ff6 <_fflush_r+0x1a>
1a001fee:	6983      	ldr	r3, [r0, #24]
1a001ff0:	b90b      	cbnz	r3, 1a001ff6 <_fflush_r+0x1a>
1a001ff2:	f000 f887 	bl	1a002104 <__sinit>
1a001ff6:	4b14      	ldr	r3, [pc, #80]	; (1a002048 <_fflush_r+0x6c>)
1a001ff8:	429c      	cmp	r4, r3
1a001ffa:	d11b      	bne.n	1a002034 <_fflush_r+0x58>
1a001ffc:	686c      	ldr	r4, [r5, #4]
1a001ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002002:	2b00      	cmp	r3, #0
1a002004:	d0ef      	beq.n	1a001fe6 <_fflush_r+0xa>
1a002006:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a002008:	07d0      	lsls	r0, r2, #31
1a00200a:	d404      	bmi.n	1a002016 <_fflush_r+0x3a>
1a00200c:	0599      	lsls	r1, r3, #22
1a00200e:	d402      	bmi.n	1a002016 <_fflush_r+0x3a>
1a002010:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002012:	f000 f914 	bl	1a00223e <__retarget_lock_acquire_recursive>
1a002016:	4628      	mov	r0, r5
1a002018:	4621      	mov	r1, r4
1a00201a:	f7ff ff59 	bl	1a001ed0 <__sflush_r>
1a00201e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002020:	07da      	lsls	r2, r3, #31
1a002022:	4605      	mov	r5, r0
1a002024:	d4e0      	bmi.n	1a001fe8 <_fflush_r+0xc>
1a002026:	89a3      	ldrh	r3, [r4, #12]
1a002028:	059b      	lsls	r3, r3, #22
1a00202a:	d4dd      	bmi.n	1a001fe8 <_fflush_r+0xc>
1a00202c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00202e:	f000 f907 	bl	1a002240 <__retarget_lock_release_recursive>
1a002032:	e7d9      	b.n	1a001fe8 <_fflush_r+0xc>
1a002034:	4b05      	ldr	r3, [pc, #20]	; (1a00204c <_fflush_r+0x70>)
1a002036:	429c      	cmp	r4, r3
1a002038:	d101      	bne.n	1a00203e <_fflush_r+0x62>
1a00203a:	68ac      	ldr	r4, [r5, #8]
1a00203c:	e7df      	b.n	1a001ffe <_fflush_r+0x22>
1a00203e:	4b04      	ldr	r3, [pc, #16]	; (1a002050 <_fflush_r+0x74>)
1a002040:	429c      	cmp	r4, r3
1a002042:	bf08      	it	eq
1a002044:	68ec      	ldreq	r4, [r5, #12]
1a002046:	e7da      	b.n	1a001ffe <_fflush_r+0x22>
1a002048:	1a002864 	.word	0x1a002864
1a00204c:	1a002884 	.word	0x1a002884
1a002050:	1a002844 	.word	0x1a002844

1a002054 <std>:
1a002054:	2300      	movs	r3, #0
1a002056:	b510      	push	{r4, lr}
1a002058:	4604      	mov	r4, r0
1a00205a:	e9c0 3300 	strd	r3, r3, [r0]
1a00205e:	6083      	str	r3, [r0, #8]
1a002060:	8181      	strh	r1, [r0, #12]
1a002062:	6643      	str	r3, [r0, #100]	; 0x64
1a002064:	81c2      	strh	r2, [r0, #14]
1a002066:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00206a:	6183      	str	r3, [r0, #24]
1a00206c:	4619      	mov	r1, r3
1a00206e:	2208      	movs	r2, #8
1a002070:	305c      	adds	r0, #92	; 0x5c
1a002072:	f7ff fdef 	bl	1a001c54 <memset>
1a002076:	4b05      	ldr	r3, [pc, #20]	; (1a00208c <std+0x38>)
1a002078:	6263      	str	r3, [r4, #36]	; 0x24
1a00207a:	4b05      	ldr	r3, [pc, #20]	; (1a002090 <std+0x3c>)
1a00207c:	62a3      	str	r3, [r4, #40]	; 0x28
1a00207e:	4b05      	ldr	r3, [pc, #20]	; (1a002094 <std+0x40>)
1a002080:	62e3      	str	r3, [r4, #44]	; 0x2c
1a002082:	4b05      	ldr	r3, [pc, #20]	; (1a002098 <std+0x44>)
1a002084:	6224      	str	r4, [r4, #32]
1a002086:	6323      	str	r3, [r4, #48]	; 0x30
1a002088:	bd10      	pop	{r4, pc}
1a00208a:	bf00      	nop
1a00208c:	1a00245d 	.word	0x1a00245d
1a002090:	1a00247f 	.word	0x1a00247f
1a002094:	1a0024b7 	.word	0x1a0024b7
1a002098:	1a0024db 	.word	0x1a0024db

1a00209c <_cleanup_r>:
1a00209c:	4901      	ldr	r1, [pc, #4]	; (1a0020a4 <_cleanup_r+0x8>)
1a00209e:	f000 b8af 	b.w	1a002200 <_fwalk_reent>
1a0020a2:	bf00      	nop
1a0020a4:	1a001fdd 	.word	0x1a001fdd

1a0020a8 <__sfmoreglue>:
1a0020a8:	b570      	push	{r4, r5, r6, lr}
1a0020aa:	1e4a      	subs	r2, r1, #1
1a0020ac:	2568      	movs	r5, #104	; 0x68
1a0020ae:	4355      	muls	r5, r2
1a0020b0:	460e      	mov	r6, r1
1a0020b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0020b6:	f000 f977 	bl	1a0023a8 <_malloc_r>
1a0020ba:	4604      	mov	r4, r0
1a0020bc:	b140      	cbz	r0, 1a0020d0 <__sfmoreglue+0x28>
1a0020be:	2100      	movs	r1, #0
1a0020c0:	e9c0 1600 	strd	r1, r6, [r0]
1a0020c4:	300c      	adds	r0, #12
1a0020c6:	60a0      	str	r0, [r4, #8]
1a0020c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0020cc:	f7ff fdc2 	bl	1a001c54 <memset>
1a0020d0:	4620      	mov	r0, r4
1a0020d2:	bd70      	pop	{r4, r5, r6, pc}

1a0020d4 <__sfp_lock_acquire>:
1a0020d4:	4801      	ldr	r0, [pc, #4]	; (1a0020dc <__sfp_lock_acquire+0x8>)
1a0020d6:	f000 b8b2 	b.w	1a00223e <__retarget_lock_acquire_recursive>
1a0020da:	bf00      	nop
1a0020dc:	10000184 	.word	0x10000184

1a0020e0 <__sfp_lock_release>:
1a0020e0:	4801      	ldr	r0, [pc, #4]	; (1a0020e8 <__sfp_lock_release+0x8>)
1a0020e2:	f000 b8ad 	b.w	1a002240 <__retarget_lock_release_recursive>
1a0020e6:	bf00      	nop
1a0020e8:	10000184 	.word	0x10000184

1a0020ec <__sinit_lock_acquire>:
1a0020ec:	4801      	ldr	r0, [pc, #4]	; (1a0020f4 <__sinit_lock_acquire+0x8>)
1a0020ee:	f000 b8a6 	b.w	1a00223e <__retarget_lock_acquire_recursive>
1a0020f2:	bf00      	nop
1a0020f4:	1000017f 	.word	0x1000017f

1a0020f8 <__sinit_lock_release>:
1a0020f8:	4801      	ldr	r0, [pc, #4]	; (1a002100 <__sinit_lock_release+0x8>)
1a0020fa:	f000 b8a1 	b.w	1a002240 <__retarget_lock_release_recursive>
1a0020fe:	bf00      	nop
1a002100:	1000017f 	.word	0x1000017f

1a002104 <__sinit>:
1a002104:	b510      	push	{r4, lr}
1a002106:	4604      	mov	r4, r0
1a002108:	f7ff fff0 	bl	1a0020ec <__sinit_lock_acquire>
1a00210c:	69a3      	ldr	r3, [r4, #24]
1a00210e:	b11b      	cbz	r3, 1a002118 <__sinit+0x14>
1a002110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a002114:	f7ff bff0 	b.w	1a0020f8 <__sinit_lock_release>
1a002118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a00211c:	6523      	str	r3, [r4, #80]	; 0x50
1a00211e:	4b13      	ldr	r3, [pc, #76]	; (1a00216c <__sinit+0x68>)
1a002120:	4a13      	ldr	r2, [pc, #76]	; (1a002170 <__sinit+0x6c>)
1a002122:	681b      	ldr	r3, [r3, #0]
1a002124:	62a2      	str	r2, [r4, #40]	; 0x28
1a002126:	42a3      	cmp	r3, r4
1a002128:	bf04      	itt	eq
1a00212a:	2301      	moveq	r3, #1
1a00212c:	61a3      	streq	r3, [r4, #24]
1a00212e:	4620      	mov	r0, r4
1a002130:	f000 f820 	bl	1a002174 <__sfp>
1a002134:	6060      	str	r0, [r4, #4]
1a002136:	4620      	mov	r0, r4
1a002138:	f000 f81c 	bl	1a002174 <__sfp>
1a00213c:	60a0      	str	r0, [r4, #8]
1a00213e:	4620      	mov	r0, r4
1a002140:	f000 f818 	bl	1a002174 <__sfp>
1a002144:	2200      	movs	r2, #0
1a002146:	60e0      	str	r0, [r4, #12]
1a002148:	2104      	movs	r1, #4
1a00214a:	6860      	ldr	r0, [r4, #4]
1a00214c:	f7ff ff82 	bl	1a002054 <std>
1a002150:	2201      	movs	r2, #1
1a002152:	2109      	movs	r1, #9
1a002154:	68a0      	ldr	r0, [r4, #8]
1a002156:	f7ff ff7d 	bl	1a002054 <std>
1a00215a:	2202      	movs	r2, #2
1a00215c:	2112      	movs	r1, #18
1a00215e:	68e0      	ldr	r0, [r4, #12]
1a002160:	f7ff ff78 	bl	1a002054 <std>
1a002164:	2301      	movs	r3, #1
1a002166:	61a3      	str	r3, [r4, #24]
1a002168:	e7d2      	b.n	1a002110 <__sinit+0xc>
1a00216a:	bf00      	nop
1a00216c:	1a0028a4 	.word	0x1a0028a4
1a002170:	1a00209d 	.word	0x1a00209d

1a002174 <__sfp>:
1a002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002176:	4607      	mov	r7, r0
1a002178:	f7ff ffac 	bl	1a0020d4 <__sfp_lock_acquire>
1a00217c:	4b1e      	ldr	r3, [pc, #120]	; (1a0021f8 <__sfp+0x84>)
1a00217e:	681e      	ldr	r6, [r3, #0]
1a002180:	69b3      	ldr	r3, [r6, #24]
1a002182:	b913      	cbnz	r3, 1a00218a <__sfp+0x16>
1a002184:	4630      	mov	r0, r6
1a002186:	f7ff ffbd 	bl	1a002104 <__sinit>
1a00218a:	3648      	adds	r6, #72	; 0x48
1a00218c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a002190:	3b01      	subs	r3, #1
1a002192:	d503      	bpl.n	1a00219c <__sfp+0x28>
1a002194:	6833      	ldr	r3, [r6, #0]
1a002196:	b30b      	cbz	r3, 1a0021dc <__sfp+0x68>
1a002198:	6836      	ldr	r6, [r6, #0]
1a00219a:	e7f7      	b.n	1a00218c <__sfp+0x18>
1a00219c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0021a0:	b9d5      	cbnz	r5, 1a0021d8 <__sfp+0x64>
1a0021a2:	4b16      	ldr	r3, [pc, #88]	; (1a0021fc <__sfp+0x88>)
1a0021a4:	60e3      	str	r3, [r4, #12]
1a0021a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0021aa:	6665      	str	r5, [r4, #100]	; 0x64
1a0021ac:	f000 f846 	bl	1a00223c <__retarget_lock_init_recursive>
1a0021b0:	f7ff ff96 	bl	1a0020e0 <__sfp_lock_release>
1a0021b4:	6025      	str	r5, [r4, #0]
1a0021b6:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a0021ba:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0021be:	61a5      	str	r5, [r4, #24]
1a0021c0:	2208      	movs	r2, #8
1a0021c2:	4629      	mov	r1, r5
1a0021c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0021c8:	f7ff fd44 	bl	1a001c54 <memset>
1a0021cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0021d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0021d4:	4620      	mov	r0, r4
1a0021d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0021d8:	3468      	adds	r4, #104	; 0x68
1a0021da:	e7d9      	b.n	1a002190 <__sfp+0x1c>
1a0021dc:	2104      	movs	r1, #4
1a0021de:	4638      	mov	r0, r7
1a0021e0:	f7ff ff62 	bl	1a0020a8 <__sfmoreglue>
1a0021e4:	4604      	mov	r4, r0
1a0021e6:	6030      	str	r0, [r6, #0]
1a0021e8:	2800      	cmp	r0, #0
1a0021ea:	d1d5      	bne.n	1a002198 <__sfp+0x24>
1a0021ec:	f7ff ff78 	bl	1a0020e0 <__sfp_lock_release>
1a0021f0:	230c      	movs	r3, #12
1a0021f2:	603b      	str	r3, [r7, #0]
1a0021f4:	e7ee      	b.n	1a0021d4 <__sfp+0x60>
1a0021f6:	bf00      	nop
1a0021f8:	1a0028a4 	.word	0x1a0028a4
1a0021fc:	ffff0001 	.word	0xffff0001

1a002200 <_fwalk_reent>:
1a002200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002204:	4680      	mov	r8, r0
1a002206:	4689      	mov	r9, r1
1a002208:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a00220c:	2600      	movs	r6, #0
1a00220e:	b914      	cbnz	r4, 1a002216 <_fwalk_reent+0x16>
1a002210:	4630      	mov	r0, r6
1a002212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002216:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00221a:	3f01      	subs	r7, #1
1a00221c:	d501      	bpl.n	1a002222 <_fwalk_reent+0x22>
1a00221e:	6824      	ldr	r4, [r4, #0]
1a002220:	e7f5      	b.n	1a00220e <_fwalk_reent+0xe>
1a002222:	89ab      	ldrh	r3, [r5, #12]
1a002224:	2b01      	cmp	r3, #1
1a002226:	d907      	bls.n	1a002238 <_fwalk_reent+0x38>
1a002228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a00222c:	3301      	adds	r3, #1
1a00222e:	d003      	beq.n	1a002238 <_fwalk_reent+0x38>
1a002230:	4629      	mov	r1, r5
1a002232:	4640      	mov	r0, r8
1a002234:	47c8      	blx	r9
1a002236:	4306      	orrs	r6, r0
1a002238:	3568      	adds	r5, #104	; 0x68
1a00223a:	e7ee      	b.n	1a00221a <_fwalk_reent+0x1a>

1a00223c <__retarget_lock_init_recursive>:
1a00223c:	4770      	bx	lr

1a00223e <__retarget_lock_acquire_recursive>:
1a00223e:	4770      	bx	lr

1a002240 <__retarget_lock_release_recursive>:
1a002240:	4770      	bx	lr

1a002242 <__swhatbuf_r>:
1a002242:	b570      	push	{r4, r5, r6, lr}
1a002244:	460e      	mov	r6, r1
1a002246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00224a:	2900      	cmp	r1, #0
1a00224c:	b096      	sub	sp, #88	; 0x58
1a00224e:	4614      	mov	r4, r2
1a002250:	461d      	mov	r5, r3
1a002252:	da07      	bge.n	1a002264 <__swhatbuf_r+0x22>
1a002254:	2300      	movs	r3, #0
1a002256:	602b      	str	r3, [r5, #0]
1a002258:	89b3      	ldrh	r3, [r6, #12]
1a00225a:	061a      	lsls	r2, r3, #24
1a00225c:	d410      	bmi.n	1a002280 <__swhatbuf_r+0x3e>
1a00225e:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a002262:	e00e      	b.n	1a002282 <__swhatbuf_r+0x40>
1a002264:	466a      	mov	r2, sp
1a002266:	f7fe fcf6 	bl	1a000c56 <_fstat_r>
1a00226a:	2800      	cmp	r0, #0
1a00226c:	dbf2      	blt.n	1a002254 <__swhatbuf_r+0x12>
1a00226e:	9a01      	ldr	r2, [sp, #4]
1a002270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a002274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a002278:	425a      	negs	r2, r3
1a00227a:	415a      	adcs	r2, r3
1a00227c:	602a      	str	r2, [r5, #0]
1a00227e:	e7ee      	b.n	1a00225e <__swhatbuf_r+0x1c>
1a002280:	2340      	movs	r3, #64	; 0x40
1a002282:	2000      	movs	r0, #0
1a002284:	6023      	str	r3, [r4, #0]
1a002286:	b016      	add	sp, #88	; 0x58
1a002288:	bd70      	pop	{r4, r5, r6, pc}
1a00228a:	Address 0x000000001a00228a is out of bounds.


1a00228c <__smakebuf_r>:
1a00228c:	898b      	ldrh	r3, [r1, #12]
1a00228e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a002290:	079d      	lsls	r5, r3, #30
1a002292:	4606      	mov	r6, r0
1a002294:	460c      	mov	r4, r1
1a002296:	d507      	bpl.n	1a0022a8 <__smakebuf_r+0x1c>
1a002298:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00229c:	6023      	str	r3, [r4, #0]
1a00229e:	6123      	str	r3, [r4, #16]
1a0022a0:	2301      	movs	r3, #1
1a0022a2:	6163      	str	r3, [r4, #20]
1a0022a4:	b002      	add	sp, #8
1a0022a6:	bd70      	pop	{r4, r5, r6, pc}
1a0022a8:	ab01      	add	r3, sp, #4
1a0022aa:	466a      	mov	r2, sp
1a0022ac:	f7ff ffc9 	bl	1a002242 <__swhatbuf_r>
1a0022b0:	9900      	ldr	r1, [sp, #0]
1a0022b2:	4605      	mov	r5, r0
1a0022b4:	4630      	mov	r0, r6
1a0022b6:	f000 f877 	bl	1a0023a8 <_malloc_r>
1a0022ba:	b948      	cbnz	r0, 1a0022d0 <__smakebuf_r+0x44>
1a0022bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0022c0:	059a      	lsls	r2, r3, #22
1a0022c2:	d4ef      	bmi.n	1a0022a4 <__smakebuf_r+0x18>
1a0022c4:	f023 0303 	bic.w	r3, r3, #3
1a0022c8:	f043 0302 	orr.w	r3, r3, #2
1a0022cc:	81a3      	strh	r3, [r4, #12]
1a0022ce:	e7e3      	b.n	1a002298 <__smakebuf_r+0xc>
1a0022d0:	4b0d      	ldr	r3, [pc, #52]	; (1a002308 <__smakebuf_r+0x7c>)
1a0022d2:	62b3      	str	r3, [r6, #40]	; 0x28
1a0022d4:	89a3      	ldrh	r3, [r4, #12]
1a0022d6:	6020      	str	r0, [r4, #0]
1a0022d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0022dc:	81a3      	strh	r3, [r4, #12]
1a0022de:	9b00      	ldr	r3, [sp, #0]
1a0022e0:	6163      	str	r3, [r4, #20]
1a0022e2:	9b01      	ldr	r3, [sp, #4]
1a0022e4:	6120      	str	r0, [r4, #16]
1a0022e6:	b15b      	cbz	r3, 1a002300 <__smakebuf_r+0x74>
1a0022e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0022ec:	4630      	mov	r0, r6
1a0022ee:	f7fe fcb7 	bl	1a000c60 <_isatty_r>
1a0022f2:	b128      	cbz	r0, 1a002300 <__smakebuf_r+0x74>
1a0022f4:	89a3      	ldrh	r3, [r4, #12]
1a0022f6:	f023 0303 	bic.w	r3, r3, #3
1a0022fa:	f043 0301 	orr.w	r3, r3, #1
1a0022fe:	81a3      	strh	r3, [r4, #12]
1a002300:	89a3      	ldrh	r3, [r4, #12]
1a002302:	431d      	orrs	r5, r3
1a002304:	81a5      	strh	r5, [r4, #12]
1a002306:	e7cd      	b.n	1a0022a4 <__smakebuf_r+0x18>
1a002308:	1a00209d 	.word	0x1a00209d

1a00230c <_free_r>:
1a00230c:	b538      	push	{r3, r4, r5, lr}
1a00230e:	4605      	mov	r5, r0
1a002310:	2900      	cmp	r1, #0
1a002312:	d045      	beq.n	1a0023a0 <_free_r+0x94>
1a002314:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002318:	1f0c      	subs	r4, r1, #4
1a00231a:	2b00      	cmp	r3, #0
1a00231c:	bfb8      	it	lt
1a00231e:	18e4      	addlt	r4, r4, r3
1a002320:	f000 f8e0 	bl	1a0024e4 <__malloc_lock>
1a002324:	4a1f      	ldr	r2, [pc, #124]	; (1a0023a4 <_free_r+0x98>)
1a002326:	6813      	ldr	r3, [r2, #0]
1a002328:	4610      	mov	r0, r2
1a00232a:	b933      	cbnz	r3, 1a00233a <_free_r+0x2e>
1a00232c:	6063      	str	r3, [r4, #4]
1a00232e:	6014      	str	r4, [r2, #0]
1a002330:	4628      	mov	r0, r5
1a002332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002336:	f000 b8db 	b.w	1a0024f0 <__malloc_unlock>
1a00233a:	42a3      	cmp	r3, r4
1a00233c:	d90c      	bls.n	1a002358 <_free_r+0x4c>
1a00233e:	6821      	ldr	r1, [r4, #0]
1a002340:	1862      	adds	r2, r4, r1
1a002342:	4293      	cmp	r3, r2
1a002344:	bf04      	itt	eq
1a002346:	681a      	ldreq	r2, [r3, #0]
1a002348:	685b      	ldreq	r3, [r3, #4]
1a00234a:	6063      	str	r3, [r4, #4]
1a00234c:	bf04      	itt	eq
1a00234e:	1852      	addeq	r2, r2, r1
1a002350:	6022      	streq	r2, [r4, #0]
1a002352:	6004      	str	r4, [r0, #0]
1a002354:	e7ec      	b.n	1a002330 <_free_r+0x24>
1a002356:	4613      	mov	r3, r2
1a002358:	685a      	ldr	r2, [r3, #4]
1a00235a:	b10a      	cbz	r2, 1a002360 <_free_r+0x54>
1a00235c:	42a2      	cmp	r2, r4
1a00235e:	d9fa      	bls.n	1a002356 <_free_r+0x4a>
1a002360:	6819      	ldr	r1, [r3, #0]
1a002362:	1858      	adds	r0, r3, r1
1a002364:	42a0      	cmp	r0, r4
1a002366:	d10b      	bne.n	1a002380 <_free_r+0x74>
1a002368:	6820      	ldr	r0, [r4, #0]
1a00236a:	4401      	add	r1, r0
1a00236c:	1858      	adds	r0, r3, r1
1a00236e:	4282      	cmp	r2, r0
1a002370:	6019      	str	r1, [r3, #0]
1a002372:	d1dd      	bne.n	1a002330 <_free_r+0x24>
1a002374:	6810      	ldr	r0, [r2, #0]
1a002376:	6852      	ldr	r2, [r2, #4]
1a002378:	605a      	str	r2, [r3, #4]
1a00237a:	4401      	add	r1, r0
1a00237c:	6019      	str	r1, [r3, #0]
1a00237e:	e7d7      	b.n	1a002330 <_free_r+0x24>
1a002380:	d902      	bls.n	1a002388 <_free_r+0x7c>
1a002382:	230c      	movs	r3, #12
1a002384:	602b      	str	r3, [r5, #0]
1a002386:	e7d3      	b.n	1a002330 <_free_r+0x24>
1a002388:	6820      	ldr	r0, [r4, #0]
1a00238a:	1821      	adds	r1, r4, r0
1a00238c:	428a      	cmp	r2, r1
1a00238e:	bf04      	itt	eq
1a002390:	6811      	ldreq	r1, [r2, #0]
1a002392:	6852      	ldreq	r2, [r2, #4]
1a002394:	6062      	str	r2, [r4, #4]
1a002396:	bf04      	itt	eq
1a002398:	1809      	addeq	r1, r1, r0
1a00239a:	6021      	streq	r1, [r4, #0]
1a00239c:	605c      	str	r4, [r3, #4]
1a00239e:	e7c7      	b.n	1a002330 <_free_r+0x24>
1a0023a0:	bd38      	pop	{r3, r4, r5, pc}
1a0023a2:	bf00      	nop
1a0023a4:	1000015c 	.word	0x1000015c

1a0023a8 <_malloc_r>:
1a0023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0023aa:	1ccd      	adds	r5, r1, #3
1a0023ac:	f025 0503 	bic.w	r5, r5, #3
1a0023b0:	3508      	adds	r5, #8
1a0023b2:	2d0c      	cmp	r5, #12
1a0023b4:	bf38      	it	cc
1a0023b6:	250c      	movcc	r5, #12
1a0023b8:	2d00      	cmp	r5, #0
1a0023ba:	4606      	mov	r6, r0
1a0023bc:	db01      	blt.n	1a0023c2 <_malloc_r+0x1a>
1a0023be:	42a9      	cmp	r1, r5
1a0023c0:	d903      	bls.n	1a0023ca <_malloc_r+0x22>
1a0023c2:	230c      	movs	r3, #12
1a0023c4:	6033      	str	r3, [r6, #0]
1a0023c6:	2000      	movs	r0, #0
1a0023c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0023ca:	f000 f88b 	bl	1a0024e4 <__malloc_lock>
1a0023ce:	4921      	ldr	r1, [pc, #132]	; (1a002454 <_malloc_r+0xac>)
1a0023d0:	680a      	ldr	r2, [r1, #0]
1a0023d2:	4614      	mov	r4, r2
1a0023d4:	b99c      	cbnz	r4, 1a0023fe <_malloc_r+0x56>
1a0023d6:	4f20      	ldr	r7, [pc, #128]	; (1a002458 <_malloc_r+0xb0>)
1a0023d8:	683b      	ldr	r3, [r7, #0]
1a0023da:	b923      	cbnz	r3, 1a0023e6 <_malloc_r+0x3e>
1a0023dc:	4621      	mov	r1, r4
1a0023de:	4630      	mov	r0, r6
1a0023e0:	f7fe fc72 	bl	1a000cc8 <_sbrk_r>
1a0023e4:	6038      	str	r0, [r7, #0]
1a0023e6:	4629      	mov	r1, r5
1a0023e8:	4630      	mov	r0, r6
1a0023ea:	f7fe fc6d 	bl	1a000cc8 <_sbrk_r>
1a0023ee:	1c43      	adds	r3, r0, #1
1a0023f0:	d123      	bne.n	1a00243a <_malloc_r+0x92>
1a0023f2:	230c      	movs	r3, #12
1a0023f4:	6033      	str	r3, [r6, #0]
1a0023f6:	4630      	mov	r0, r6
1a0023f8:	f000 f87a 	bl	1a0024f0 <__malloc_unlock>
1a0023fc:	e7e3      	b.n	1a0023c6 <_malloc_r+0x1e>
1a0023fe:	6823      	ldr	r3, [r4, #0]
1a002400:	1b5b      	subs	r3, r3, r5
1a002402:	d417      	bmi.n	1a002434 <_malloc_r+0x8c>
1a002404:	2b0b      	cmp	r3, #11
1a002406:	d903      	bls.n	1a002410 <_malloc_r+0x68>
1a002408:	6023      	str	r3, [r4, #0]
1a00240a:	441c      	add	r4, r3
1a00240c:	6025      	str	r5, [r4, #0]
1a00240e:	e004      	b.n	1a00241a <_malloc_r+0x72>
1a002410:	6863      	ldr	r3, [r4, #4]
1a002412:	42a2      	cmp	r2, r4
1a002414:	bf0c      	ite	eq
1a002416:	600b      	streq	r3, [r1, #0]
1a002418:	6053      	strne	r3, [r2, #4]
1a00241a:	4630      	mov	r0, r6
1a00241c:	f000 f868 	bl	1a0024f0 <__malloc_unlock>
1a002420:	f104 000b 	add.w	r0, r4, #11
1a002424:	1d23      	adds	r3, r4, #4
1a002426:	f020 0007 	bic.w	r0, r0, #7
1a00242a:	1ac2      	subs	r2, r0, r3
1a00242c:	d0cc      	beq.n	1a0023c8 <_malloc_r+0x20>
1a00242e:	1a1b      	subs	r3, r3, r0
1a002430:	50a3      	str	r3, [r4, r2]
1a002432:	e7c9      	b.n	1a0023c8 <_malloc_r+0x20>
1a002434:	4622      	mov	r2, r4
1a002436:	6864      	ldr	r4, [r4, #4]
1a002438:	e7cc      	b.n	1a0023d4 <_malloc_r+0x2c>
1a00243a:	1cc4      	adds	r4, r0, #3
1a00243c:	f024 0403 	bic.w	r4, r4, #3
1a002440:	42a0      	cmp	r0, r4
1a002442:	d0e3      	beq.n	1a00240c <_malloc_r+0x64>
1a002444:	1a21      	subs	r1, r4, r0
1a002446:	4630      	mov	r0, r6
1a002448:	f7fe fc3e 	bl	1a000cc8 <_sbrk_r>
1a00244c:	3001      	adds	r0, #1
1a00244e:	d1dd      	bne.n	1a00240c <_malloc_r+0x64>
1a002450:	e7cf      	b.n	1a0023f2 <_malloc_r+0x4a>
1a002452:	bf00      	nop
1a002454:	1000015c 	.word	0x1000015c
1a002458:	10000160 	.word	0x10000160

1a00245c <__sread>:
1a00245c:	b510      	push	{r4, lr}
1a00245e:	460c      	mov	r4, r1
1a002460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002464:	f7fe fc0a 	bl	1a000c7c <_read_r>
1a002468:	2800      	cmp	r0, #0
1a00246a:	bfab      	itete	ge
1a00246c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00246e:	89a3      	ldrhlt	r3, [r4, #12]
1a002470:	181b      	addge	r3, r3, r0
1a002472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a002476:	bfac      	ite	ge
1a002478:	6563      	strge	r3, [r4, #84]	; 0x54
1a00247a:	81a3      	strhlt	r3, [r4, #12]
1a00247c:	bd10      	pop	{r4, pc}

1a00247e <__swrite>:
1a00247e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002482:	461f      	mov	r7, r3
1a002484:	898b      	ldrh	r3, [r1, #12]
1a002486:	05db      	lsls	r3, r3, #23
1a002488:	4605      	mov	r5, r0
1a00248a:	460c      	mov	r4, r1
1a00248c:	4616      	mov	r6, r2
1a00248e:	d505      	bpl.n	1a00249c <__swrite+0x1e>
1a002490:	2302      	movs	r3, #2
1a002492:	2200      	movs	r2, #0
1a002494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002498:	f7fe fbeb 	bl	1a000c72 <_lseek_r>
1a00249c:	89a3      	ldrh	r3, [r4, #12]
1a00249e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0024a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0024a6:	81a3      	strh	r3, [r4, #12]
1a0024a8:	4632      	mov	r2, r6
1a0024aa:	463b      	mov	r3, r7
1a0024ac:	4628      	mov	r0, r5
1a0024ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0024b2:	f7fe bc19 	b.w	1a000ce8 <_write_r>

1a0024b6 <__sseek>:
1a0024b6:	b510      	push	{r4, lr}
1a0024b8:	460c      	mov	r4, r1
1a0024ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0024be:	f7fe fbd8 	bl	1a000c72 <_lseek_r>
1a0024c2:	1c43      	adds	r3, r0, #1
1a0024c4:	89a3      	ldrh	r3, [r4, #12]
1a0024c6:	bf15      	itete	ne
1a0024c8:	6560      	strne	r0, [r4, #84]	; 0x54
1a0024ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0024ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0024d2:	81a3      	strheq	r3, [r4, #12]
1a0024d4:	bf18      	it	ne
1a0024d6:	81a3      	strhne	r3, [r4, #12]
1a0024d8:	bd10      	pop	{r4, pc}

1a0024da <__sclose>:
1a0024da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0024de:	f7fe bbb5 	b.w	1a000c4c <_close_r>
1a0024e2:	Address 0x000000001a0024e2 is out of bounds.


1a0024e4 <__malloc_lock>:
1a0024e4:	4801      	ldr	r0, [pc, #4]	; (1a0024ec <__malloc_lock+0x8>)
1a0024e6:	f7ff beaa 	b.w	1a00223e <__retarget_lock_acquire_recursive>
1a0024ea:	bf00      	nop
1a0024ec:	10000180 	.word	0x10000180

1a0024f0 <__malloc_unlock>:
1a0024f0:	4801      	ldr	r0, [pc, #4]	; (1a0024f8 <__malloc_unlock+0x8>)
1a0024f2:	f7ff bea5 	b.w	1a002240 <__retarget_lock_release_recursive>
1a0024f6:	bf00      	nop
1a0024f8:	10000180 	.word	0x10000180
1a0024fc:	2044454c 	.word	0x2044454c
1a002500:	65636e65 	.word	0x65636e65
1a002504:	6469646e 	.word	0x6469646e
1a002508:	000d2e6f 	.word	0x000d2e6f
1a00250c:	2044454c 	.word	0x2044454c
1a002510:	67617061 	.word	0x67617061
1a002514:	2e6f6461 	.word	0x2e6f6461
1a002518:	ffff000d 	.word	0xffff000d

1a00251c <ultrasonicSensorsIrqMap>:
1a00251c:	ff020100                                ....

1a002520 <gpioPinsInit>:
1a002520:	02000104 00050701 05010d03 04080100     ................
1a002530:	02020002 02000304 00000403 04070002     ................
1a002540:	030c0300 09050402 05040103 04030208     ................
1a002550:	04020305 06040504 0802000c 03000b06     ................
1a002560:	00090607 07060503 060f0504 03030004     ................
1a002570:	02000404 00050404 06040502 04060200     ................
1a002580:	0c050408 05040a04 0003010e 14010a00     ................
1a002590:	010f0000 0d000012 00001101 0010010c     ................
1a0025a0:	07070300 000f0300 01000001 00000000     ................
1a0025b0:	000a0600 08060603 06100504 04030005     ................
1a0025c0:	03000106 04090400 04010d05 010b0000     ................
1a0025d0:	0200000f 00000001 00010104 02010800     ................
1a0025e0:	01090000 09010006 05040002 04010200     ................
1a0025f0:	02020105 02020504 0e00000a 01000b02     ................
1a002600:	000c020b 00040c01 04000200 01020001     ................
1a002610:	02000204 00030402 03070302 070b0300     ................
1a002620:	0c030004 03000507 0006070d 01020e03     ................
1a002630:	04010504 06020006 02000504 00040405     ................
1a002640:	08040402 040c0504 0d050409 05040a04     ................
1a002650:	0005010e ffff0801                       ........

1a002658 <lpcUarts>:
1a002658:	40081000 06020406 00180205 40081000     ...@...........@
1a002668:	09070509 00180706 40082000 00000000     ......... .@....
1a002678:	00190000 400c1000 07060107 001a0602     .......@........
1a002688:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002698:	02020302 001b0204                       ........

1a0026a0 <ExtRateIn>:
1a0026a0:	00000000                                ....

1a0026a4 <GpioButtons>:
1a0026a4:	08000400 09010900                       ........

1a0026ac <GpioLeds>:
1a0026ac:	01050005 0e000205 0c010b01              ............

1a0026b8 <GpioPorts>:
1a0026b8:	03030003 0f050403 05031005 07030603     ................
1a0026c8:	ffff0802                                ....

1a0026cc <OscRateIn>:
1a0026cc:	00b71b00                                ....

1a0026d0 <InitClkStates>:
1a0026d0:	00010308 00010307 01010f01              ............

1a0026dc <pinmuxing>:
1a0026dc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0026ec:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0026fc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00270c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00271c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00272c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00273c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00274c:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a00275c:	00b31201 00f01301 00b31401 00b60707     ................
1a00276c:	00f20000 00b60100                       ........

1a002774 <UART_BClock>:
1a002774:	01a201c2 01620182                       ......b.

1a00277c <UART_PClock>:
1a00277c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00278c:	000000ff                                ....

1a002790 <periph_to_base>:
1a002790:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0027a0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0027b0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0027c0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0027d0:	01820013 00120182 01a201a2 01c20011     ................
1a0027e0:	001001c2 01e201e2 0202000f 000e0202     ................
1a0027f0:	02220222 0223000d 001c0223              "."...#.#...

1a0027fc <InitClkStates>:
1a0027fc:	00010100 00010909 0001090a 01010701     ................
1a00280c:	00010902 00010906 0101090c 0001090d     ................
1a00281c:	0001090e 0001090f 00010910 00010911     ................
1a00282c:	00010912 00010913 00011114 00011119     ................
1a00283c:	0001111a 0001111b                       ........

1a002844 <__sf_fake_stderr>:
	...

1a002864 <__sf_fake_stdin>:
	...

1a002884 <__sf_fake_stdout>:
	...

1a0028a4 <_global_impure_ptr>:
1a0028a4:	100000cc                                ....
